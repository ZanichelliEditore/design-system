/* The width of the card must be set by its container,
respecting the grid indications of the design. */

:host {
  /* Override this var to change the cover's aspect ratio */
  --aspect-ratio: 1.62;
  --z-card--border-color: var(--gray200);
  --z-card--color-cover-background: var(--color-surface01);
  --z-card--text-background: var(--color-surface01);
  --z-card--text-border-radius: none;
  --z-card--text-border: none;
  --z-card--text-padding: calc(var(--space-unit) * 2) var(--space-unit);

  position: relative;
  display: flex;
  flex-direction: column;
  font-family: var(--font-family-sans);
  font-weight: var(--font-rg);
}

*,
::slotted(*) {
  box-sizing: border-box;
}

:host(:not([variant="overlay"])) .cover-container {
  position: relative;
  width: 100%;
}

/* Old good trick with percentage padding to keep the aspect ratio.
Unfortunately the `aspect-ratio` property is still experimental */
.cover-container {
  padding-bottom: calc(100% / var(--aspect-ratio));
}

::slotted([slot="cover"]),
.color-cover {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center;
}

.cover-container > z-icon {
  --z-icon-width: calc(var(--space-unit) * 11);
  --z-icon-height: var(--z-icon-width);

  position: absolute;
  top: calc(50% - calc(var(--z-icon-height) / 2));
  left: calc(50% - calc(var(--z-icon-width) / 2));
  fill: var(--color-primary01);
}

.color-cover {
  background-color: var(--z-card--color-cover-background);
}

.content {
  display: flex;
  flex-direction: column;
  padding-top: var(--space-unit);
}

.color-cover .cover-content {
  display: flex;
  height: 100%;
  flex-direction: column;
  justify-content: flex-end;
  padding: var(--space-unit);
}

/* Truncates overflowing text */
::slotted([slot="metadata"]),
::slotted([slot="title"]),
::slotted([slot="text"]) {
  display: box;
  overflow: hidden;
  -webkit-box-orient: vertical;
}

::slotted([slot="title"]:not(:last-child)),
::slotted([slot="text"]:not(:last-child)) {
  margin-bottom: var(--space-unit);
}

::slotted([slot="title"])::before {
  position: absolute;
  z-index: 1;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  content: "";
}

::slotted([slot="metadata"]:not(:last-child)) {
  margin: 0 0 calc(var(--space-unit) * 0.25);
  -webkit-line-clamp: 1;
  text-transform: uppercase;
}

::slotted([slot="title"]) {
  margin: 0;
  color: inherit;
  font-size: inherit;
  font-weight: var(--font-sb);
  -webkit-line-clamp: 2;
  text-decoration: none;
}

::slotted([slot="text"]) {
  margin: 0;
  -webkit-line-clamp: 3;
}

.actions {
  position: relative;
  z-index: 2;
  display: flex;
  width: fit-content;
  flex-direction: row;
  align-items: center;
}

::slotted([slot="action"]:not(:last-child)) {
  margin-right: calc(var(--space-unit) * 2);
}

:host(:not([variant])[clickable]:focus:focus-visible) {
  padding: calc(var(--space-unit) * 0.5);
  box-shadow: var(--shadow-focus-primary);
}

:host([variant="text"]) {
  border: var(--z-card--text-border);
  background-color: var(--z-card--text-background);
  border-radius: var(--z-card--text-border-radius);
}

:host([showshadow]) > .content,
:host([variant="border"]) > .content,
:host([variant="shadow"]) > .content {
  height: 100%;
  padding: var(--space-unit) var(--space-unit) calc(var(--space-unit) * 2);
}

:host([variant="text"]) > .content {
  padding: var(--z-card--text-padding);
}

:host([variant="border"]) .actions,
:host([variant="shadow"]) .actions {
  margin-top: auto;
}

/* Border */
:host([variant="border"]) {
  border: var(--border-size-small) solid var(--z-card--border-color);
}

:host([variant="border"][showhover]:hover) > .content {
  background: var(--color-background);
}

:host([variant="border"][showhover]:focus:focus-visible) {
  box-shadow: var(--shadow-focus-primary);
}

:host([variant="border"][showhover]:active) {
  border-color: transparent;
}

/* Shadow */
:host([variant="shadow"]),
:host([showshadow]) {
  box-shadow: var(--shadow-2);
}

:host([variant="shadow"][showhover]:hover),
:host([showhover][showshadow]:hover) {
  box-shadow: var(--shadow-4);
}

:host([variant="shadow"][showhover]:focus:focus-visible),
:host([showhover][showshadow]:focus:focus-visible) {
  box-shadow: var(--shadow-focus-primary);
}

:host([variant="shadow"][showhover]:active),
:host([showhover][showshadow]:active) {
  box-shadow: none;
}

/* Overlay */
:host([variant="overlay"]) .content {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  justify-content: flex-end;
  padding: var(--space-unit);
  background-image: linear-gradient(to top, rgb(0 0 0 / 100%), rgb(0 0 0 / 0%));
  color: var(--color-text-inverse);
  fill: var(--color-text-inverse);
}
