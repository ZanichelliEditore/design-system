:host,
::slotted(*),
* {
  box-sizing: border-box;
  outline: none;
}

:host {
  --z-menu-label-color: ;

  position: relative;
  display: inline-flex;
  height: fit-content;
  flex-direction: column;
}

::slotted(a) {
  text-decoration: none;
}

::slotted(*) {
  color: var(--color-default-text);
  font-family: var(--font-family-sans);
  font-weight: var(--font-rg);
}

.menu-label {
  position: relative;
  display: flex;
  width: 100%;
  align-items: center;
  padding: 0;
  border: 0;
  border-bottom: var(--border-size-large) solid transparent;
  margin: 0;
  background: transparent;
  border-radius: 0;
  color: inherit;
  text-align: left;
}

button.menu-label {
  cursor: pointer;
}

.menu-label:focus-visible,
div.menu-label:focus-within {
  box-shadow: var(--shadow-focus-primary);
}

:host(:is([active], [open])) .menu-label ::slotted(*),
.menu-label:focus-visible ::slotted(*),
div.menu-label:focus-within ::slotted(*) {
  color: var(--color-primary01);
  font-weight: var(--font-bd);
}

:host([vertical-context]) .menu-label {
  padding: var(--space-unit) 0;
  border-width: var(--border-size-small);
  border-color: var(--color-surface03);
}

:host(:is([active], [open])) .menu-label,
.menu-label:hover,
.menu-label:focus-visible,
div.menu-label:focus-within {
  border-color: var(--color-primary01);
}

:host([vertical-context]:is([active], [open])) .menu-label::after,
:host([vertical-context]) .menu-label:hover::after,
:host([vertical-context]) .menu-label:focus-visible::after,
:host([vertical-context]) div.menu-label:focus-within::after {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: var(--border-size-large);
  background-color: var(--color-primary01);
  content: "";
}

:host([vertical-context]) .menu-label ::slotted(*) {
  padding: 0;
}

.menu-label ::slotted(*) {
  display: inline-flex;
  width: 100%;
  min-width: fit-content;
  padding-bottom: 2px;
  margin: 0;
  appearance: none;
  color: var(--z-menu-label-color, var(--color-default-text));
  font-family: var(--font-family-sans);
  font-size: var(--font-size-3);
  font-weight: inherit;
  line-height: 1.5;
  white-space: nowrap;
}

.menu-label z-icon {
  margin-left: calc(var(--space-unit) * 1.5);
  fill: var(--color-default-icon);
}

/* Prevents layout shifts on font-weight changes.
The trick is to put an hidden copy of the text already set to bold,
so the needed space is correctly calculated before any hover/active state changes the
font-weight of the real text.
The hidden text has an height of 0px so it can expand the width without changing the height
when placed below the real text using `flex-direction: column`. */
::slotted([data-text]:not([slot]))::after {
  height: 0;
  content: attr(data-text);
  content: attr(data-text) / "";
  font-weight: var(--font-bd);
  letter-spacing: normal;
  pointer-events: none;
  user-select: none;
  visibility: hidden;
}

@media speech {
  ::slotted([data-text]:not([slot]))::after {
    display: none;
  }
}

::slotted([data-text]:not([slot])) {
  display: inline-flex;
  flex-direction: column;
}

.content {
  background: var(--color-surface01);
}

:host(:not([open])) .content {
  display: none;
}

:host([floating]:not([vertical-context])) .content {
  position: absolute;
  top: 100%;
  left: 0;
  width: 375px;
  min-width: 100%;
  max-width: 100vw;
  padding: 0 calc(var(--space-unit) * 2);
  box-shadow: var(--shadow-2);
}

:host(:not([floating])) .content {
  width: 100%;
}

.header {
  display: flex;
  align-items: center;
  padding: var(--space-unit) 0 calc(var(--space-unit) * 2);
}

.header ::slotted(img[slot="header"]) {
  width: calc(var(--space-unit) * 11.25);
  height: auto;
  object-fit: contain;
}

.header ::slotted([slot="header"]:not(:first-child)) {
  margin: auto 0;
  margin-left: calc(var(--space-unit) * 2.5);
  font-size: var(--font-size-3);
  font-weight: var(--font-sb);
  line-height: 1.5;
}

.items {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  background: inherit;
}

.items > ::slotted([slot="item"]) {
  width: 100%;
  margin: 0;
  font-size: var(--font-size-3);
  line-height: 1.5;
}

.items > ::slotted([slot="item"]:focus:focus-visible) {
  box-shadow: var(--shadow-focus-primary);
}

.items > ::slotted([slot="item"]:not(z-menu-section)) {
  padding: var(--space-unit) 0;
  border-bottom: var(--border-size-small) solid var(--color-surface03);
}

:host(:not([vertical-context])) .items > ::slotted([slot="item"]:last-child) {
  border-bottom: 0;
}

.items > ::slotted([slot="item"]:hover),
.items > ::slotted([slot="item"]:focus:focus-visible),
.items > ::slotted([slot="item"]:active) {
  border-color: var(--color-primary01);
  font-weight: var(--font-bd);
}
