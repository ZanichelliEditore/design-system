:host,
::slotted(*),
* {
  box-sizing: border-box;
}

:host {
  position: relative;
  display: inline-flex;
  flex-direction: column;

  --z-menu-label-color: var(--color-default-text);
}

::slotted(a) {
  text-decoration: none;
}

::slotted(*) {
  color: var(--color-default-text);
  font-family: var(--font-family-sans);
  font-weight: var(--font-rg);
}

.menu-label {
  padding: 0;
  border: 0;
  margin: 0;
  background: transparent;
  border-radius: 0;
  color: inherit;
  outline: none;
  text-align: left;
}

.menu-wrapper {
  display: flex;
  align-items: center;
}

button.menu-label {
  width: 100%;
  cursor: pointer;
}

.menu-label:focus-within {
  z-index: 1;
  padding-right: calc(var(--space-unit) * 0.5);
  padding-left: calc(var(--space-unit) * 0.5);
  margin-right: calc(var(--space-unit) * -0.5);
  margin-left: calc(var(--space-unit) * -0.5);
  box-shadow: var(--shadow-focus-primary);
}

.menu-label .menu-label-content {
  position: relative;
  display: flex;
  height: 30px;
  align-items: center;
}

:host(:is([active], [open])) .menu-label-content,
.menu-label:focus-within .menu-label-content {
  font-weight: var(--font-bd);
}

:host(:is([active], [open])) .menu-label-content ::slotted(*),
.menu-label:focus-within .menu-label-content ::slotted(*) {
  letter-spacing: normal;
}

:host .menu-label .menu-label-content ::slotted(*:not([slot]):focus:focus-visible) {
  box-shadow: none !important;
}

/* border */
:host(:is([active], [open], [vertical-context])) .menu-label .menu-label-content::after,
.menu-label .menu-label-content:hover::after,
.menu-label:focus-within .menu-label-content::after {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  content: "";
  pointer-events: none;
}

:host([vertical-context]) .menu-label-content::after {
  height: var(--border-size-small);
  background-color: var(--color-surface03);
}

:host(:is([active], [open])) .menu-label .menu-label-content::after,
.menu-label .menu-label-content:hover::after,
.menu-label:focus-within .menu-label-content::after {
  height: var(--border-size-large);
  background-color: var(--color-secondary01);
}

/* Prevents layout shifts on font-weight changes.
The trick is to put an hidden copy of the text already set to bold,
so the needed space is correctly calculated before any hover/active state changes the
font-weight of the real text.
The hidden text has an height of 0px so it can expand the width without changing the height
when placed below the real text using `flex-direction: column`. */
::slotted([data-text])::after {
  height: 0;
  content: attr(data-text);
  content: attr(data-text) / "";
  font-weight: var(--font-bd);
  letter-spacing: normal;
  pointer-events: none;
  user-select: none;
  visibility: hidden;
}

@media speech {
  ::slotted([data-text])::after {
    display: none;
  }
}

::slotted([data-text]) {
  display: inline-flex;
  flex-direction: column;
}

.menu-label .menu-label-content ::slotted(*) {
  display: inline-flex;
  width: 100%;
  margin: 0;
  appearance: none;
  color: var(--z-menu-label-color);
  font-family: var(--font-family-sans);
  font-size: calc(var(--space-unit) * 2);
  font-weight: inherit;
  letter-spacing: 0.36px;
  outline: none;
}

.menu-label .menu-label-content ::slotted(*),
.menu-label .menu-label-content z-icon {
  padding: var(--space-unit) 0;
}

.menu-label .menu-label-content z-icon {
  margin-left: calc(var(--space-unit) * 1.5);
  fill: currentcolor;
}

.content {
  background: var(--color-surface01);
}

:host(:not([open])) .content {
  display: none;
}

:host([floating]) .content {
  position: absolute;
  top: 100%;
  left: 0;
  width: 375px;
  min-width: 100%;
  max-width: 100vw;
  padding: var(--space-unit) var(--space-unit) calc(var(--space-unit) * 2);
  box-shadow: var(--shadow-2);
}

:host(:not([floating])) .content {
  width: 100%;
}

.header {
  display: flex;
  align-items: center;
  padding: var(--space-unit) 0 calc(var(--space-unit) * 2);
}

.header ::slotted(img[slot="header"]) {
  width: calc(var(--space-unit) * 11.25);
  height: auto;
  object-fit: contain;
}

.header ::slotted([slot="header"]:not(:first-child)) {
  margin: auto 0;
  margin-left: calc(var(--space-unit) * 2.5);
  font-size: var(--font-size-3);
  font-weight: var(--font-sb);
  line-height: 1.5;
}

.items {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  background: inherit;
}

.items > ::slotted([slot="item"]) {
  width: 100%;
  margin: 0;
  font-size: var(--font-size-3);
  line-height: 1.25;
  outline: none;
}

.items > ::slotted([slot="item"]:focus:focus-visible) {
  box-shadow: var(--shadow-focus-primary);
}

.items > ::slotted([slot="item"]:not(z-menu-section)) {
  padding: calc(var(--space-unit) * 2) calc(var(--space-unit) * 0.5);
  border-bottom: var(--border-size-small) solid var(--color-surface05);
}

.items > ::slotted([slot="item"]:hover),
.items > ::slotted([slot="item"]:focus:focus-visible),
.items > ::slotted([slot="item"]:active) {
  border-color: var(--color-secondary01);
  font-weight: var(--font-bd);
}

/* Desktop breakpoint */
@media (min-width: 768px) {
  .menu-wrapper > z-divider.menu-divider,
  .menu-label > z-divider.menu-divider {
    height: calc(var(--space-unit) * 2);
    margin: 0 calc(var(--space-unit) * 2);
  }
}
