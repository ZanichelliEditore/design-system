/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonVariantBean, ComboItemBean, DictionaryData, HeaderUserData, InputStatusBean, InputTypeBean, MenuItem, SelectItemBean } from "./beans";
import { LicenseTypeEnum, MenuItem as MenuItem1, TooltipPosition } from "./beans/index";
import { ListItemBean } from "./beans/index.js";
export namespace Components {
    interface ZButton {
        /**
          * disable button
         */
        "disabled"?: boolean;
        /**
          * id, should be unique
         */
        "htmlid"?: string;
        /**
          * add an icon to button (optional)
         */
        "icon"?: string;
        /**
          * reduce button size (optional)
         */
        "issmall"?: boolean;
        /**
          * name
         */
        "name"?: string;
        /**
          * button type
         */
        "type"?: HTMLButtonElement["type"];
        /**
          * graphic variant
         */
        "variant"?: ButtonVariantBean;
    }
    interface ZButtonFilter {
        /**
          * filter id
         */
        "filterid": string;
        /**
          * filter text content
         */
        "filtername": string;
        /**
          * add icon to button
         */
        "hasicon": boolean;
        /**
          * disable action on button
         */
        "isfixed": boolean;
        /**
          * reduce button size (optional)
         */
        "issmall"?: boolean;
    }
    interface ZButtonSort {
        /**
          * id, should be unique
         */
        "buttonid": string;
        /**
          * occurrencies counter (optional)
         */
        "counter"?: number;
        /**
          * label content (descending)
         */
        "desclabel"?: string;
        /**
          * selected flag (optional)
         */
        "isselected"?: boolean;
        /**
          * label content (ascending)
         */
        "label": string;
        /**
          * sortable flag (optional)
         */
        "sortasc"?: boolean;
        /**
          * sort label content (ascending) (optional)
         */
        "sortlabelasc"?: string;
        /**
          * sort label content (descending) (optional)
         */
        "sortlabeldesc"?: string;
    }
    interface ZCandybar {
    }
    interface ZCard {
        /**
          * graphic variant (optional)
         */
        "cardtype"?: LicenseTypeEnum;
        /**
          * faded status
         */
        "faded": boolean;
        /**
          * highlighted status
         */
        "ishighlighted": boolean;
        /**
          * pressed status
         */
        "ispressed": boolean;
    }
    interface ZCardAlert {
        /**
          * action button text
         */
        "actiontext"?: string;
        /**
          * content text
         */
        "contenttext": string;
        /**
          * icon name
         */
        "iconname": string;
        /**
          * alert variant type
         */
        "type": string;
    }
    interface ZCardBody {
    }
    interface ZCardCover {
        /**
          * default error image source
         */
        "defaultimg": string;
        /**
          * faded status
         */
        "faded": boolean;
        /**
          * image source
         */
        "img": string;
        /**
          * cover alt title
         */
        "titolo": string;
    }
    interface ZCardDictionary {
        /**
          * card cover
         */
        "cover": string;
        /**
          * card is disabled
         */
        "disabled": boolean;
        /**
          * flip button label
         */
        "flipbuttonlabel": string;
        /**
          * card is flipped
         */
        "flipped": boolean;
        /**
          * card title
         */
        "name": string;
    }
    interface ZCardFooter {
        /**
          * authors name text
         */
        "autori": string;
        /**
          * authors label text
         */
        "autorilabel": string;
        /**
          * card graphic variant (optional)
         */
        "cardtype"?: LicenseTypeEnum;
        /**
          * faded status
         */
        "faded": boolean;
        /**
          * volume isbn
         */
        "isbn": string;
        /**
          * volume title
         */
        "titolo": string;
    }
    interface ZCardFooterSections {
    }
    interface ZCardHeader {
        /**
          * card graphic variant (optional)
         */
        "cardtype"?: LicenseTypeEnum;
        /**
          * faded status
         */
        "faded": boolean;
        /**
          * volume title
         */
        "titolo": string;
    }
    interface ZCardIcon {
        /**
          * icon name
         */
        "icon": string;
        /**
          * disabled status flag
         */
        "isdisabled": boolean;
    }
    interface ZCardInfo {
        /**
          * dictionary info
         */
        "data": string | DictionaryData;
        /**
          * tabindex link attribute (optional)
         */
        "htmltabindex"?: number;
    }
    interface ZCardList {
        /**
          * list data stringified array
         */
        "listdata": string;
    }
    interface ZChip {
        "boldtext"?: number;
        "regulartext"?: string;
    }
    interface ZCombobox {
        /**
          * check all label (optional)
         */
        "checkalltext"?: string;
        /**
          * close combobox list text
         */
        "closesearchtext"?: string;
        /**
          * show "check all" checkbox (optional)
         */
        "hascheckall"?: boolean;
        /**
          * show search input flag (optional)
         */
        "hassearch"?: boolean;
        /**
          * input unique id
         */
        "inputid": string;
        /**
          * fixed style flag
         */
        "isfixed": boolean;
        /**
          * toggle combo list opening flag
         */
        "isopen": boolean;
        /**
          * list items array
         */
        "items": ComboItemBean[] | string;
        /**
          * label text
         */
        "label": string;
        /**
          * max number of checkable items (0 = unlimited)
         */
        "maxcheckableitems": number;
        /**
          * no result text message
         */
        "noresultslabel"?: string;
        /**
          * search input label text (optional)
         */
        "searchlabel"?: string;
        /**
          * search input placeholder text (optional)
         */
        "searchplaceholder"?: string;
        /**
          * search input title text (optional)
         */
        "searchtitle"?: string;
        /**
          * uncheck all label (optional)
         */
        "uncheckalltext"?: string;
    }
    interface ZFooter {
        /**
          * set copyright user (optional)
         */
        "copyrightuser"?: any;
        /**
          * JSON stringified data to fill the footer
         */
        "data": string;
    }
    interface ZHeader {
        /**
          * set current active menu link (optional)
         */
        "activeintlinkid"?: string;
        /**
          * set current active sub menu link (optional)
         */
        "activesublinkid"?: string;
        /**
          * data to fill external navigation links
         */
        "extlinkdata"?: string | MenuItem[];
        /**
          * hide login button if true (optional)
         */
        "hideloginbutton"?: boolean;
        /**
          * alternative logo title text (optional)
         */
        "imagealt"?: string;
        /**
          * data to fill internal navigation links
         */
        "intlinkdata"?: string | MenuItem[];
        /**
          * graphic flag to set myzanichelli style
         */
        "ismyz": boolean;
        /**
          * url to attach to logo (optional)
         */
        "logolink"?: string;
        /**
          * data to fill user dropdown menu (optional)
         */
        "userdata"?: string | HeaderUserData;
    }
    interface ZIcon {
        /**
          * icon height (optional)
         */
        "height"?: number;
        /**
          * icon id (optional)
         */
        "iconid"?: string;
        /**
          * icon name (choice between available icons)
         */
        "name": string;
        /**
          * icon width (optional)
         */
        "width"?: number;
    }
    interface ZIconPackage {
    }
    interface ZInfoBox {
        /**
          * info box unique id
         */
        "boxid": string;
        /**
          * render close icon flag
         */
        "isclosable": boolean;
    }
    interface ZInput {
        /**
          * the input has autocomplete option (optional): available for select
         */
        "autocomplete"?: boolean;
        /**
          * checked: available for checkbox, radio
         */
        "checked"?: boolean;
        /**
          * the input is disabled
         */
        "disabled"?: boolean;
        /**
          * get the input value
         */
        "getValue": () => Promise<string | string[]>;
        /**
          * render clear icon when typing (optional): available for text
         */
        "hasclearicon"?: boolean;
        /**
          * show input helper message (optional): available for text, password, number, email, textarea, select
         */
        "hasmessage"?: boolean;
        /**
          * the id of the input element
         */
        "htmlid": string;
        /**
          * the input html title (optional)
         */
        "htmltitle"?: string;
        /**
          * render icon (optional): available for text, select
         */
        "icon"?: string;
        /**
          * get checked status
         */
        "isChecked": () => Promise<boolean>;
        /**
          * items (optional): available for select
         */
        "items"?: SelectItemBean[] | string;
        /**
          * the input label
         */
        "label"?: string;
        /**
          * the input label position: available for checkbox, radio
         */
        "labelafter"?: boolean;
        /**
          * input helper message (optional): available for text, password, number, email, textarea, select
         */
        "message"?: string;
        /**
          * multiple options can be selected (optional): available for select
         */
        "multiple"?: boolean;
        /**
          * the input name
         */
        "name"?: string;
        /**
          * the input placeholder (optional)
         */
        "placeholder"?: string;
        /**
          * the input is readonly
         */
        "readonly"?: boolean;
        /**
          * the input is required (optional): available for text, password, number, email, textarea, checkbox
         */
        "required"?: boolean;
        /**
          * set the input value
         */
        "setValue": (value: string | string[]) => Promise<void>;
        /**
          * the input status (optional): available for text, password, number, email, textarea, select
         */
        "status"?: InputStatusBean;
        /**
          * input types
         */
        "type": InputTypeBean;
        /**
          * timeout setting before trigger `inputChange` event (optional): available for text, textarea
         */
        "typingtimeout"?: number;
        /**
          * the input value
         */
        "value"?: string;
    }
    interface ZInputLabel {
        /**
          * the label is disabled
         */
        "disabled"?: boolean;
        /**
          * the label value
         */
        "value": string;
    }
    interface ZInputMessage {
        /**
          * input helper message
         */
        "message": string;
        /**
          * input status (optional)
         */
        "status"?: InputStatusBean;
    }
    interface ZLink {
        /**
          * link url (optional)
         */
        "href"?: string;
        /**
          * link id (optional)
         */
        "htmlid"?: string;
        /**
          * tabindex link attribute (optional)
         */
        "htmltabindex"?: number;
        /**
          * link icon name (optional)
         */
        "icon"?: string;
        /**
          * active link flag (optional)
         */
        "isactive"?: boolean;
        /**
          * disable link flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * white variant flag (optional)
         */
        "iswhite"?: boolean;
        /**
          * link target (optional)
         */
        "target"?: string;
    }
    interface ZList {
        /**
          * json stringified list data (optional)
         */
        "inputrawdata"?: string;
        /**
          * list item data (mutable, optional)
         */
        "list"?: ListItemBean[];
    }
    interface ZListItem {
        /**
          * data-action attribute (optional)
         */
        "action"?: string;
        /**
          * icon name (optional)
         */
        "icon"?: string;
        /**
          * link url (optional)
         */
        "link"?: string;
        /**
          * link target (optional)
         */
        "linktarget"?: string;
        /**
          * id (optional)
         */
        "listitemid"?: string;
        /**
          * content text
         */
        "text": string;
        /**
          * underlined style flag
         */
        "underlined": boolean;
    }
    interface ZLogo {
        /**
          * image height
         */
        "height": number;
        /**
          * alternative image text
         */
        "imagealt"?: string;
        /**
          * link url (optional)
         */
        "link"?: string;
        /**
          * link target (optional)
         */
        "targetblank"?: boolean;
        /**
          * image width
         */
        "width": number;
    }
    interface ZMenuDropdown {
        /**
          * unique button id
         */
        "buttonid": string;
        /**
          * Json stringified or array to fill menu dropdown
         */
        "menucontent": string | MenuItem[];
        /**
          * user name text
         */
        "nomeutente": string;
    }
    interface ZModal {
        /**
          * unique id
         */
        "modalid": string;
        /**
          * subtitle (optional)
         */
        "modalsubtitle"?: string;
        /**
          * title text (optional)
         */
        "modaltitle"?: string;
    }
    interface ZPaginationBar {
        /**
          * current displayed page (mutable)
         */
        "currentpage": number;
        /**
          * json stringified history of visited pages (optional)
         */
        "historyraw"?: string;
        /**
          * array of history of visited pages (mutable, optional)
         */
        "listhistoryrow"?: number[];
        /**
          * pages number
         */
        "pages": number;
        /**
          * initial page (mutable)
         */
        "startpage": number;
        /**
          * number of visible pages
         */
        "visiblepages": number;
    }
    interface ZPaginationPage {
        /**
          * disabled status flag
         */
        "isdisabled": boolean;
        /**
          * selected status flag
         */
        "isselected": boolean;
        /**
          * visited status flag
         */
        "isvisited": boolean;
        /**
          * anchor html id
         */
        "pageid": string;
        /**
          * numeric page value (optional)
         */
        "value"?: number;
    }
    interface ZPanelElem {
        /**
          * name of slot container (optional)
         */
        "descr_slot_name"?: string;
        /**
          * html element id (optional)
         */
        "elemid"?: string;
        /**
          * alternative image text (optional)
         */
        "imgalt"?: string;
        /**
          * image url source (optional)
         */
        "imgurl"?: string;
        /**
          * disabled status flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * icon link name (optional)
         */
        "linkicon"?: string;
        /**
          * link label text
         */
        "linklabel": string;
        /**
          * link target (optional)
         */
        "target"?: string;
        /**
          * link url
         */
        "url": string;
    }
    interface ZSelect {
        /**
          * the input has autocomplete option
         */
        "autocomplete"?: boolean;
        /**
          * the input is disabled
         */
        "disabled"?: boolean;
        /**
          * get the input selected options
         */
        "getSelectedItems": () => Promise<SelectItemBean[]>;
        /**
          * get the input value
         */
        "getValue": () => Promise<string | string[]>;
        /**
          * show input helper message (optional): available for text, password, number, email, textarea, select
         */
        "hasmessage"?: boolean;
        /**
          * the id of the input element
         */
        "htmlid": string;
        /**
          * the input html title (optional)
         */
        "htmltitle"?: string;
        /**
          * the input select options
         */
        "items": SelectItemBean[] | string;
        /**
          * the input label
         */
        "label"?: string;
        /**
          * input helper message (optional): available for text, password, number, email, textarea, select
         */
        "message"?: string;
        /**
          * multiple options can be selected
         */
        "multiple"?: boolean;
        /**
          * the input name
         */
        "name"?: string;
        /**
          * no result text message
         */
        "noresultslabel"?: string;
        /**
          * the input placeholder (optional)
         */
        "placeholder"?: string;
        /**
          * the input is readonly
         */
        "readonly"?: boolean;
        /**
          * set the input value
         */
        "setValue": (value: string | string[]) => Promise<void>;
        /**
          * the input status (optional): available for text, password, number, email, textarea, select
         */
        "status"?: InputStatusBean;
    }
    interface ZStepper {
    }
    interface ZStepperItem {
        /**
          * The disabled state of the item.
         */
        "disabled": boolean;
        /**
          * The href to navigate on click.
         */
        "href": string;
        /**
          * The number of the step item.
         */
        "index": number;
        /**
          * The pressed state of the item.
         */
        "pressed": boolean;
    }
    interface ZToggleButton {
        /**
          * avoidclick status flag
         */
        "avoidclick": boolean;
        /**
          * disabled status flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * label text
         */
        "label": string;
    }
    interface ZTooltip {
        /**
          * content text
         */
        "content": string;
        /**
          * tooltip position variant
         */
        "type": TooltipPosition;
    }
}
declare global {
    interface HTMLZButtonElement extends Components.ZButton, HTMLStencilElement {
    }
    var HTMLZButtonElement: {
        prototype: HTMLZButtonElement;
        new (): HTMLZButtonElement;
    };
    interface HTMLZButtonFilterElement extends Components.ZButtonFilter, HTMLStencilElement {
    }
    var HTMLZButtonFilterElement: {
        prototype: HTMLZButtonFilterElement;
        new (): HTMLZButtonFilterElement;
    };
    interface HTMLZButtonSortElement extends Components.ZButtonSort, HTMLStencilElement {
    }
    var HTMLZButtonSortElement: {
        prototype: HTMLZButtonSortElement;
        new (): HTMLZButtonSortElement;
    };
    interface HTMLZCandybarElement extends Components.ZCandybar, HTMLStencilElement {
    }
    var HTMLZCandybarElement: {
        prototype: HTMLZCandybarElement;
        new (): HTMLZCandybarElement;
    };
    interface HTMLZCardElement extends Components.ZCard, HTMLStencilElement {
    }
    var HTMLZCardElement: {
        prototype: HTMLZCardElement;
        new (): HTMLZCardElement;
    };
    interface HTMLZCardAlertElement extends Components.ZCardAlert, HTMLStencilElement {
    }
    var HTMLZCardAlertElement: {
        prototype: HTMLZCardAlertElement;
        new (): HTMLZCardAlertElement;
    };
    interface HTMLZCardBodyElement extends Components.ZCardBody, HTMLStencilElement {
    }
    var HTMLZCardBodyElement: {
        prototype: HTMLZCardBodyElement;
        new (): HTMLZCardBodyElement;
    };
    interface HTMLZCardCoverElement extends Components.ZCardCover, HTMLStencilElement {
    }
    var HTMLZCardCoverElement: {
        prototype: HTMLZCardCoverElement;
        new (): HTMLZCardCoverElement;
    };
    interface HTMLZCardDictionaryElement extends Components.ZCardDictionary, HTMLStencilElement {
    }
    var HTMLZCardDictionaryElement: {
        prototype: HTMLZCardDictionaryElement;
        new (): HTMLZCardDictionaryElement;
    };
    interface HTMLZCardFooterElement extends Components.ZCardFooter, HTMLStencilElement {
    }
    var HTMLZCardFooterElement: {
        prototype: HTMLZCardFooterElement;
        new (): HTMLZCardFooterElement;
    };
    interface HTMLZCardFooterSectionsElement extends Components.ZCardFooterSections, HTMLStencilElement {
    }
    var HTMLZCardFooterSectionsElement: {
        prototype: HTMLZCardFooterSectionsElement;
        new (): HTMLZCardFooterSectionsElement;
    };
    interface HTMLZCardHeaderElement extends Components.ZCardHeader, HTMLStencilElement {
    }
    var HTMLZCardHeaderElement: {
        prototype: HTMLZCardHeaderElement;
        new (): HTMLZCardHeaderElement;
    };
    interface HTMLZCardIconElement extends Components.ZCardIcon, HTMLStencilElement {
    }
    var HTMLZCardIconElement: {
        prototype: HTMLZCardIconElement;
        new (): HTMLZCardIconElement;
    };
    interface HTMLZCardInfoElement extends Components.ZCardInfo, HTMLStencilElement {
    }
    var HTMLZCardInfoElement: {
        prototype: HTMLZCardInfoElement;
        new (): HTMLZCardInfoElement;
    };
    interface HTMLZCardListElement extends Components.ZCardList, HTMLStencilElement {
    }
    var HTMLZCardListElement: {
        prototype: HTMLZCardListElement;
        new (): HTMLZCardListElement;
    };
    interface HTMLZChipElement extends Components.ZChip, HTMLStencilElement {
    }
    var HTMLZChipElement: {
        prototype: HTMLZChipElement;
        new (): HTMLZChipElement;
    };
    interface HTMLZComboboxElement extends Components.ZCombobox, HTMLStencilElement {
    }
    var HTMLZComboboxElement: {
        prototype: HTMLZComboboxElement;
        new (): HTMLZComboboxElement;
    };
    interface HTMLZFooterElement extends Components.ZFooter, HTMLStencilElement {
    }
    var HTMLZFooterElement: {
        prototype: HTMLZFooterElement;
        new (): HTMLZFooterElement;
    };
    interface HTMLZHeaderElement extends Components.ZHeader, HTMLStencilElement {
    }
    var HTMLZHeaderElement: {
        prototype: HTMLZHeaderElement;
        new (): HTMLZHeaderElement;
    };
    interface HTMLZIconElement extends Components.ZIcon, HTMLStencilElement {
    }
    var HTMLZIconElement: {
        prototype: HTMLZIconElement;
        new (): HTMLZIconElement;
    };
    interface HTMLZIconPackageElement extends Components.ZIconPackage, HTMLStencilElement {
    }
    var HTMLZIconPackageElement: {
        prototype: HTMLZIconPackageElement;
        new (): HTMLZIconPackageElement;
    };
    interface HTMLZInfoBoxElement extends Components.ZInfoBox, HTMLStencilElement {
    }
    var HTMLZInfoBoxElement: {
        prototype: HTMLZInfoBoxElement;
        new (): HTMLZInfoBoxElement;
    };
    interface HTMLZInputElement extends Components.ZInput, HTMLStencilElement {
    }
    var HTMLZInputElement: {
        prototype: HTMLZInputElement;
        new (): HTMLZInputElement;
    };
    interface HTMLZInputLabelElement extends Components.ZInputLabel, HTMLStencilElement {
    }
    var HTMLZInputLabelElement: {
        prototype: HTMLZInputLabelElement;
        new (): HTMLZInputLabelElement;
    };
    interface HTMLZInputMessageElement extends Components.ZInputMessage, HTMLStencilElement {
    }
    var HTMLZInputMessageElement: {
        prototype: HTMLZInputMessageElement;
        new (): HTMLZInputMessageElement;
    };
    interface HTMLZLinkElement extends Components.ZLink, HTMLStencilElement {
    }
    var HTMLZLinkElement: {
        prototype: HTMLZLinkElement;
        new (): HTMLZLinkElement;
    };
    interface HTMLZListElement extends Components.ZList, HTMLStencilElement {
    }
    var HTMLZListElement: {
        prototype: HTMLZListElement;
        new (): HTMLZListElement;
    };
    interface HTMLZListItemElement extends Components.ZListItem, HTMLStencilElement {
    }
    var HTMLZListItemElement: {
        prototype: HTMLZListItemElement;
        new (): HTMLZListItemElement;
    };
    interface HTMLZLogoElement extends Components.ZLogo, HTMLStencilElement {
    }
    var HTMLZLogoElement: {
        prototype: HTMLZLogoElement;
        new (): HTMLZLogoElement;
    };
    interface HTMLZMenuDropdownElement extends Components.ZMenuDropdown, HTMLStencilElement {
    }
    var HTMLZMenuDropdownElement: {
        prototype: HTMLZMenuDropdownElement;
        new (): HTMLZMenuDropdownElement;
    };
    interface HTMLZModalElement extends Components.ZModal, HTMLStencilElement {
    }
    var HTMLZModalElement: {
        prototype: HTMLZModalElement;
        new (): HTMLZModalElement;
    };
    interface HTMLZPaginationBarElement extends Components.ZPaginationBar, HTMLStencilElement {
    }
    var HTMLZPaginationBarElement: {
        prototype: HTMLZPaginationBarElement;
        new (): HTMLZPaginationBarElement;
    };
    interface HTMLZPaginationPageElement extends Components.ZPaginationPage, HTMLStencilElement {
    }
    var HTMLZPaginationPageElement: {
        prototype: HTMLZPaginationPageElement;
        new (): HTMLZPaginationPageElement;
    };
    interface HTMLZPanelElemElement extends Components.ZPanelElem, HTMLStencilElement {
    }
    var HTMLZPanelElemElement: {
        prototype: HTMLZPanelElemElement;
        new (): HTMLZPanelElemElement;
    };
    interface HTMLZSelectElement extends Components.ZSelect, HTMLStencilElement {
    }
    var HTMLZSelectElement: {
        prototype: HTMLZSelectElement;
        new (): HTMLZSelectElement;
    };
    interface HTMLZStepperElement extends Components.ZStepper, HTMLStencilElement {
    }
    var HTMLZStepperElement: {
        prototype: HTMLZStepperElement;
        new (): HTMLZStepperElement;
    };
    interface HTMLZStepperItemElement extends Components.ZStepperItem, HTMLStencilElement {
    }
    var HTMLZStepperItemElement: {
        prototype: HTMLZStepperItemElement;
        new (): HTMLZStepperItemElement;
    };
    interface HTMLZToggleButtonElement extends Components.ZToggleButton, HTMLStencilElement {
    }
    var HTMLZToggleButtonElement: {
        prototype: HTMLZToggleButtonElement;
        new (): HTMLZToggleButtonElement;
    };
    interface HTMLZTooltipElement extends Components.ZTooltip, HTMLStencilElement {
    }
    var HTMLZTooltipElement: {
        prototype: HTMLZTooltipElement;
        new (): HTMLZTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "z-button": HTMLZButtonElement;
        "z-button-filter": HTMLZButtonFilterElement;
        "z-button-sort": HTMLZButtonSortElement;
        "z-candybar": HTMLZCandybarElement;
        "z-card": HTMLZCardElement;
        "z-card-alert": HTMLZCardAlertElement;
        "z-card-body": HTMLZCardBodyElement;
        "z-card-cover": HTMLZCardCoverElement;
        "z-card-dictionary": HTMLZCardDictionaryElement;
        "z-card-footer": HTMLZCardFooterElement;
        "z-card-footer-sections": HTMLZCardFooterSectionsElement;
        "z-card-header": HTMLZCardHeaderElement;
        "z-card-icon": HTMLZCardIconElement;
        "z-card-info": HTMLZCardInfoElement;
        "z-card-list": HTMLZCardListElement;
        "z-chip": HTMLZChipElement;
        "z-combobox": HTMLZComboboxElement;
        "z-footer": HTMLZFooterElement;
        "z-header": HTMLZHeaderElement;
        "z-icon": HTMLZIconElement;
        "z-icon-package": HTMLZIconPackageElement;
        "z-info-box": HTMLZInfoBoxElement;
        "z-input": HTMLZInputElement;
        "z-input-label": HTMLZInputLabelElement;
        "z-input-message": HTMLZInputMessageElement;
        "z-link": HTMLZLinkElement;
        "z-list": HTMLZListElement;
        "z-list-item": HTMLZListItemElement;
        "z-logo": HTMLZLogoElement;
        "z-menu-dropdown": HTMLZMenuDropdownElement;
        "z-modal": HTMLZModalElement;
        "z-pagination-bar": HTMLZPaginationBarElement;
        "z-pagination-page": HTMLZPaginationPageElement;
        "z-panel-elem": HTMLZPanelElemElement;
        "z-select": HTMLZSelectElement;
        "z-stepper": HTMLZStepperElement;
        "z-stepper-item": HTMLZStepperItemElement;
        "z-toggle-button": HTMLZToggleButtonElement;
        "z-tooltip": HTMLZTooltipElement;
    }
}
declare namespace LocalJSX {
    interface ZButton {
        /**
          * disable button
         */
        "disabled"?: boolean;
        /**
          * id, should be unique
         */
        "htmlid"?: string;
        /**
          * add an icon to button (optional)
         */
        "icon"?: string;
        /**
          * reduce button size (optional)
         */
        "issmall"?: boolean;
        /**
          * name
         */
        "name"?: string;
        /**
          * button type
         */
        "type"?: HTMLButtonElement["type"];
        /**
          * graphic variant
         */
        "variant"?: ButtonVariantBean;
    }
    interface ZButtonFilter {
        /**
          * filter id
         */
        "filterid"?: string;
        /**
          * filter text content
         */
        "filtername"?: string;
        /**
          * add icon to button
         */
        "hasicon"?: boolean;
        /**
          * disable action on button
         */
        "isfixed"?: boolean;
        /**
          * reduce button size (optional)
         */
        "issmall"?: boolean;
        /**
          * remove filter click event, returns filterid
         */
        "onRemovefilter"?: (event: CustomEvent<any>) => void;
    }
    interface ZButtonSort {
        /**
          * id, should be unique
         */
        "buttonid"?: string;
        /**
          * occurrencies counter (optional)
         */
        "counter"?: number;
        /**
          * label content (descending)
         */
        "desclabel"?: string;
        /**
          * selected flag (optional)
         */
        "isselected"?: boolean;
        /**
          * label content (ascending)
         */
        "label"?: string;
        /**
          * sorting direction click event, returns buttonid and sortAsc
         */
        "onButtonSortClick"?: (event: CustomEvent<any>) => void;
        /**
          * sortable flag (optional)
         */
        "sortasc"?: boolean;
        /**
          * sort label content (ascending) (optional)
         */
        "sortlabelasc"?: string;
        /**
          * sort label content (descending) (optional)
         */
        "sortlabeldesc"?: string;
    }
    interface ZCandybar {
    }
    interface ZCard {
        /**
          * graphic variant (optional)
         */
        "cardtype"?: LicenseTypeEnum;
        /**
          * faded status
         */
        "faded"?: boolean;
        /**
          * highlighted status
         */
        "ishighlighted"?: boolean;
        /**
          * pressed status
         */
        "ispressed"?: boolean;
    }
    interface ZCardAlert {
        /**
          * action button text
         */
        "actiontext"?: string;
        /**
          * content text
         */
        "contenttext"?: string;
        /**
          * icon name
         */
        "iconname"?: string;
        /**
          * undo action click/keyboard event, returns actionType
         */
        "onUndoAction"?: (event: CustomEvent<any>) => void;
        /**
          * alert variant type
         */
        "type"?: string;
    }
    interface ZCardBody {
    }
    interface ZCardCover {
        /**
          * default error image source
         */
        "defaultimg"?: string;
        /**
          * faded status
         */
        "faded"?: boolean;
        /**
          * image source
         */
        "img"?: string;
        /**
          * cover alt title
         */
        "titolo"?: string;
    }
    interface ZCardDictionary {
        /**
          * card cover
         */
        "cover"?: string;
        /**
          * card is disabled
         */
        "disabled"?: boolean;
        /**
          * flip button label
         */
        "flipbuttonlabel"?: string;
        /**
          * card is flipped
         */
        "flipped"?: boolean;
        /**
          * card title
         */
        "name"?: string;
        /**
          * when card is flipped
         */
        "onCardFlipped"?: (event: CustomEvent<any>) => void;
    }
    interface ZCardFooter {
        /**
          * authors name text
         */
        "autori"?: string;
        /**
          * authors label text
         */
        "autorilabel"?: string;
        /**
          * card graphic variant (optional)
         */
        "cardtype"?: LicenseTypeEnum;
        /**
          * faded status
         */
        "faded"?: boolean;
        /**
          * volume isbn
         */
        "isbn"?: string;
        /**
          * volume title
         */
        "titolo"?: string;
    }
    interface ZCardFooterSections {
    }
    interface ZCardHeader {
        /**
          * card graphic variant (optional)
         */
        "cardtype"?: LicenseTypeEnum;
        /**
          * faded status
         */
        "faded"?: boolean;
        /**
          * volume title
         */
        "titolo"?: string;
    }
    interface ZCardIcon {
        /**
          * icon name
         */
        "icon"?: string;
        /**
          * disabled status flag
         */
        "isdisabled"?: boolean;
    }
    interface ZCardInfo {
        /**
          * dictionary info
         */
        "data"?: string | DictionaryData;
        /**
          * tabindex link attribute (optional)
         */
        "htmltabindex"?: number;
        /**
          * flip card to front
         */
        "onFlipCard"?: (event: CustomEvent<any>) => void;
    }
    interface ZCardList {
        /**
          * list data stringified array
         */
        "listdata"?: string;
    }
    interface ZChip {
        "boldtext"?: number;
        "regulartext"?: string;
    }
    interface ZCombobox {
        /**
          * check all label (optional)
         */
        "checkalltext"?: string;
        /**
          * close combobox list text
         */
        "closesearchtext"?: string;
        /**
          * show "check all" checkbox (optional)
         */
        "hascheckall"?: boolean;
        /**
          * show search input flag (optional)
         */
        "hassearch"?: boolean;
        /**
          * input unique id
         */
        "inputid"?: string;
        /**
          * fixed style flag
         */
        "isfixed"?: boolean;
        /**
          * toggle combo list opening flag
         */
        "isopen"?: boolean;
        /**
          * list items array
         */
        "items"?: ComboItemBean[] | string;
        /**
          * label text
         */
        "label"?: string;
        /**
          * max number of checkable items (0 = unlimited)
         */
        "maxcheckableitems"?: number;
        /**
          * no result text message
         */
        "noresultslabel"?: string;
        /**
          * Emitted when value is checked/unchecked. Returns id, items.
         */
        "onComboboxChange"?: (event: CustomEvent<any>) => void;
        /**
          * search input label text (optional)
         */
        "searchlabel"?: string;
        /**
          * search input placeholder text (optional)
         */
        "searchplaceholder"?: string;
        /**
          * search input title text (optional)
         */
        "searchtitle"?: string;
        /**
          * uncheck all label (optional)
         */
        "uncheckalltext"?: string;
    }
    interface ZFooter {
        /**
          * set copyright user (optional)
         */
        "copyrightuser"?: any;
        /**
          * JSON stringified data to fill the footer
         */
        "data"?: string;
    }
    interface ZHeader {
        /**
          * set current active menu link (optional)
         */
        "activeintlinkid"?: string;
        /**
          * set current active sub menu link (optional)
         */
        "activesublinkid"?: string;
        /**
          * data to fill external navigation links
         */
        "extlinkdata"?: string | MenuItem[];
        /**
          * hide login button if true (optional)
         */
        "hideloginbutton"?: boolean;
        /**
          * alternative logo title text (optional)
         */
        "imagealt"?: string;
        /**
          * data to fill internal navigation links
         */
        "intlinkdata"?: string | MenuItem[];
        /**
          * graphic flag to set myzanichelli style
         */
        "ismyz"?: boolean;
        /**
          * url to attach to logo (optional)
         */
        "logolink"?: string;
        /**
          * data to fill user dropdown menu (optional)
         */
        "userdata"?: string | HeaderUserData;
    }
    interface ZIcon {
        /**
          * icon height (optional)
         */
        "height"?: number;
        /**
          * icon id (optional)
         */
        "iconid"?: string;
        /**
          * icon name (choice between available icons)
         */
        "name"?: string;
        /**
          * icon width (optional)
         */
        "width"?: number;
    }
    interface ZIconPackage {
    }
    interface ZInfoBox {
        /**
          * info box unique id
         */
        "boxid"?: string;
        /**
          * render close icon flag
         */
        "isclosable"?: boolean;
        /**
          * emitted on close icon click
         */
        "onInfoBoxClose"?: (event: CustomEvent<any>) => void;
    }
    interface ZInput {
        /**
          * the input has autocomplete option (optional): available for select
         */
        "autocomplete"?: boolean;
        /**
          * checked: available for checkbox, radio
         */
        "checked"?: boolean;
        /**
          * the input is disabled
         */
        "disabled"?: boolean;
        /**
          * render clear icon when typing (optional): available for text
         */
        "hasclearicon"?: boolean;
        /**
          * show input helper message (optional): available for text, password, number, email, textarea, select
         */
        "hasmessage"?: boolean;
        /**
          * the id of the input element
         */
        "htmlid"?: string;
        /**
          * the input html title (optional)
         */
        "htmltitle"?: string;
        /**
          * render icon (optional): available for text, select
         */
        "icon"?: string;
        /**
          * items (optional): available for select
         */
        "items"?: SelectItemBean[] | string;
        /**
          * the input label
         */
        "label"?: string;
        /**
          * the input label position: available for checkbox, radio
         */
        "labelafter"?: boolean;
        /**
          * input helper message (optional): available for text, password, number, email, textarea, select
         */
        "message"?: string;
        /**
          * multiple options can be selected (optional): available for select
         */
        "multiple"?: boolean;
        /**
          * the input name
         */
        "name"?: string;
        /**
          * Emitted on input value change, returns value, keycode, validity
         */
        "onInputChange"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted on checkbox check/uncheck, returns id, checked, type, name, value, validity
         */
        "onInputCheck"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted on select option selection, returns select id, selected item id (or array of selected items ids if multiple)
         */
        "onOptionSelect"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when user starts typing
         */
        "onStartTyping"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when user stops typing, returns value, validity
         */
        "onStopTyping"?: (event: CustomEvent<any>) => void;
        /**
          * the input placeholder (optional)
         */
        "placeholder"?: string;
        /**
          * the input is readonly
         */
        "readonly"?: boolean;
        /**
          * the input is required (optional): available for text, password, number, email, textarea, checkbox
         */
        "required"?: boolean;
        /**
          * the input status (optional): available for text, password, number, email, textarea, select
         */
        "status"?: InputStatusBean;
        /**
          * input types
         */
        "type"?: InputTypeBean;
        /**
          * timeout setting before trigger `inputChange` event (optional): available for text, textarea
         */
        "typingtimeout"?: number;
        /**
          * the input value
         */
        "value"?: string;
    }
    interface ZInputLabel {
        /**
          * the label is disabled
         */
        "disabled"?: boolean;
        /**
          * the label value
         */
        "value"?: string;
    }
    interface ZInputMessage {
        /**
          * input helper message
         */
        "message"?: string;
        /**
          * input status (optional)
         */
        "status"?: InputStatusBean;
    }
    interface ZLink {
        /**
          * link url (optional)
         */
        "href"?: string;
        /**
          * link id (optional)
         */
        "htmlid"?: string;
        /**
          * tabindex link attribute (optional)
         */
        "htmltabindex"?: number;
        /**
          * link icon name (optional)
         */
        "icon"?: string;
        /**
          * active link flag (optional)
         */
        "isactive"?: boolean;
        /**
          * disable link flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * white variant flag (optional)
         */
        "iswhite"?: boolean;
        /**
          * emitted on link click, returns linkId
         */
        "onZLinkClick"?: (event: CustomEvent<any>) => void;
        /**
          * link target (optional)
         */
        "target"?: string;
    }
    interface ZList {
        /**
          * json stringified list data (optional)
         */
        "inputrawdata"?: string;
        /**
          * list item data (mutable, optional)
         */
        "list"?: ListItemBean[];
    }
    interface ZListItem {
        /**
          * data-action attribute (optional)
         */
        "action"?: string;
        /**
          * icon name (optional)
         */
        "icon"?: string;
        /**
          * link url (optional)
         */
        "link"?: string;
        /**
          * link target (optional)
         */
        "linktarget"?: string;
        /**
          * id (optional)
         */
        "listitemid"?: string;
        /**
          * emitted on list item click, returns listitemid
         */
        "onZListItemClick"?: (event: CustomEvent<any>) => void;
        /**
          * emitted on list item link click, returns linkId
         */
        "onZListItemLinkClick"?: (event: CustomEvent<any>) => void;
        /**
          * content text
         */
        "text"?: string;
        /**
          * underlined style flag
         */
        "underlined"?: boolean;
    }
    interface ZLogo {
        /**
          * image height
         */
        "height"?: number;
        /**
          * alternative image text
         */
        "imagealt"?: string;
        /**
          * link url (optional)
         */
        "link"?: string;
        /**
          * link target (optional)
         */
        "targetblank"?: boolean;
        /**
          * image width
         */
        "width"?: number;
    }
    interface ZMenuDropdown {
        /**
          * unique button id
         */
        "buttonid"?: string;
        /**
          * Json stringified or array to fill menu dropdown
         */
        "menucontent"?: string | MenuItem[];
        /**
          * user name text
         */
        "nomeutente"?: string;
    }
    interface ZModal {
        /**
          * unique id
         */
        "modalid"?: string;
        /**
          * subtitle (optional)
         */
        "modalsubtitle"?: string;
        /**
          * title text (optional)
         */
        "modaltitle"?: string;
        /**
          * emitted on close icon click, returns modalid
         */
        "onModalClose"?: (event: CustomEvent<any>) => void;
        /**
          * emitted on modal header click, returns modalid
         */
        "onModalHeaderActive"?: (event: CustomEvent<any>) => void;
    }
    interface ZPaginationBar {
        /**
          * current displayed page (mutable)
         */
        "currentpage"?: number;
        /**
          * json stringified history of visited pages (optional)
         */
        "historyraw"?: string;
        /**
          * array of history of visited pages (mutable, optional)
         */
        "listhistoryrow"?: number[];
        /**
          * emitted on adding page to isvisited array, returns page
         */
        "onAddPageToHistory"?: (event: CustomEvent<any>) => void;
        /**
          * emitted on start page change, returns startpage
         */
        "onChangeStartPage"?: (event: CustomEvent<any>) => void;
        /**
          * emitted on page number click, returns page
         */
        "onGoToPage"?: (event: CustomEvent<any>) => void;
        /**
          * pages number
         */
        "pages"?: number;
        /**
          * initial page (mutable)
         */
        "startpage"?: number;
        /**
          * number of visible pages
         */
        "visiblepages"?: number;
    }
    interface ZPaginationPage {
        /**
          * disabled status flag
         */
        "isdisabled"?: boolean;
        /**
          * selected status flag
         */
        "isselected"?: boolean;
        /**
          * visited status flag
         */
        "isvisited"?: boolean;
        /**
          * anchor html id
         */
        "pageid"?: string;
        /**
          * numeric page value (optional)
         */
        "value"?: number;
    }
    interface ZPanelElem {
        /**
          * name of slot container (optional)
         */
        "descr_slot_name"?: string;
        /**
          * html element id (optional)
         */
        "elemid"?: string;
        /**
          * alternative image text (optional)
         */
        "imgalt"?: string;
        /**
          * image url source (optional)
         */
        "imgurl"?: string;
        /**
          * disabled status flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * icon link name (optional)
         */
        "linkicon"?: string;
        /**
          * link label text
         */
        "linklabel"?: string;
        /**
          * link target (optional)
         */
        "target"?: string;
        /**
          * link url
         */
        "url"?: string;
    }
    interface ZSelect {
        /**
          * the input has autocomplete option
         */
        "autocomplete"?: boolean;
        /**
          * the input is disabled
         */
        "disabled"?: boolean;
        /**
          * show input helper message (optional): available for text, password, number, email, textarea, select
         */
        "hasmessage"?: boolean;
        /**
          * the id of the input element
         */
        "htmlid"?: string;
        /**
          * the input html title (optional)
         */
        "htmltitle"?: string;
        /**
          * the input select options
         */
        "items"?: SelectItemBean[] | string;
        /**
          * the input label
         */
        "label"?: string;
        /**
          * input helper message (optional): available for text, password, number, email, textarea, select
         */
        "message"?: string;
        /**
          * multiple options can be selected
         */
        "multiple"?: boolean;
        /**
          * the input name
         */
        "name"?: string;
        /**
          * no result text message
         */
        "noresultslabel"?: string;
        /**
          * Emitted on select option selection, returns select id, selected item id (or array of selected items ids if multiple)
         */
        "onOptionSelect"?: (event: CustomEvent<any>) => void;
        /**
          * the input placeholder (optional)
         */
        "placeholder"?: string;
        /**
          * the input is readonly
         */
        "readonly"?: boolean;
        /**
          * the input status (optional): available for text, password, number, email, textarea, select
         */
        "status"?: InputStatusBean;
    }
    interface ZStepper {
    }
    interface ZStepperItem {
        /**
          * The disabled state of the item.
         */
        "disabled"?: boolean;
        /**
          * The href to navigate on click.
         */
        "href"?: string;
        /**
          * The number of the step item.
         */
        "index"?: number;
        /**
          * The pressed state of the item.
         */
        "pressed"?: boolean;
    }
    interface ZToggleButton {
        /**
          * avoidclick status flag
         */
        "avoidclick"?: boolean;
        /**
          * disabled status flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * label text
         */
        "label"?: string;
        /**
          * emitted on toggle button click, returns isOpen
         */
        "onToggleClick"?: (event: CustomEvent<any>) => void;
    }
    interface ZTooltip {
        /**
          * content text
         */
        "content"?: string;
        /**
          * tooltip position variant
         */
        "type"?: TooltipPosition;
    }
    interface IntrinsicElements {
        "z-button": ZButton;
        "z-button-filter": ZButtonFilter;
        "z-button-sort": ZButtonSort;
        "z-candybar": ZCandybar;
        "z-card": ZCard;
        "z-card-alert": ZCardAlert;
        "z-card-body": ZCardBody;
        "z-card-cover": ZCardCover;
        "z-card-dictionary": ZCardDictionary;
        "z-card-footer": ZCardFooter;
        "z-card-footer-sections": ZCardFooterSections;
        "z-card-header": ZCardHeader;
        "z-card-icon": ZCardIcon;
        "z-card-info": ZCardInfo;
        "z-card-list": ZCardList;
        "z-chip": ZChip;
        "z-combobox": ZCombobox;
        "z-footer": ZFooter;
        "z-header": ZHeader;
        "z-icon": ZIcon;
        "z-icon-package": ZIconPackage;
        "z-info-box": ZInfoBox;
        "z-input": ZInput;
        "z-input-label": ZInputLabel;
        "z-input-message": ZInputMessage;
        "z-link": ZLink;
        "z-list": ZList;
        "z-list-item": ZListItem;
        "z-logo": ZLogo;
        "z-menu-dropdown": ZMenuDropdown;
        "z-modal": ZModal;
        "z-pagination-bar": ZPaginationBar;
        "z-pagination-page": ZPaginationPage;
        "z-panel-elem": ZPanelElem;
        "z-select": ZSelect;
        "z-stepper": ZStepper;
        "z-stepper-item": ZStepperItem;
        "z-toggle-button": ZToggleButton;
        "z-tooltip": ZTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "z-button": LocalJSX.ZButton & JSXBase.HTMLAttributes<HTMLZButtonElement>;
            "z-button-filter": LocalJSX.ZButtonFilter & JSXBase.HTMLAttributes<HTMLZButtonFilterElement>;
            "z-button-sort": LocalJSX.ZButtonSort & JSXBase.HTMLAttributes<HTMLZButtonSortElement>;
            "z-candybar": LocalJSX.ZCandybar & JSXBase.HTMLAttributes<HTMLZCandybarElement>;
            "z-card": LocalJSX.ZCard & JSXBase.HTMLAttributes<HTMLZCardElement>;
            "z-card-alert": LocalJSX.ZCardAlert & JSXBase.HTMLAttributes<HTMLZCardAlertElement>;
            "z-card-body": LocalJSX.ZCardBody & JSXBase.HTMLAttributes<HTMLZCardBodyElement>;
            "z-card-cover": LocalJSX.ZCardCover & JSXBase.HTMLAttributes<HTMLZCardCoverElement>;
            "z-card-dictionary": LocalJSX.ZCardDictionary & JSXBase.HTMLAttributes<HTMLZCardDictionaryElement>;
            "z-card-footer": LocalJSX.ZCardFooter & JSXBase.HTMLAttributes<HTMLZCardFooterElement>;
            "z-card-footer-sections": LocalJSX.ZCardFooterSections & JSXBase.HTMLAttributes<HTMLZCardFooterSectionsElement>;
            "z-card-header": LocalJSX.ZCardHeader & JSXBase.HTMLAttributes<HTMLZCardHeaderElement>;
            "z-card-icon": LocalJSX.ZCardIcon & JSXBase.HTMLAttributes<HTMLZCardIconElement>;
            "z-card-info": LocalJSX.ZCardInfo & JSXBase.HTMLAttributes<HTMLZCardInfoElement>;
            "z-card-list": LocalJSX.ZCardList & JSXBase.HTMLAttributes<HTMLZCardListElement>;
            "z-chip": LocalJSX.ZChip & JSXBase.HTMLAttributes<HTMLZChipElement>;
            "z-combobox": LocalJSX.ZCombobox & JSXBase.HTMLAttributes<HTMLZComboboxElement>;
            "z-footer": LocalJSX.ZFooter & JSXBase.HTMLAttributes<HTMLZFooterElement>;
            "z-header": LocalJSX.ZHeader & JSXBase.HTMLAttributes<HTMLZHeaderElement>;
            "z-icon": LocalJSX.ZIcon & JSXBase.HTMLAttributes<HTMLZIconElement>;
            "z-icon-package": LocalJSX.ZIconPackage & JSXBase.HTMLAttributes<HTMLZIconPackageElement>;
            "z-info-box": LocalJSX.ZInfoBox & JSXBase.HTMLAttributes<HTMLZInfoBoxElement>;
            "z-input": LocalJSX.ZInput & JSXBase.HTMLAttributes<HTMLZInputElement>;
            "z-input-label": LocalJSX.ZInputLabel & JSXBase.HTMLAttributes<HTMLZInputLabelElement>;
            "z-input-message": LocalJSX.ZInputMessage & JSXBase.HTMLAttributes<HTMLZInputMessageElement>;
            "z-link": LocalJSX.ZLink & JSXBase.HTMLAttributes<HTMLZLinkElement>;
            "z-list": LocalJSX.ZList & JSXBase.HTMLAttributes<HTMLZListElement>;
            "z-list-item": LocalJSX.ZListItem & JSXBase.HTMLAttributes<HTMLZListItemElement>;
            "z-logo": LocalJSX.ZLogo & JSXBase.HTMLAttributes<HTMLZLogoElement>;
            "z-menu-dropdown": LocalJSX.ZMenuDropdown & JSXBase.HTMLAttributes<HTMLZMenuDropdownElement>;
            "z-modal": LocalJSX.ZModal & JSXBase.HTMLAttributes<HTMLZModalElement>;
            "z-pagination-bar": LocalJSX.ZPaginationBar & JSXBase.HTMLAttributes<HTMLZPaginationBarElement>;
            "z-pagination-page": LocalJSX.ZPaginationPage & JSXBase.HTMLAttributes<HTMLZPaginationPageElement>;
            "z-panel-elem": LocalJSX.ZPanelElem & JSXBase.HTMLAttributes<HTMLZPanelElemElement>;
            "z-select": LocalJSX.ZSelect & JSXBase.HTMLAttributes<HTMLZSelectElement>;
            "z-stepper": LocalJSX.ZStepper & JSXBase.HTMLAttributes<HTMLZStepperElement>;
            "z-stepper-item": LocalJSX.ZStepperItem & JSXBase.HTMLAttributes<HTMLZStepperItemElement>;
            "z-toggle-button": LocalJSX.ZToggleButton & JSXBase.HTMLAttributes<HTMLZToggleButtonElement>;
            "z-tooltip": LocalJSX.ZTooltip & JSXBase.HTMLAttributes<HTMLZTooltipElement>;
        }
    }
}
