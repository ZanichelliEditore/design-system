/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AccordionVariant, AvatarSize, BookCardVariant, BreadcrumbHomepageVariant, BreadcrumbPath, BreadcrumbPathStyle, ButtonSize, ButtonType, ButtonVariant, CardVariant, CarouselArrowsPosition, CarouselProgressMode, ComboItem, ControlSize, CoverHeroContentPosition, CoverHeroVariant, DictionaryData, DividerOrientation, DividerSize, ExpandableListButtonAlign, ExpandableListStyle, InfoRevealPosition, InputStatus, InputType, LabelPosition, ListDividerType, ListSize, ListType, NavigationTabsOrientation, NavigationTabsSize, NotificationType, OffCanvasVariant, PopoverPosition, SearchbarItem, SelectItem, SkipToContentLink, SortDirection, ThemeVariant, ToastNotification, ToastNotificationPosition, ToastNotificationTransition, TransitionDirection, VisibilityCondition, ZAriaAlertMode, ZChipType, ZDatePickerMode, ZFileUploadType, ZRangePickerMode, ZSectionTitleDividerPosition } from "./beans";
import { AlertType, LicenseType } from "./beans/index";
import { ListItem } from "./beans/index.js";
export { AccordionVariant, AvatarSize, BookCardVariant, BreadcrumbHomepageVariant, BreadcrumbPath, BreadcrumbPathStyle, ButtonSize, ButtonType, ButtonVariant, CardVariant, CarouselArrowsPosition, CarouselProgressMode, ComboItem, ControlSize, CoverHeroContentPosition, CoverHeroVariant, DictionaryData, DividerOrientation, DividerSize, ExpandableListButtonAlign, ExpandableListStyle, InfoRevealPosition, InputStatus, InputType, LabelPosition, ListDividerType, ListSize, ListType, NavigationTabsOrientation, NavigationTabsSize, NotificationType, OffCanvasVariant, PopoverPosition, SearchbarItem, SelectItem, SkipToContentLink, SortDirection, ThemeVariant, ToastNotification, ToastNotificationPosition, ToastNotificationTransition, TransitionDirection, VisibilityCondition, ZAriaAlertMode, ZChipType, ZDatePickerMode, ZFileUploadType, ZRangePickerMode, ZSectionTitleDividerPosition } from "./beans";
export { AlertType, LicenseType } from "./beans/index";
export { ListItem } from "./beans/index.js";
export namespace Components {
    /**
     * Accordion component.
     * @cssprop --z-accordion-highlight-color - Color of the highlight band on the summary's left edge. Only applies when `highlight` is true. Default: `transparent`.
     * @cssprop --z-accordion-bg - Background color of the summary. Default: `--color-surface02`.
     * @cssprop --z-accordion-label-color - Label color. Default: `--color-default-text`.
     * @cssprop --z-accordion-disabled-label-color - Label color when disabled. Default: `--color-text03`.
     * @cssprop --z-accordion-content-bg - Background color of the accordion. Default: `--color-surface02`.
     * @cssprop --z-accordion-content-fg - Content text color. Default: `--color-default-text`.
     * @cssprop --z-accordion-hover-color - Hover color of the summary. Default: `--color-surface03`.
     * @cssprop --z-accordion-left-padding - Left padding of the summary. Default: `--space-unit` * 2.
     * @cssprop --z-accordion-right-padding - Right padding of the summary. Default: `--space-unit`.
     * @cssprop --z-accordion-label-font-weight - Font weight of the summary label. Default: `--font-sb`.
     */
    interface ZAccordion {
        /**
          * Enable highlight band on the `summary`'s left edge.
         */
        "highlight": boolean;
        /**
          * Name of the z-icon to display before the label's text.
         */
        "icon": string;
        /**
          * Disabled state of the accordion.
         */
        "isDisabled": boolean;
        /**
          * Text label.
         */
        "label": string;
        /**
          * The open state of the accordion.
         */
        "open": boolean;
        /**
          * Enable box-shadow on the accordion. Only applies when `variant` is `BACKGROUND`.
         */
        "shadow": boolean;
        /**
          * Size of the component.
         */
        "size": ControlSize;
        /**
          * Accordion variant.
         */
        "variant": AccordionVariant;
    }
    interface ZAlert {
        /**
          * alert variant type
         */
        "type": AlertType;
    }
    /**
     * Anchor navigation component.
     * @example ```
     * <z-anchor-navigation>
     *  <div>
     *    <a href="#section-id">Section name</a>
     *    <button type="button">
     *      <z-icon name="share" />
     *    </button>
     *  </div>
     * </z-anchor-navigation>
     * ```
     */
    interface ZAnchorNavigation {
        /**
          * Enables automatic inference of the current item, listening for hash change and checking the `href` of the slotted anchors. When disabled, the highlight of current item must be handled manually by setting the `data-current` attribute to the correct slotted items and the `aria-current` attribute to the anchors.
         */
        "autoCurrent": boolean;
        /**
          * If enabled, the text of each anchor will be hidden unless for the current one or the one the user is hovering.
         */
        "hideUnselected": boolean;
    }
    /**
     * @cssprop --app-header-typography-1-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `24px`.
     * @cssprop --app-header-typography-2-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `28px`.
     * @cssprop --app-header-typography-3-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `32px`.
     * @cssprop --app-header-typography-4-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `36px`.
     * @cssprop --app-header-typography-5-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `42px`.
     * @cssprop --app-header-typography-6-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `48px`.
     * @cssprop --app-header-typography-7-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `54px`.
     * @cssprop --app-header-typography-8-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `60px`.
     * @cssprop --app-header-typography-9-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `68px`.
     * @cssprop --app-header-typography-10-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `76px`.
     * @cssprop --app-header-typography-11-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `84px`.
     * @cssprop --app-header-typography-12-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `92px`.
     * @cssprop --app-header-typography-1-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.33`.
     * @cssprop --app-header-typography-2-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.29`.
     * @cssprop --app-header-typography-3-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.25`.
     * @cssprop --app-header-typography-4-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.24`.
     * @cssprop --app-header-typography-5-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.24`.
     * @cssprop --app-header-typography-6-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.25`.
     * @cssprop --app-header-typography-7-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.2`.
     * @cssprop --app-header-typography-8-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.26`.
     * @cssprop --app-header-typography-9-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.24`.
     * @cssprop --app-header-typography-10-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.26`.
     * @cssprop --app-header-typography-11-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.2`.
     * @cssprop --app-header-typography-12-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.2`.
     * @cssprop --app-header-typography-1-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.2 / 1em)`.
     * @cssprop --app-header-typography-2-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.4 / 1em)`.
     * @cssprop --app-header-typography-3-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.6 / 1em)`.
     * @cssprop --app-header-typography-4-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.8 / 1em)`.
     * @cssprop --app-header-typography-5-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1 / 1em)`.
     * @cssprop --app-header-typography-6-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.2 / 1em)`.
     * @cssprop --app-header-typography-7-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.4 / 1em)`.
     * @cssprop --app-header-typography-8-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.6 / 1em)`.
     * @cssprop --app-header-typography-9-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.8 / 1em)`.
     * @cssprop --app-header-typography-10-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-2 / 1em)`.
     * @cssprop --app-header-typography-11-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-2.2 / 1em)`.
     * @cssprop --app-header-typography-12-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-2.4 / 1em)`.
     * @cssprop --app-header-content-max-width - Use it to set header's content max width. Useful when the project use a fixed width layout. Defaults to `100%`.
     * @cssprop --app-header-height - Defaults to `auto`.
     * @cssprop --app-header-top-offset - Top offset for the stuck header. Useful when there are other fixed elements above the header. Defaults to `48px` (the height of the main topbar).
     * @cssprop --app-header-drawer-trigger-size - The size of the drawer icon. Defaults to `--space-unit * 4`.
     * @cssprop --app-header-bg - Header background color. Defaults to `--color-surface01`.
     * @cssprop --app-header-stucked-bg - Stuck header background color. Defaults to `--color-surface01`.
     * @cssprop --app-header-text-color - Text color. Useful on `hero` variant to set text color based on the colors of the background image. Defaults to `--color-default-text`.
     * @cssprop --app-header-title-font-size - Variable to customize the title's font size.
     * NOTE: Only use one of the exported `--app-header-typography-*-size` as a value.
     * Defaults to `--app-header-typography-3-size`.
     * @cssprop --app-header-title-lineheight - Variable to customize the title's line-height.
     * NOTE: Only use one of the exported `--app-header-typography-*-lineheight` as a value and use the same level as the one of the font size.
     * Defaults to `--app-header-typography-3-lineheight`.
     * @cssprop --app-header-title-letter-spacing - Variable to customize the title's letter-spacing.
     * NOTE: Only use one of the exported `--app-header-typography-*-tracking` as a value and use the same level as the one of the font size.
     * Defaults to `--app-header-typography-3-tracking`.
     * @cssprop --app-header-stucked-text-color - Stuck header text color. Defaults to `--color-default-text`.
     */
    interface ZAppHeader {
        /**
          * The opening state of the drawer.
         */
        "drawerOpen": boolean;
        /**
          * Enable the search bar.
         */
        "enableSearch": boolean;
        /**
          * Control menu bar position in the header. - auto: the menu bar is positioned near the title - stack: the menu bar is positioned below the title - offcanvas: the menu bar is not displayed and a burger icon appears to open the offcanvas menu
         */
        "flow": "auto" | "stack" | "offcanvas";
        /**
          * Set the hero image source for the header. You can also use a [slot="hero"] node for advanced customization.
         */
        "hero": string;
        /**
          * Should place an overlay over the hero image. Useful for legibility purpose.
         */
        "overlay": boolean;
        /**
          * Url to the search page. Set this prop and `enableSearch` to show a link-button on mobile and tablet viewports, instead of the normal searchbar. The link will also appear on the sticky header.
         */
        "searchPageUrl": string;
        /**
          * Placeholder text for the search bar.
         */
        "searchPlaceholder": string;
        /**
          * Search string for the search bar.
         */
        "searchString": string;
        /**
          * Stuck mode for the header. You can programmatically set it using an IntersectionObserver.
         */
        "stuck": boolean;
    }
    interface ZAriaAlert {
        /**
          * Aria live mode
         */
        "mode": ZAriaAlertMode;
    }
    interface ZAvatar {
        /**
          * [optional] Avatar background color
         */
        "backgroundColor"?: string;
        /**
          * [optional] Avatar image
         */
        "image"?: string;
        /**
          * [optional] Avatar size
         */
        "size"?: AvatarSize;
        /**
          * [optional] Avatar text
         */
        "text"?: string;
        /**
          * [optional] Avatar text color
         */
        "textColor"?: string;
    }
    /**
     * @cssprop --z-book-card-ribbon-background-color - ribbon backgrund color
     * @cssprop --z-book-card-ribbon-shadow-color - ribbon shadow color
     * @cssprop --z-book-card-compact-width - compact card custom width
     * @cssprop --z-book-card-compact-height - compact card custom height
     */
    interface ZBookCard {
        /**
          * [optional] Authors
         */
        "authors"?: string;
        /**
          * [optional] Borderless card - compact variant only
         */
        "borderless"?: boolean;
        /**
          * Cover URL
         */
        "cover": string;
        /**
          * [optional] Fallback cover URL
         */
        "fallbackCover"?: string;
        /**
          * [optional] Main ISBN
         */
        "isbn"?: string;
        /**
          * [optional] ISBN label
         */
        "isbnLabel": string;
        /**
          * Card main title
         */
        "operaTitle": string;
        /**
          * [optional] [accessibility] Card title HTML tag
         */
        "operaTitleTag"?: string;
        /**
          * [optional] Ribbon label - expanded and search variant only
         */
        "ribbon"?: string;
        /**
          * [optional] Ribbon icon - expanded and search variant only
         */
        "ribbonIcon"?: string;
        /**
          * [optional] Ribbon interactive - expanded and search variant only
         */
        "ribbonInteractive"?: boolean;
        /**
          * Card variant: expanded, compact, search
         */
        "variant": BookCardVariant;
        /**
          * [optional] Card subtitle
         */
        "volumeTitle"?: string;
    }
    interface ZBreadcrumb {
        /**
          * [optional] Variant of first node
         */
        "homepageVariant"?: BreadcrumbHomepageVariant;
        /**
          * [optional] Sets max number of element to show
         */
        "maxNodesToShow"?: number;
        /**
          * [optional] Sets max number of row for each path inside the popover. Zero equals unlimited
         */
        "overflowMenuItemRows"?: number;
        /**
          * [optional] Sets the path style
         */
        "pathStyle"?: BreadcrumbPathStyle;
        /**
          * [optional] Controls the behaviour on <a> tag click/enter
         */
        "preventFollowUrl"?: boolean;
        /**
          * [optional] Sets the maximun number of chars per single node
         */
        "truncateChar"?: number;
    }
    interface ZButton {
        /**
          * defines a string value that labels an interactive element, used for accessibility.
         */
        "ariaLabel": string;
        /**
          * HTML button disabled attribute.
         */
        "disabled"?: boolean;
        /**
          * HTML <a> href attribute. If it is set, it renders an HTML <a> tag.
         */
        "href"?: string;
        /**
          * Identifier, should be unique.
         */
        "htmlid"?: string;
        /**
          * `z-icon` name to use (optional).
         */
        "icon"?: string;
        /**
          * HTML button name attribute.
         */
        "name"?: string;
        /**
          * defines role attribute, used for accessibility.
         */
        "role": string;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ButtonSize | ControlSize;
        /**
          * HTML a target attribute.
         */
        "target"?: string;
        /**
          * HTML button type attribute.
         */
        "type"?: ButtonType;
        /**
          * Graphical variant: `primary`, `secondary`, `tertiary`. Defaults to `primary`.
         */
        "variant"?: ButtonVariant;
    }
    interface ZButtonSort {
        /**
          * id, should be unique
         */
        "buttonid": string;
        /**
          * occurrences counter (optional)
         */
        "counter"?: number;
        /**
          * label content (descending)
         */
        "desclabel"?: string;
        /**
          * selected flag (optional)
         */
        "isselected"?: boolean;
        /**
          * label content (ascending)
         */
        "label": string;
        /**
          * sortable flag (optional)
         */
        "sortasc"?: boolean;
        /**
          * sort label content (ascending) (optional)
         */
        "sortlabelasc"?: string;
        /**
          * sort label content (descending) (optional)
         */
        "sortlabeldesc"?: string;
    }
    /**
     * ZCard component.
     * @cssprop --aspect-ratio - Cover aspect ratio. Default: `1.62`
     * @cssprop --z-card--border-color - Default: `var(--gray200)`
     * @cssprop --z-card--color-cover-background - Cover color. Default: `var(--color-surface01)`
     * @cssprop --z-card--text-background - Background color for the `text` variant. Default: `var(--color-surface01)`
     * @cssprop --z-card--text-border-radius - Default: `none`
     * @cssprop --z-card--text-border - Configure CSS `border`. Default: `none`
     * @cssprop --z-card--text-padding - Configure CSS `padding`. Default: `none`
     */
    interface ZCard {
        /**
          * Enable 'clickable' style like hover and focus style.
         */
        "clickable": boolean;
        /**
          * Name of the icon to place over the image cover
         */
        "coverIcon": string;
        /**
          * Enable shadow. Default: false.
         */
        "showShadow": boolean;
        /**
          * Card variant. Can be one of "text", "border", "shadow", "overlay". Leave it undefined for the default card.
         */
        "variant": CardVariant;
    }
    /**
     * ZCarousel component.
     * @cssprop --z-carousel-gutter - The gutter between items.
     * @cssprop --z-carousel-items-shadow - The shadow around the items.
     */
    interface ZCarousel {
        /**
          * Arrow buttons position
         */
        "arrowsPosition"?: CarouselArrowsPosition;
        /**
          * Whether the navigation arrow buttons over the items are always visible or only on mouse hover. If set to `false`, the arrows will not be visible on mobile. Only meaningful with `arrowsPosition` set to `OVER`.
         */
        "fixedArrows": boolean;
        /**
          * The height of the ghost loader (only visible when `isLoading` is set to `true`)
         */
        "ghostLoadingHeight": number;
        /**
          * When enabled, navigating next the last item will go back to the first item and vice versa.
         */
        "infinite": boolean;
        /**
          * The z-carousel is on loading state
         */
        "isLoading": boolean;
        /**
          * The z-carousel title
         */
        "label"?: string;
        /**
          * Progress indicator type. Only available for `single` mode
         */
        "progressMode"?: CarouselProgressMode;
        /**
          * Shows only one content at a time
         */
        "single": boolean;
    }
    interface ZChip {
        /**
          * z-chip aria-label string
         */
        "ariaLabel": string;
        /**
          * set z-chip as disabled
         */
        "disabled"?: boolean;
        /**
          * Non interactive icon
         */
        "icon"?: string;
        /**
          * z-chip interactive icon
         */
        "interactiveIcon"?: string;
        /**
          * z-chip size type, can be default, medium or small
         */
        "type"?: ZChipType;
    }
    interface ZCombobox {
        /**
          * check all label (optional)
         */
        "checkalltext"?: string;
        /**
          * close combobox list text
         */
        "closesearchtext"?: string;
        /**
          * the combobox is disabled
         */
        "disabled"?: boolean;
        /**
          * show "check all" checkbox (optional)
         */
        "hascheckall"?: boolean;
        /**
          * group items by category
         */
        "hasgroupitems"?: boolean;
        /**
          * show search input flag (optional)
         */
        "hassearch"?: boolean;
        /**
          * input unique id
         */
        "inputid": string;
        /**
          * fixed style flag
         */
        "isfixed": boolean;
        /**
          * toggle combo list opening flag
         */
        "isopen": boolean;
        /**
          * list items array
         */
        "items": ComboItem[] | string;
        /**
          * label text
         */
        "label": string;
        /**
          * max number of checkable items (0 = unlimited)
         */
        "maxcheckableitems": number;
        /**
          * no result text message
         */
        "noresultslabel"?: string;
        /**
          * search input label text (optional)
         */
        "searchlabel"?: string;
        /**
          * search input placeholder text (optional)
         */
        "searchplaceholder"?: string;
        /**
          * search input title text (optional)
         */
        "searchtitle"?: string;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ControlSize;
        /**
          * uncheck all label (optional)
         */
        "uncheckalltext"?: string;
    }
    /**
     * Cover hero component.
     * Component to display a hero image with content.
     * @cssprop --cover-hero-overlay - overlay color of the cover hero (CSS `background` property). **Default**: `linear-gradient(270deg, #0000 0%, #000000e6 100%)`.
     * @cssprop --cover-hero-text-color - color of the text.
     * @cssprop --cover-hero-aspect-ratio - aspect ratio to use for the image. You can pass a fraction or a number representing the ratio. **Default**: the intrinsic aspect ratio of the slotted image or `16/9`.
     */
    interface ZCoverHero {
        /**
          * Vertical content position (for `STACKED` variant).
         */
        "contentPosition": CoverHeroContentPosition;
        /**
          * Whether to keep the image aspect ratio. If set to `false`, the cssprop `--cover-hero-aspect-ratio` will not affect the component's size; instead, the height of the component follows the content's one. Note: it may be necessary to set a min and/or max height to the component.
         */
        "preserveAspectRatio": boolean;
        /**
          * Cover hero variant. Can be `OVERLAY` or `STACKED`.
         */
        "variant": CoverHeroVariant;
    }
    interface ZDatePicker {
        /**
          * z-input aria label
         */
        "ariaLabel": string;
        /**
          * unique id
         */
        "datePickerId": string;
        /**
          * z-input label
         */
        "label"?: string;
        /**
          * [Optional] datepicker mode: date, datetime, only months
         */
        "mode": ZDatePickerMode;
    }
    interface ZDivider {
        /**
          * [optional] Divider color
         */
        "color"?: string;
        /**
          * [optional] Divider orintation
         */
        "orientation"?: DividerOrientation;
        /**
          * [optional] Divider size
         */
        "size"?: DividerSize;
    }
    interface ZDragdropArea {
        /**
          * drag & drop button label
         */
        "dragAndDropLabel": string;
    }
    interface ZFile {
        /**
          * File name
         */
        "fileName": string;
        /**
          * File chip id
         */
        "fileNumber": number;
    }
    interface ZFileUpload {
        /**
          * Prop indicating the accepted file type: ex ".pdf, .doc, .jpg"
         */
        "acceptedFormat"?: string;
        /**
          * allowed file message
         */
        "allowedFilesMessage"?: string;
        /**
          * Prop indicating the button variant
         */
        "buttonVariant"?: ButtonVariant;
        /**
          * Description
         */
        "description"?: string;
        /**
          * drag & drop button label
         */
        "dragAndDropLabel"?: string;
        /**
          * error modal message
         */
        "errorModalMessage"?: string;
        /**
          * error modal title
         */
        "errorModalTitle"?: string;
        /**
          * Max file dimension in Megabyte
         */
        "fileMaxSize"?: number;
        /**
          * get array of uploaded files
         */
        "getFiles": () => Promise<File[]>;
        /**
          * uploaded files history rendering
         */
        "hasFileSection"?: boolean;
        /**
          * Title
         */
        "mainTitle"?: string;
        /**
          * remove file from the array
         */
        "removeFile": (fileName: string) => Promise<void>;
        /**
          * Prop indicating the file upload type - can be default or dragdrop
         */
        "type": ZFileUploadType;
        /**
          * upoload button label
         */
        "uploadBtnLabel"?: string;
        /**
          * upload clickable message
         */
        "uploadClickableMessage"?: string;
        /**
          * upload message
         */
        "uploadMessage"?: string;
        /**
          * loaded files label
         */
        "uploadedFilesLabel"?: string;
    }
    interface ZGhostLoading {
    }
    interface ZIcon {
        /**
          * icon fill (optional)
         */
        "fill"?: string;
        /**
          * icon height (optional)
         */
        "height"?: number;
        /**
          * icon id (optional)
         */
        "iconid"?: string;
        /**
          * icon name
         */
        "name": string;
        /**
          * icon width (optional)
         */
        "width"?: number;
    }
    interface ZInfoBox {
        /**
          * info box unique id
         */
        "boxid": string;
        /**
          * render close icon flag
         */
        "isclosable": boolean;
    }
    /**
     * Info reveal component.
     * @cssprop --z-info-reveal-panel-width - Width of the info panel.
     */
    interface ZInfoReveal {
        /**
          * Aria label of the trigger button. It will be only used when `label` prop is empty.
         */
        "ariaLabel": string;
        /**
          * Name of the icon for the trigger button
         */
        "icon"?: string;
        /**
          * Label of the trigger button.
         */
        "label"?: string;
        /**
          * The position of the z-info-reveal in the page. This helps to correctly place the info panel. The panel will grow in the opposite direction of the position. For example, with the default position `BOTTOM_RIGHT`, the panel will grow vertically upwards and horizontally to the left.
         */
        "position"?: InfoRevealPosition;
        /**
          * Size of the trigger button
         */
        "size"?: ControlSize;
    }
    interface ZInput {
        /**
          * the input aria-activedescendant (optional): available for text, password, number, email
         */
        "ariaActivedescendant"?: string;
        /**
          * the input aria-autocomplete (optional): available for text, password, number, email
         */
        "ariaAutocomplete"?: string;
        /**
          * the input aria-controls (optional): available for text, password, number, email
         */
        "ariaControls"?: string;
        /**
          * the input aria-expaded: available for text, password, number, email
         */
        "ariaExpanded": string;
        /**
          * the input aria-label
         */
        "ariaLabel": string;
        /**
          * the input has autocomplete option (optional): available for text, password, number, email
         */
        "autocomplete"?: string;
        /**
          * checked: available for checkbox, radio
         */
        "checked"?: boolean;
        /**
          * the input is disabled
         */
        "disabled"?: boolean;
        /**
          * render clear icon when typing (optional): available for text
         */
        "hasclearicon"?: boolean;
        /**
          * the id of the input element
         */
        "htmlid": string;
        /**
          * the input html title (optional)
         */
        "htmltitle"?: string;
        /**
          * render icon (optional): available for text
         */
        "icon"?: string;
        /**
          * get checked status
         */
        "isChecked": () => Promise<boolean>;
        /**
          * the input label
         */
        "label"?: string;
        /**
          * the input label position: available for checkbox, radio
         */
        "labelPosition"?: LabelPosition;
        /**
          * max number value (optional): available for number
         */
        "max"?: number;
        /**
          * Max length value (optional): available for text
         */
        "maxlength"?: number;
        /**
          * input helper message (optional): available for text, password, number, email, textarea - if set to `false` message won't be displayed
         */
        "message"?: string | boolean;
        /**
          * min number value (optional): available for number
         */
        "min"?: number;
        /**
          * Min length value (optional): available for text
         */
        "minlength"?: number;
        /**
          * the input name
         */
        "name"?: string;
        /**
          * pattern value (optional): available for tel, text, search, url, email, password
         */
        "pattern"?: string;
        /**
          * the input placeholder (optional)
         */
        "placeholder"?: string;
        /**
          * the input is readonly
         */
        "readonly"?: boolean;
        /**
          * the input is required (optional): available for text, password, number, email, textarea, checkbox
         */
        "required"?: boolean;
        /**
          * the input role
         */
        "role": string;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ControlSize;
        /**
          * the input status (optional): available for text, password, number, email, textarea
         */
        "status"?: InputStatus;
        /**
          * step number value (optional): available for number
         */
        "step"?: number;
        /**
          * input types
         */
        "type": InputType;
        /**
          * the input value
         */
        "value"?: string;
    }
    interface ZInputMessage {
        /**
          * input helper message
         */
        "message": string;
        /**
          * input status (optional)
         */
        "status"?: InputStatus;
    }
    interface ZList {
        /**
          * [optional] type of the list marker for each element
         */
        "listType"?: ListType;
        /**
          * Sets role of the element.
         */
        "role": string;
        /**
          * [optional] Sets size of inside elements.
         */
        "size"?: ListSize;
    }
    interface ZListElement {
        /**
          * [optional] Align expandable button left or right.
         */
        "alignButton"?: ExpandableListButtonAlign;
        /**
          * [optional] Sets element clickable.
         */
        "clickable"?: boolean;
        /**
          * [optional] Sets text color of the element.
         */
        "color"?: string;
        /**
          * [optional] Sets disabled style of the element.
         */
        "disabled"?: boolean;
        /**
          * [optional] Sets the divider color.
         */
        "dividerColor"?: string;
        /**
          * [optional] Sets the divider size.
         */
        "dividerSize"?: DividerSize;
        /**
          * [optional] Sets the position where to insert the divider.
         */
        "dividerType"?: ListDividerType;
        /**
          * [optional] Sets element as expandable.
         */
        "expandable"?: boolean;
        /**
          * [optional] Sets expandable style to element.
         */
        "expandableStyle"?: ExpandableListStyle;
        /**
          * set tabindex to Host tag (optional). Defaults to 0.
         */
        "htmlTabindex"?: number | null;
        /**
          * [optional] List element id.
         */
        "listElementId"?: number;
        /**
          * [optional] position of the list element inside the list or the group
         */
        "listElementPosition"?: string;
        /**
          * [optional] type of the list marker for each element
         */
        "listType"?: ListType;
        /**
          * Sets element role.
         */
        "role": string;
        /**
          * [optional] Sets size of inside elements.
         */
        "size"?: ListSize;
    }
    interface ZListGroup {
        /**
          * [optional] Sets the divider color.
         */
        "dividerColor"?: string;
        /**
          * [optional] Sets the divider size.
         */
        "dividerSize"?: DividerSize;
        /**
          * [optional] Sets the position where to insert the divider.
         */
        "dividerType"?: ListDividerType;
        /**
          * [optional] type of the list marker for each element
         */
        "listType"?: ListType;
        /**
          * [optional] Sets size of inside elements.
         */
        "size"?: ListSize;
    }
    interface ZLogo {
        /**
          * image height
         */
        "height"?: number;
        /**
          * alternative image text
         */
        "imageAlt"?: string;
        /**
          * link url (optional)
         */
        "link"?: string;
        /**
          * if true, the mobile logo is displayed, otherwise the desktop one
         */
        "mobileLogo"?: boolean;
        /**
          * link target: true means _blank, false means _self
         */
        "targetBlank"?: boolean;
        /**
          * image width
         */
        "width"?: number;
    }
    /**
     * @cssprop --z-menu-label-color - Color of the label's text.
     */
    interface ZMenu {
        /**
          * Flag to set the active status of the menu.
         */
        "active"?: boolean;
        /**
          * Flag to set the display mode of the list. If true, the list will be absolutely positioned under the menu label, stacked beneath it otherwise.
         */
        "floating"?: boolean;
        /**
          * The opening state of the menu.
         */
        "open": boolean;
        /**
          * Tells the component that it's placed in a vertical context with other `ZMenu`s (e.g. in the ZAppHeader's offcanvas). A small border is placed under it as a separator from other elements.
         */
        "verticalContext": boolean;
    }
    /**
     * A component to create submenus inside the ZMenu.
     */
    interface ZMenuSection {
        /**
          * Active state
         */
        "active"?: boolean;
    }
    interface ZModal {
        /**
          * add role "alertdialog" to dialog (optional, default is false)
         */
        "alertdialog"?: boolean;
        /**
          * if true, the modal is closable (optional, default is true)
         */
        "closable"?: boolean;
        /**
          * close modal
         */
        "close": () => Promise<void>;
        /**
          * aria-label for close button (optional)
         */
        "closeButtonLabel": string;
        /**
          * unique id
         */
        "modalid": string;
        /**
          * subtitle (optional)
         */
        "modalsubtitle"?: string;
        /**
          * title text (optional)
         */
        "modaltitle"?: string;
        /**
          * open modal
         */
        "open": () => Promise<void>;
        /**
          * if true, the modal can scroll inside, if false the viewport can scroll
         */
        "scrollInside"?: boolean;
    }
    interface ZMyzCard {
        /**
          * graphic variant (optional)
         */
        "cardtype"?: LicenseType;
        /**
          * faded status
         */
        "faded": boolean;
        /**
          * highlighted status
         */
        "ishighlighted": boolean;
        /**
          * pressed status
         */
        "ispressed": boolean;
    }
    interface ZMyzCardAlert {
        /**
          * action button text
         */
        "actiontext"?: string;
        /**
          * content text
         */
        "contenttext": string;
        /**
          * icon name
         */
        "iconname": string;
        /**
          * alert variant type
         */
        "type": string;
    }
    interface ZMyzCardBody {
    }
    interface ZMyzCardCover {
        /**
          * default error image source
         */
        "defaultimg": string;
        /**
          * faded status
         */
        "faded": boolean;
        /**
          * image source
         */
        "img": string;
        /**
          * cover alt title
         */
        "titolo": string;
    }
    interface ZMyzCardDictionary {
        /**
          * card cover
         */
        "cover": string;
        /**
          * card is disabled
         */
        "disabled": boolean;
        /**
          * flip button label
         */
        "flipbuttonlabel": string;
        /**
          * card is flipped
         */
        "flipped": boolean;
        /**
          * hide info button
         */
        "hideinfobtn": boolean;
        /**
          * card title
         */
        "name": string;
    }
    interface ZMyzCardFooter {
        /**
          * authors name text
         */
        "autori": string;
        /**
          * card graphic variant (optional)
         */
        "cardtype"?: LicenseType;
        /**
          * display footer custom slotted content
         */
        "customContent": boolean;
        /**
          * faded status
         */
        "faded": boolean;
        /**
          * volume isbn
         */
        "isbn": string;
        /**
          * footer opened by default (optional)
         */
        "opened"?: boolean;
        /**
          * volume title
         */
        "titolo": string;
    }
    interface ZMyzCardFooterSections {
    }
    interface ZMyzCardHeader {
        /**
          * card graphic variant (optional)
         */
        "cardtype"?: LicenseType;
        /**
          * faded status
         */
        "faded": boolean;
        /**
          * volume title
         */
        "titolo": string;
    }
    interface ZMyzCardIcon {
        /**
          * description of the icon
         */
        "ariaLabel": string;
        /**
          * icon name
         */
        "icon": string;
        /**
          * disabled status flag
         */
        "isdisabled": boolean;
    }
    interface ZMyzCardInfo {
        /**
          * dictionary info
         */
        "data": string | DictionaryData;
        /**
          * tabindex link attribute (optional)
         */
        "htmltabindex"?: number;
    }
    interface ZMyzCardList {
        /**
          * list data stringified array
         */
        "listdata": string;
    }
    interface ZMyzList {
        /**
          * json stringified list data (mutable, optional)
         */
        "inputrawdata"?: string;
        /**
          * list item data (mutable, optional)
         */
        "list"?: ListItem[];
    }
    interface ZMyzListItem {
        /**
          * data-action attribute (optional)
         */
        "action"?: string;
        /**
          * icon name (optional)
         */
        "icon"?: string;
        /**
          * link url (optional)
         */
        "link"?: string;
        /**
          * link target (optional)
         */
        "linktarget"?: string;
        /**
          * id (optional)
         */
        "listitemid"?: string;
        /**
          * content text
         */
        "text": string;
        /**
          * underlined style flag
         */
        "underlined": boolean;
    }
    /**
     * Navigation tabs component.
     * To select a specific tab programmatically, set the `aria-selected` attribute to `true` on the desired tab.
     * @cssprop --z-navigation-tabs-nav-buttons-bg - Navigation buttons background color.
     * @cssprop --z-navigation-tabs-nav-buttons-fg - Navigation buttons foreground color.
     */
    interface ZNavigationTabs {
        /**
          * Set `aria-label` attribute to the internal `<nav>` element with `tablist` role.
         */
        "ariaLabel": string;
        /**
          * Navigation tabs orientation.
         */
        "orientation"?: NavigationTabsOrientation;
        /**
          * Index of the selected tab. Useful to programmatically select a tab. The tab can also be selected by setting the `aria-selected` attribute to `true` on the desired tab.
         */
        "selectedTab": number;
        /**
          * Navigation tabs size.
         */
        "size"?: NavigationTabsSize;
    }
    /**
     * Notification bar component.
     * @cssprop --z-notification--top-offset - The top offset of the notification. Use it when `sticky` prop is set to `true` and you need the notification to stay under other sticky elements. Default: 0px.
     */
    interface ZNotification {
        /**
          * Action button text
         */
        "actiontext"?: string;
        /**
          * Name of the icon on the left of the content
         */
        "contenticonname"?: string;
        /**
          * Enable close icon
         */
        "showclose"?: boolean;
        /**
          * Enable shadow.
          * @deprecated shadow is available only for the `sticky` version of the notification.
         */
        "showshadow"?: boolean;
        /**
          * Enable sticky notification bar.
         */
        "sticky"?: boolean;
        /**
          * Alert variant type
         */
        "type": NotificationType;
    }
    interface ZOffcanvas {
        /**
          * Whether the offcanvas is open. Default: false
         */
        "open": boolean;
        /**
          * Whether to skip the initial animation. Useful when the initial value of the `open` prop is set to `true`.
         */
        "skipLoadAnimation": boolean;
        /**
          * open content transitioning in a specified direction left | right. Default: left
         */
        "transitiondirection"?: TransitionDirection;
        /**
          * Offcanvas variant. Can be one `overlay` or `pushcontent`. Default variant: pushcontent
         */
        "variant"?: OffCanvasVariant;
    }
    interface ZOtp {
        /**
          * Input number
         */
        "inputNum"?: number;
        /**
          * Input message
         */
        "message"?: string;
        /**
          * Input status
         */
        "status"?: InputStatus;
    }
    /**
     * Pagination bar component.
     */
    interface ZPagination {
        /**
          * Current page.
         */
        "currentPage": number;
        /**
          * Enable buttons to go to the first and last pages.
         */
        "edges": boolean;
        /**
          * Whether to show "go to page" feature.
         */
        "goToPage": boolean;
        /**
          * Pagination label placed before the bar.
         */
        "label"?: string;
        /**
          * Enable navigation arrows.
         */
        "navArrows": boolean;
        /**
          * Number of pages to skip.
         */
        "skip": number;
        /**
          * Number of pages to show left/right of the current, before showing "load more" symbol (…).
         */
        "split"?: number;
        /**
          * Total number of pages. Required.
         */
        "totalPages": number;
        /**
          * Number of pages to show at a time. If not set, all pages will be shown.
         */
        "visiblePages"?: number;
    }
    interface ZPanelElem {
        /**
          * name of slot container (optional)
         */
        "descrSlotName"?: string;
        /**
          * html element id (optional)
         */
        "elemid"?: string;
        /**
          * alternative image text (optional)
         */
        "imgalt"?: string;
        /**
          * image url source (optional)
         */
        "imgurl"?: string;
        /**
          * disabled status flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * icon link name (optional)
         */
        "linkicon"?: string;
        /**
          * link label text
         */
        "linklabel": string;
        /**
          * link target (optional)
         */
        "target"?: string;
        /**
          * link url
         */
        "url": string;
    }
    /**
     * Popover component.
     * @cssprop --z-popover-theme--surface - background color of the popover.
     * @cssprop --z-popover-theme--text - foreground color of the popover.
     * @cssprop --z-popover-padding - padding of the popover.
     * @cssprop --z-popover-shadow-filter - drop-shadow filter of the popover. Defaults to `drop-shadow(0 1px 2px var(--shadow-color-base))`.
     */
    interface ZPopover {
        /**
          * The selector or the element bound with the popover. If string css selector is provided make sure to use a valid selector.
         */
        "bindTo"?: string | HTMLElement;
        /**
          * Whether to center the popup on the main side (according to "position").
         */
        "center": boolean;
        /**
          * If true, the popover can be closed by clicking outside of it or pressing the escape key. Otherwise, it will be closed only programmatically (by setting `open` to `false`).
         */
        "closable": boolean;
        /**
          * The open state of the popover.
         */
        "open": boolean;
        /**
          * Popover position.
         */
        "position": PopoverPosition;
        /**
          * Whether to show popover's arrow.
         */
        "showArrow": boolean;
    }
    interface ZRangePicker {
        /**
          * first z-input aria label
         */
        "firstAriaLabel"?: string;
        /**
          * first z-input label
         */
        "firstLabel"?: string;
        /**
          * readonly mode
         */
        "firstPickerPlaceholder": string;
        /**
          * readonly mode
         */
        "firstPickerReadOnly": boolean;
        /**
          * readonly mode
         */
        "lastPickerPlaceholder": string;
        /**
          * readonly mode
         */
        "lastPickerReadOnly": boolean;
        /**
          * [Optional] datepicker mode: date or datetime
         */
        "mode": ZRangePickerMode;
        /**
          * unique id
         */
        "rangePickerId": string;
        /**
          * second z-input aria label
         */
        "secondAriaLabel"?: string;
        /**
          * second z-input label
         */
        "secondLabel"?: string;
    }
    /**
     * @cssprop --z-searchbar-results-height - Max height of the results container (default: 540px)
     * @cssprop --z-searchbar-tag-text-color - Color of tag's text (default --color-primary03);
     * @cssprop --z-searchbar-tag-bg - Color of tag's background (default --color-hover-primary);
     */
    interface ZSearchbar {
        /**
          * Show autocomplete results
         */
        "autocomplete"?: boolean;
        /**
          * Minimun number of characters to dispatch typing event
         */
        "autocompleteMinChars"?: number;
        /**
          * the id of the searchbar element
         */
        "htmlid": string;
        /**
          * Search input placeholder
         */
        "placeholder"?: string;
        /**
          * Prevent submit action
         */
        "preventSubmit"?: boolean;
        /**
          * Number of results shown - default all
         */
        "resultsCount"?: number;
        /**
          * Truncate results to single row
         */
        "resultsEllipsis"?: boolean;
        /**
          * Autocomplete results items
         */
        "resultsItems"?: SearchbarItem[] | string;
        /**
          * Set button icon without label
         */
        "searchButtonIconOnly"?: boolean;
        /**
          * Search helper text
         */
        "searchHelperLabel"?: string;
        /**
          * Show submit button
         */
        "showSearchButton"?: boolean;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ControlSize;
        /**
          * Sort autocomplete results items
         */
        "sortResultsItems"?: boolean;
        /**
          * Input search string
         */
        "value"?: string;
        /**
          * Graphical variant: `primary`, `secondary`, `tertiary`. Defaults to `primary`.
         */
        "variant"?: ButtonVariant;
    }
    /**
     * Section title component.
     * An optional secondary title can be put over the primary one.
     * @cssprop --z-section-title--divider-color - Color of the divider. Use a CSS prop string like `"--red500"`. Default is `"--red500"`.
     */
    interface ZSectionTitle {
        /**
          * Divider position for the primary title. This prop only works if the secondary title is not set.
         */
        "dividerPosition": ZSectionTitleDividerPosition;
        /**
          * Whether the primary title text is uppercase.
         */
        "uppercase": boolean;
    }
    interface ZSelect {
        /**
          * the input aria-label
         */
        "ariaLabel": string;
        /**
          * the input has autocomplete option
         */
        "autocomplete"?: boolean;
        /**
          * the input is disabled
         */
        "disabled"?: boolean;
        /**
          * get the input selected options
         */
        "getSelectedItem": () => Promise<SelectItem>;
        /**
          * get the input value
         */
        "getValue": () => Promise<string>;
        "hasGroupItems"?: boolean;
        /**
          * the id of the input element
         */
        "htmlid": string;
        /**
          * the input html title (optional)
         */
        "htmltitle"?: string;
        /**
          * When fixed, it occupies space and pushes down next elements.
         */
        "isfixed"?: boolean;
        /**
          * the input select options
         */
        "items": SelectItem[] | string;
        /**
          * the input label
         */
        "label"?: string;
        /**
          * input helper message (optional) - if set to `false` message won't be displayed
         */
        "message"?: string | boolean;
        /**
          * the input name
         */
        "name"?: string;
        /**
          * no result text message
         */
        "noresultslabel"?: string;
        /**
          * the input placeholder (optional)
         */
        "placeholder"?: string;
        /**
          * the input is readonly
         */
        "readonly"?: boolean;
        "resetItem"?: string;
        /**
          * set the input value
         */
        "setValue": (value: string | string[]) => Promise<void>;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ControlSize;
        /**
          * the input status (optional)
         */
        "status"?: InputStatus;
    }
    /**
     * Component short description.
     */
    interface ZSkipToContent {
        /**
          * Array to fill link into skip-content
         */
        "links": string | SkipToContentLink[];
        /**
          * Graphical variant: `dark`, `light`.
         */
        "variant"?: ThemeVariant;
    }
    interface ZSlideshow {
        /**
          * array or JSON stringified images urls
         */
        "data": string[] | string;
        /**
          * slideshow id
         */
        "slideshowid": string;
    }
    interface ZStepper {
    }
    interface ZStepperItem {
        /**
          * The checked state of the item.
         */
        "checked": boolean;
        /**
          * The disabled state of the item.
         */
        "disabled": boolean;
        /**
          * The href to navigate on click.
         */
        "href": string;
        /**
          * The number of the step item.
         */
        "index": number;
        /**
          * The pressed state of the item.
         */
        "pressed": boolean;
    }
    /**
     * ZTable component.
     * @cssprop --z-table--cells-padding - Padding of the cells.
     */
    interface ZTable {
        /**
          * Whether the table cells should show a border between them.
         */
        "bordered": boolean;
    }
    /**
     * Ztag component.
     * @cssprop --z-tag-text-color - text and icon color using tokens.
     * @cssprop --z-tag-bg - background color of the z-tag.
     */
    interface ZTag {
        /**
          * [optional] Hide the text and show it on hover
         */
        "expandable"?: boolean;
        /**
          * [optional] Tag icon
         */
        "icon"?: string;
    }
    /**
     * ZTbody component.
     */
    interface ZTbody {
    }
    /**
     * ZTd component.
     */
    interface ZTd {
        /**
          * Number of columns that the cell should span.
         */
        "colspan": number;
        /**
          * Enables the contextual menu. Can be set to "hover" or "always" to show the button only on cell hover or always. Set a nullish value to hide the menu button.
         */
        "showMenu": VisibilityCondition;
        /**
          * Whether the cell should stick.
         */
        "sticky": boolean;
    }
    /**
     * ZTFoot component.
     */
    interface ZTfoot {
        /**
          * If true, the footer will be stuck to the bottom of the table.
         */
        "sticky": boolean;
    }
    /**
     * ZTh component.
     */
    interface ZTh {
        /**
          * Number of columns that the cell should span.
         */
        "colspan": number;
        /**
          * Set popover position.
         */
        "popoverPosition": PopoverPosition;
        /**
          * Enables the contextual menu. Can be set to "hover" or "always" to show the button only on cell hover or always. Set a nullish value to hide the menu button.
         */
        "showMenu": VisibilityCondition;
        /**
          * Current sorting direction. Set `SortDirection.ASC` or `SortDirection.DESC` to show the sort icon.
         */
        "sortDirection"?: SortDirection;
        /**
          * Whether the cell should stick.
         */
        "sticky": boolean;
    }
    /**
     * ZThead component.
     */
    interface ZThead {
        /**
          * If true, the header will be stuck to the top of the table.
         */
        "sticky": boolean;
    }
    interface ZToastNotification {
        /**
          * toast notification closing timeout (ms)
         */
        "autoclose"?: number;
        /**
          * toggles closing button rendering
         */
        "closebutton": boolean;
        /**
          * toast notification draggable percentage
         */
        "draggablepercentage"?: number;
        /**
          * toast notification's title
         */
        "heading"?: string;
        /**
          * toast notification can be draggable
         */
        "isdraggable"?: boolean;
        /**
          * toast notification's message
         */
        "message": string;
        /**
          * toast notification autoclose can be paused
         */
        "pauseonfocusloss"?: boolean;
        /**
          * toast notification animation type: slide-in-left, slide-in-right, slide-in-down, slide-in-up
         */
        "transition"?: ToastNotificationTransition;
        /**
          * toast notification type: dark, light, accent, error, success, warning
         */
        "type"?: ToastNotification;
    }
    interface ZToastNotificationList {
        /**
          * Set the entry position of new notification in the list
         */
        "newestontop"?: boolean;
        /**
          * Set the position of toast notification list - top-left, top-centre, top-right, bottom-left, bottom-centre, bottom-right
         */
        "position": ToastNotificationPosition;
    }
    interface ZToggleButton {
        /**
          * aria-label for the button
         */
        "ariaLabel": string;
        /**
          * avoidclick status flag
         */
        "avoidclick": boolean;
        /**
          * disabled status flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * label text
         */
        "label": string;
        /**
          * open by default (optional)
         */
        "opened"?: boolean;
    }
    interface ZToggleSwitch {
        /**
          * Checked state
         */
        "checked"?: boolean;
        /**
          * Disabled flag
         */
        "disabled"?: boolean;
        /**
          * HTML id attribute to set to the internal checkbox
         */
        "htmlid": string;
        /**
          * Label position
         */
        "labelPosition"?: LabelPosition;
    }
    /**
     * Tooltip component.
     * It is basically a wrapper for the `<z-popover>` component with custom configuration.
     * @cssprop --z-tooltip-theme--surface - background color of the popover.
     * @cssprop --z-tooltip-theme--text - foreground color of the popover.
     * @cssprop --z-tooltip-shadow-filter - drop-shadow filter of the popover.
     */
    interface ZTooltip {
        /**
          * The selector or the element bound with the tooltip.
         */
        "bindTo"?: string | HTMLElement;
        /**
          * Reflects `closable` prop of the popover. "If true, the popover can be closed by clicking outside of it or pressing the escape key. Otherwise, it will be closed only programmatically (by setting `open` to `false`)."
         */
        "closable": boolean;
        /**
          * Enable tooltip dark mode.
         */
        "dark": boolean;
        /**
          * The open state of the tooltip.
         */
        "open": boolean;
        /**
          * Tooltip position.
         */
        "position": PopoverPosition;
    }
    /**
     * ZTr component.
     * When the row is `expandable`, you can set the `prevent-expand` css class on an interactive element inside the row
     * to prevent the row from expanding.
     */
    interface ZTr {
        /**
          * Whether the row is expandable. Use a `z-td` as the last cell of the row for the additional content. It will show a button to expand/collapse the row. The last cell will be hidden until the button or row is clicked.  If some element inside the expandable row contains the `prevent-expand` css class, the row will not expand by clicking that element.
         */
        "expandable": boolean;
    }
    interface ZVisuallyHidden {
    }
}
export interface ZAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZAccordionElement;
}
export interface ZAppHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZAppHeaderElement;
}
export interface ZBookCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZBookCardElement;
}
export interface ZBreadcrumbCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZBreadcrumbElement;
}
export interface ZButtonSortCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZButtonSortElement;
}
export interface ZCarouselCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZCarouselElement;
}
export interface ZChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZChipElement;
}
export interface ZComboboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZComboboxElement;
}
export interface ZDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZDatePickerElement;
}
export interface ZDragdropAreaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZDragdropAreaElement;
}
export interface ZFileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZFileElement;
}
export interface ZFileUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZFileUploadElement;
}
export interface ZInfoBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZInfoBoxElement;
}
export interface ZInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZInputElement;
}
export interface ZListElementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZListElementElement;
}
export interface ZMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZMenuElement;
}
export interface ZMenuSectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZMenuSectionElement;
}
export interface ZModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZModalElement;
}
export interface ZMyzCardAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZMyzCardAlertElement;
}
export interface ZMyzCardDictionaryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZMyzCardDictionaryElement;
}
export interface ZMyzCardInfoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZMyzCardInfoElement;
}
export interface ZMyzListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZMyzListItemElement;
}
export interface ZNavigationTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZNavigationTabsElement;
}
export interface ZNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZNotificationElement;
}
export interface ZOffcanvasCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZOffcanvasElement;
}
export interface ZOtpCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZOtpElement;
}
export interface ZPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZPaginationElement;
}
export interface ZPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZPopoverElement;
}
export interface ZRangePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZRangePickerElement;
}
export interface ZSearchbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZSearchbarElement;
}
export interface ZSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZSelectElement;
}
export interface ZTdCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZTdElement;
}
export interface ZThCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZThElement;
}
export interface ZToastNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZToastNotificationElement;
}
export interface ZToggleButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZToggleButtonElement;
}
export interface ZToggleSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZToggleSwitchElement;
}
export interface ZTrCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZTrElement;
}
declare global {
    interface HTMLZAccordionElementEventMap {
        "toggled": boolean;
    }
    /**
     * Accordion component.
     * @cssprop --z-accordion-highlight-color - Color of the highlight band on the summary's left edge. Only applies when `highlight` is true. Default: `transparent`.
     * @cssprop --z-accordion-bg - Background color of the summary. Default: `--color-surface02`.
     * @cssprop --z-accordion-label-color - Label color. Default: `--color-default-text`.
     * @cssprop --z-accordion-disabled-label-color - Label color when disabled. Default: `--color-text03`.
     * @cssprop --z-accordion-content-bg - Background color of the accordion. Default: `--color-surface02`.
     * @cssprop --z-accordion-content-fg - Content text color. Default: `--color-default-text`.
     * @cssprop --z-accordion-hover-color - Hover color of the summary. Default: `--color-surface03`.
     * @cssprop --z-accordion-left-padding - Left padding of the summary. Default: `--space-unit` * 2.
     * @cssprop --z-accordion-right-padding - Right padding of the summary. Default: `--space-unit`.
     * @cssprop --z-accordion-label-font-weight - Font weight of the summary label. Default: `--font-sb`.
     */
    interface HTMLZAccordionElement extends Components.ZAccordion, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZAccordionElementEventMap>(type: K, listener: (this: HTMLZAccordionElement, ev: ZAccordionCustomEvent<HTMLZAccordionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZAccordionElementEventMap>(type: K, listener: (this: HTMLZAccordionElement, ev: ZAccordionCustomEvent<HTMLZAccordionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZAccordionElement: {
        prototype: HTMLZAccordionElement;
        new (): HTMLZAccordionElement;
    };
    interface HTMLZAlertElement extends Components.ZAlert, HTMLStencilElement {
    }
    var HTMLZAlertElement: {
        prototype: HTMLZAlertElement;
        new (): HTMLZAlertElement;
    };
    /**
     * Anchor navigation component.
     * @example ```
     * <z-anchor-navigation>
     *  <div>
     *    <a href="#section-id">Section name</a>
     *    <button type="button">
     *      <z-icon name="share" />
     *    </button>
     *  </div>
     * </z-anchor-navigation>
     * ```
     */
    interface HTMLZAnchorNavigationElement extends Components.ZAnchorNavigation, HTMLStencilElement {
    }
    var HTMLZAnchorNavigationElement: {
        prototype: HTMLZAnchorNavigationElement;
        new (): HTMLZAnchorNavigationElement;
    };
    interface HTMLZAppHeaderElementEventMap {
        "sticking": any;
    }
    /**
     * @cssprop --app-header-typography-1-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `24px`.
     * @cssprop --app-header-typography-2-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `28px`.
     * @cssprop --app-header-typography-3-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `32px`.
     * @cssprop --app-header-typography-4-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `36px`.
     * @cssprop --app-header-typography-5-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `42px`.
     * @cssprop --app-header-typography-6-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `48px`.
     * @cssprop --app-header-typography-7-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `54px`.
     * @cssprop --app-header-typography-8-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `60px`.
     * @cssprop --app-header-typography-9-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `68px`.
     * @cssprop --app-header-typography-10-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `76px`.
     * @cssprop --app-header-typography-11-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `84px`.
     * @cssprop --app-header-typography-12-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `92px`.
     * @cssprop --app-header-typography-1-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.33`.
     * @cssprop --app-header-typography-2-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.29`.
     * @cssprop --app-header-typography-3-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.25`.
     * @cssprop --app-header-typography-4-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.24`.
     * @cssprop --app-header-typography-5-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.24`.
     * @cssprop --app-header-typography-6-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.25`.
     * @cssprop --app-header-typography-7-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.2`.
     * @cssprop --app-header-typography-8-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.26`.
     * @cssprop --app-header-typography-9-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.24`.
     * @cssprop --app-header-typography-10-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.26`.
     * @cssprop --app-header-typography-11-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.2`.
     * @cssprop --app-header-typography-12-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.2`.
     * @cssprop --app-header-typography-1-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.2 / 1em)`.
     * @cssprop --app-header-typography-2-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.4 / 1em)`.
     * @cssprop --app-header-typography-3-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.6 / 1em)`.
     * @cssprop --app-header-typography-4-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.8 / 1em)`.
     * @cssprop --app-header-typography-5-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1 / 1em)`.
     * @cssprop --app-header-typography-6-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.2 / 1em)`.
     * @cssprop --app-header-typography-7-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.4 / 1em)`.
     * @cssprop --app-header-typography-8-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.6 / 1em)`.
     * @cssprop --app-header-typography-9-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.8 / 1em)`.
     * @cssprop --app-header-typography-10-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-2 / 1em)`.
     * @cssprop --app-header-typography-11-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-2.2 / 1em)`.
     * @cssprop --app-header-typography-12-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-2.4 / 1em)`.
     * @cssprop --app-header-content-max-width - Use it to set header's content max width. Useful when the project use a fixed width layout. Defaults to `100%`.
     * @cssprop --app-header-height - Defaults to `auto`.
     * @cssprop --app-header-top-offset - Top offset for the stuck header. Useful when there are other fixed elements above the header. Defaults to `48px` (the height of the main topbar).
     * @cssprop --app-header-drawer-trigger-size - The size of the drawer icon. Defaults to `--space-unit * 4`.
     * @cssprop --app-header-bg - Header background color. Defaults to `--color-surface01`.
     * @cssprop --app-header-stucked-bg - Stuck header background color. Defaults to `--color-surface01`.
     * @cssprop --app-header-text-color - Text color. Useful on `hero` variant to set text color based on the colors of the background image. Defaults to `--color-default-text`.
     * @cssprop --app-header-title-font-size - Variable to customize the title's font size.
     * NOTE: Only use one of the exported `--app-header-typography-*-size` as a value.
     * Defaults to `--app-header-typography-3-size`.
     * @cssprop --app-header-title-lineheight - Variable to customize the title's line-height.
     * NOTE: Only use one of the exported `--app-header-typography-*-lineheight` as a value and use the same level as the one of the font size.
     * Defaults to `--app-header-typography-3-lineheight`.
     * @cssprop --app-header-title-letter-spacing - Variable to customize the title's letter-spacing.
     * NOTE: Only use one of the exported `--app-header-typography-*-tracking` as a value and use the same level as the one of the font size.
     * Defaults to `--app-header-typography-3-tracking`.
     * @cssprop --app-header-stucked-text-color - Stuck header text color. Defaults to `--color-default-text`.
     */
    interface HTMLZAppHeaderElement extends Components.ZAppHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZAppHeaderElementEventMap>(type: K, listener: (this: HTMLZAppHeaderElement, ev: ZAppHeaderCustomEvent<HTMLZAppHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZAppHeaderElementEventMap>(type: K, listener: (this: HTMLZAppHeaderElement, ev: ZAppHeaderCustomEvent<HTMLZAppHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZAppHeaderElement: {
        prototype: HTMLZAppHeaderElement;
        new (): HTMLZAppHeaderElement;
    };
    interface HTMLZAriaAlertElement extends Components.ZAriaAlert, HTMLStencilElement {
    }
    var HTMLZAriaAlertElement: {
        prototype: HTMLZAriaAlertElement;
        new (): HTMLZAriaAlertElement;
    };
    interface HTMLZAvatarElement extends Components.ZAvatar, HTMLStencilElement {
    }
    var HTMLZAvatarElement: {
        prototype: HTMLZAvatarElement;
        new (): HTMLZAvatarElement;
    };
    interface HTMLZBookCardElementEventMap {
        "ribbonClick": any;
    }
    /**
     * @cssprop --z-book-card-ribbon-background-color - ribbon backgrund color
     * @cssprop --z-book-card-ribbon-shadow-color - ribbon shadow color
     * @cssprop --z-book-card-compact-width - compact card custom width
     * @cssprop --z-book-card-compact-height - compact card custom height
     */
    interface HTMLZBookCardElement extends Components.ZBookCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZBookCardElementEventMap>(type: K, listener: (this: HTMLZBookCardElement, ev: ZBookCardCustomEvent<HTMLZBookCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZBookCardElementEventMap>(type: K, listener: (this: HTMLZBookCardElement, ev: ZBookCardCustomEvent<HTMLZBookCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZBookCardElement: {
        prototype: HTMLZBookCardElement;
        new (): HTMLZBookCardElement;
    };
    interface HTMLZBreadcrumbElementEventMap {
        "clickOnNode": BreadcrumbPath["path"];
    }
    interface HTMLZBreadcrumbElement extends Components.ZBreadcrumb, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZBreadcrumbElementEventMap>(type: K, listener: (this: HTMLZBreadcrumbElement, ev: ZBreadcrumbCustomEvent<HTMLZBreadcrumbElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZBreadcrumbElementEventMap>(type: K, listener: (this: HTMLZBreadcrumbElement, ev: ZBreadcrumbCustomEvent<HTMLZBreadcrumbElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZBreadcrumbElement: {
        prototype: HTMLZBreadcrumbElement;
        new (): HTMLZBreadcrumbElement;
    };
    interface HTMLZButtonElement extends Components.ZButton, HTMLStencilElement {
    }
    var HTMLZButtonElement: {
        prototype: HTMLZButtonElement;
        new (): HTMLZButtonElement;
    };
    interface HTMLZButtonSortElementEventMap {
        "buttonSortClick": any;
    }
    interface HTMLZButtonSortElement extends Components.ZButtonSort, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZButtonSortElementEventMap>(type: K, listener: (this: HTMLZButtonSortElement, ev: ZButtonSortCustomEvent<HTMLZButtonSortElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZButtonSortElementEventMap>(type: K, listener: (this: HTMLZButtonSortElement, ev: ZButtonSortCustomEvent<HTMLZButtonSortElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZButtonSortElement: {
        prototype: HTMLZButtonSortElement;
        new (): HTMLZButtonSortElement;
    };
    /**
     * ZCard component.
     * @cssprop --aspect-ratio - Cover aspect ratio. Default: `1.62`
     * @cssprop --z-card--border-color - Default: `var(--gray200)`
     * @cssprop --z-card--color-cover-background - Cover color. Default: `var(--color-surface01)`
     * @cssprop --z-card--text-background - Background color for the `text` variant. Default: `var(--color-surface01)`
     * @cssprop --z-card--text-border-radius - Default: `none`
     * @cssprop --z-card--text-border - Configure CSS `border`. Default: `none`
     * @cssprop --z-card--text-padding - Configure CSS `padding`. Default: `none`
     */
    interface HTMLZCardElement extends Components.ZCard, HTMLStencilElement {
    }
    var HTMLZCardElement: {
        prototype: HTMLZCardElement;
        new (): HTMLZCardElement;
    };
    interface HTMLZCarouselElementEventMap {
        "indexChange": {currentItem: number};
    }
    /**
     * ZCarousel component.
     * @cssprop --z-carousel-gutter - The gutter between items.
     * @cssprop --z-carousel-items-shadow - The shadow around the items.
     */
    interface HTMLZCarouselElement extends Components.ZCarousel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZCarouselElementEventMap>(type: K, listener: (this: HTMLZCarouselElement, ev: ZCarouselCustomEvent<HTMLZCarouselElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZCarouselElementEventMap>(type: K, listener: (this: HTMLZCarouselElement, ev: ZCarouselCustomEvent<HTMLZCarouselElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZCarouselElement: {
        prototype: HTMLZCarouselElement;
        new (): HTMLZCarouselElement;
    };
    interface HTMLZChipElementEventMap {
        "interactiveIconClick": any;
    }
    interface HTMLZChipElement extends Components.ZChip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZChipElementEventMap>(type: K, listener: (this: HTMLZChipElement, ev: ZChipCustomEvent<HTMLZChipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZChipElementEventMap>(type: K, listener: (this: HTMLZChipElement, ev: ZChipCustomEvent<HTMLZChipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZChipElement: {
        prototype: HTMLZChipElement;
        new (): HTMLZChipElement;
    };
    interface HTMLZComboboxElementEventMap {
        "comboboxChange": any;
    }
    interface HTMLZComboboxElement extends Components.ZCombobox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZComboboxElementEventMap>(type: K, listener: (this: HTMLZComboboxElement, ev: ZComboboxCustomEvent<HTMLZComboboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZComboboxElementEventMap>(type: K, listener: (this: HTMLZComboboxElement, ev: ZComboboxCustomEvent<HTMLZComboboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZComboboxElement: {
        prototype: HTMLZComboboxElement;
        new (): HTMLZComboboxElement;
    };
    /**
     * Cover hero component.
     * Component to display a hero image with content.
     * @cssprop --cover-hero-overlay - overlay color of the cover hero (CSS `background` property). **Default**: `linear-gradient(270deg, #0000 0%, #000000e6 100%)`.
     * @cssprop --cover-hero-text-color - color of the text.
     * @cssprop --cover-hero-aspect-ratio - aspect ratio to use for the image. You can pass a fraction or a number representing the ratio. **Default**: the intrinsic aspect ratio of the slotted image or `16/9`.
     */
    interface HTMLZCoverHeroElement extends Components.ZCoverHero, HTMLStencilElement {
    }
    var HTMLZCoverHeroElement: {
        prototype: HTMLZCoverHeroElement;
        new (): HTMLZCoverHeroElement;
    };
    interface HTMLZDatePickerElementEventMap {
        "dateSelect": any;
    }
    interface HTMLZDatePickerElement extends Components.ZDatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZDatePickerElementEventMap>(type: K, listener: (this: HTMLZDatePickerElement, ev: ZDatePickerCustomEvent<HTMLZDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZDatePickerElementEventMap>(type: K, listener: (this: HTMLZDatePickerElement, ev: ZDatePickerCustomEvent<HTMLZDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZDatePickerElement: {
        prototype: HTMLZDatePickerElement;
        new (): HTMLZDatePickerElement;
    };
    interface HTMLZDividerElement extends Components.ZDivider, HTMLStencilElement {
    }
    var HTMLZDividerElement: {
        prototype: HTMLZDividerElement;
        new (): HTMLZDividerElement;
    };
    interface HTMLZDragdropAreaElementEventMap {
        "fileDropped": any;
    }
    interface HTMLZDragdropAreaElement extends Components.ZDragdropArea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZDragdropAreaElementEventMap>(type: K, listener: (this: HTMLZDragdropAreaElement, ev: ZDragdropAreaCustomEvent<HTMLZDragdropAreaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZDragdropAreaElementEventMap>(type: K, listener: (this: HTMLZDragdropAreaElement, ev: ZDragdropAreaCustomEvent<HTMLZDragdropAreaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZDragdropAreaElement: {
        prototype: HTMLZDragdropAreaElement;
        new (): HTMLZDragdropAreaElement;
    };
    interface HTMLZFileElementEventMap {
        "removeFile": any;
    }
    interface HTMLZFileElement extends Components.ZFile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZFileElementEventMap>(type: K, listener: (this: HTMLZFileElement, ev: ZFileCustomEvent<HTMLZFileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZFileElementEventMap>(type: K, listener: (this: HTMLZFileElement, ev: ZFileCustomEvent<HTMLZFileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZFileElement: {
        prototype: HTMLZFileElement;
        new (): HTMLZFileElement;
    };
    interface HTMLZFileUploadElementEventMap {
        "fileInput": any;
    }
    interface HTMLZFileUploadElement extends Components.ZFileUpload, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZFileUploadElementEventMap>(type: K, listener: (this: HTMLZFileUploadElement, ev: ZFileUploadCustomEvent<HTMLZFileUploadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZFileUploadElementEventMap>(type: K, listener: (this: HTMLZFileUploadElement, ev: ZFileUploadCustomEvent<HTMLZFileUploadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZFileUploadElement: {
        prototype: HTMLZFileUploadElement;
        new (): HTMLZFileUploadElement;
    };
    interface HTMLZGhostLoadingElement extends Components.ZGhostLoading, HTMLStencilElement {
    }
    var HTMLZGhostLoadingElement: {
        prototype: HTMLZGhostLoadingElement;
        new (): HTMLZGhostLoadingElement;
    };
    interface HTMLZIconElement extends Components.ZIcon, HTMLStencilElement {
    }
    var HTMLZIconElement: {
        prototype: HTMLZIconElement;
        new (): HTMLZIconElement;
    };
    interface HTMLZInfoBoxElementEventMap {
        "infoBoxClose": any;
    }
    interface HTMLZInfoBoxElement extends Components.ZInfoBox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZInfoBoxElementEventMap>(type: K, listener: (this: HTMLZInfoBoxElement, ev: ZInfoBoxCustomEvent<HTMLZInfoBoxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZInfoBoxElementEventMap>(type: K, listener: (this: HTMLZInfoBoxElement, ev: ZInfoBoxCustomEvent<HTMLZInfoBoxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZInfoBoxElement: {
        prototype: HTMLZInfoBoxElement;
        new (): HTMLZInfoBoxElement;
    };
    /**
     * Info reveal component.
     * @cssprop --z-info-reveal-panel-width - Width of the info panel.
     */
    interface HTMLZInfoRevealElement extends Components.ZInfoReveal, HTMLStencilElement {
    }
    var HTMLZInfoRevealElement: {
        prototype: HTMLZInfoRevealElement;
        new (): HTMLZInfoRevealElement;
    };
    interface HTMLZInputElementEventMap {
        "inputChange": any;
        "startTyping": any;
        "stopTyping": any;
        "inputCheck": any;
        "inputFocus": any;
        "inputBlur": any;
    }
    interface HTMLZInputElement extends Components.ZInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZInputElementEventMap>(type: K, listener: (this: HTMLZInputElement, ev: ZInputCustomEvent<HTMLZInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZInputElementEventMap>(type: K, listener: (this: HTMLZInputElement, ev: ZInputCustomEvent<HTMLZInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZInputElement: {
        prototype: HTMLZInputElement;
        new (): HTMLZInputElement;
    };
    interface HTMLZInputMessageElement extends Components.ZInputMessage, HTMLStencilElement {
    }
    var HTMLZInputMessageElement: {
        prototype: HTMLZInputMessageElement;
        new (): HTMLZInputMessageElement;
    };
    interface HTMLZListElement extends Components.ZList, HTMLStencilElement {
    }
    var HTMLZListElement: {
        prototype: HTMLZListElement;
        new (): HTMLZListElement;
    };
    interface HTMLZListElementElementEventMap {
        "accessibleFocus": number;
        "ariaDescendantFocus": number;
        "clickItem": any;
    }
    interface HTMLZListElementElement extends Components.ZListElement, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZListElementElementEventMap>(type: K, listener: (this: HTMLZListElementElement, ev: ZListElementCustomEvent<HTMLZListElementElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZListElementElementEventMap>(type: K, listener: (this: HTMLZListElementElement, ev: ZListElementCustomEvent<HTMLZListElementElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZListElementElement: {
        prototype: HTMLZListElementElement;
        new (): HTMLZListElementElement;
    };
    interface HTMLZListGroupElement extends Components.ZListGroup, HTMLStencilElement {
    }
    var HTMLZListGroupElement: {
        prototype: HTMLZListGroupElement;
        new (): HTMLZListGroupElement;
    };
    interface HTMLZLogoElement extends Components.ZLogo, HTMLStencilElement {
    }
    var HTMLZLogoElement: {
        prototype: HTMLZLogoElement;
        new (): HTMLZLogoElement;
    };
    interface HTMLZMenuElementEventMap {
        "opened": any;
        "closed": any;
    }
    /**
     * @cssprop --z-menu-label-color - Color of the label's text.
     */
    interface HTMLZMenuElement extends Components.ZMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZMenuElementEventMap>(type: K, listener: (this: HTMLZMenuElement, ev: ZMenuCustomEvent<HTMLZMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZMenuElementEventMap>(type: K, listener: (this: HTMLZMenuElement, ev: ZMenuCustomEvent<HTMLZMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZMenuElement: {
        prototype: HTMLZMenuElement;
        new (): HTMLZMenuElement;
    };
    interface HTMLZMenuSectionElementEventMap {
        "opened": any;
        "closed": any;
    }
    /**
     * A component to create submenus inside the ZMenu.
     */
    interface HTMLZMenuSectionElement extends Components.ZMenuSection, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZMenuSectionElementEventMap>(type: K, listener: (this: HTMLZMenuSectionElement, ev: ZMenuSectionCustomEvent<HTMLZMenuSectionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZMenuSectionElementEventMap>(type: K, listener: (this: HTMLZMenuSectionElement, ev: ZMenuSectionCustomEvent<HTMLZMenuSectionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZMenuSectionElement: {
        prototype: HTMLZMenuSectionElement;
        new (): HTMLZMenuSectionElement;
    };
    interface HTMLZModalElementEventMap {
        "modalClose": any;
        "modalHeaderActive": any;
        "modalBackgroundClick": any;
    }
    interface HTMLZModalElement extends Components.ZModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZModalElementEventMap>(type: K, listener: (this: HTMLZModalElement, ev: ZModalCustomEvent<HTMLZModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZModalElementEventMap>(type: K, listener: (this: HTMLZModalElement, ev: ZModalCustomEvent<HTMLZModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZModalElement: {
        prototype: HTMLZModalElement;
        new (): HTMLZModalElement;
    };
    interface HTMLZMyzCardElement extends Components.ZMyzCard, HTMLStencilElement {
    }
    var HTMLZMyzCardElement: {
        prototype: HTMLZMyzCardElement;
        new (): HTMLZMyzCardElement;
    };
    interface HTMLZMyzCardAlertElementEventMap {
        "undoAction": any;
    }
    interface HTMLZMyzCardAlertElement extends Components.ZMyzCardAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZMyzCardAlertElementEventMap>(type: K, listener: (this: HTMLZMyzCardAlertElement, ev: ZMyzCardAlertCustomEvent<HTMLZMyzCardAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZMyzCardAlertElementEventMap>(type: K, listener: (this: HTMLZMyzCardAlertElement, ev: ZMyzCardAlertCustomEvent<HTMLZMyzCardAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZMyzCardAlertElement: {
        prototype: HTMLZMyzCardAlertElement;
        new (): HTMLZMyzCardAlertElement;
    };
    interface HTMLZMyzCardBodyElement extends Components.ZMyzCardBody, HTMLStencilElement {
    }
    var HTMLZMyzCardBodyElement: {
        prototype: HTMLZMyzCardBodyElement;
        new (): HTMLZMyzCardBodyElement;
    };
    interface HTMLZMyzCardCoverElement extends Components.ZMyzCardCover, HTMLStencilElement {
    }
    var HTMLZMyzCardCoverElement: {
        prototype: HTMLZMyzCardCoverElement;
        new (): HTMLZMyzCardCoverElement;
    };
    interface HTMLZMyzCardDictionaryElementEventMap {
        "cardFlipped": any;
    }
    interface HTMLZMyzCardDictionaryElement extends Components.ZMyzCardDictionary, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZMyzCardDictionaryElementEventMap>(type: K, listener: (this: HTMLZMyzCardDictionaryElement, ev: ZMyzCardDictionaryCustomEvent<HTMLZMyzCardDictionaryElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZMyzCardDictionaryElementEventMap>(type: K, listener: (this: HTMLZMyzCardDictionaryElement, ev: ZMyzCardDictionaryCustomEvent<HTMLZMyzCardDictionaryElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZMyzCardDictionaryElement: {
        prototype: HTMLZMyzCardDictionaryElement;
        new (): HTMLZMyzCardDictionaryElement;
    };
    interface HTMLZMyzCardFooterElement extends Components.ZMyzCardFooter, HTMLStencilElement {
    }
    var HTMLZMyzCardFooterElement: {
        prototype: HTMLZMyzCardFooterElement;
        new (): HTMLZMyzCardFooterElement;
    };
    interface HTMLZMyzCardFooterSectionsElement extends Components.ZMyzCardFooterSections, HTMLStencilElement {
    }
    var HTMLZMyzCardFooterSectionsElement: {
        prototype: HTMLZMyzCardFooterSectionsElement;
        new (): HTMLZMyzCardFooterSectionsElement;
    };
    interface HTMLZMyzCardHeaderElement extends Components.ZMyzCardHeader, HTMLStencilElement {
    }
    var HTMLZMyzCardHeaderElement: {
        prototype: HTMLZMyzCardHeaderElement;
        new (): HTMLZMyzCardHeaderElement;
    };
    interface HTMLZMyzCardIconElement extends Components.ZMyzCardIcon, HTMLStencilElement {
    }
    var HTMLZMyzCardIconElement: {
        prototype: HTMLZMyzCardIconElement;
        new (): HTMLZMyzCardIconElement;
    };
    interface HTMLZMyzCardInfoElementEventMap {
        "flipCard": any;
    }
    interface HTMLZMyzCardInfoElement extends Components.ZMyzCardInfo, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZMyzCardInfoElementEventMap>(type: K, listener: (this: HTMLZMyzCardInfoElement, ev: ZMyzCardInfoCustomEvent<HTMLZMyzCardInfoElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZMyzCardInfoElementEventMap>(type: K, listener: (this: HTMLZMyzCardInfoElement, ev: ZMyzCardInfoCustomEvent<HTMLZMyzCardInfoElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZMyzCardInfoElement: {
        prototype: HTMLZMyzCardInfoElement;
        new (): HTMLZMyzCardInfoElement;
    };
    interface HTMLZMyzCardListElement extends Components.ZMyzCardList, HTMLStencilElement {
    }
    var HTMLZMyzCardListElement: {
        prototype: HTMLZMyzCardListElement;
        new (): HTMLZMyzCardListElement;
    };
    interface HTMLZMyzListElement extends Components.ZMyzList, HTMLStencilElement {
    }
    var HTMLZMyzListElement: {
        prototype: HTMLZMyzListElement;
        new (): HTMLZMyzListElement;
    };
    interface HTMLZMyzListItemElementEventMap {
        "zListItemLinkClick": any;
        "zListItemClick": any;
    }
    interface HTMLZMyzListItemElement extends Components.ZMyzListItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZMyzListItemElementEventMap>(type: K, listener: (this: HTMLZMyzListItemElement, ev: ZMyzListItemCustomEvent<HTMLZMyzListItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZMyzListItemElementEventMap>(type: K, listener: (this: HTMLZMyzListItemElement, ev: ZMyzListItemCustomEvent<HTMLZMyzListItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZMyzListItemElement: {
        prototype: HTMLZMyzListItemElement;
        new (): HTMLZMyzListItemElement;
    };
    interface HTMLZNavigationTabsElementEventMap {
        "selected": number;
    }
    /**
     * Navigation tabs component.
     * To select a specific tab programmatically, set the `aria-selected` attribute to `true` on the desired tab.
     * @cssprop --z-navigation-tabs-nav-buttons-bg - Navigation buttons background color.
     * @cssprop --z-navigation-tabs-nav-buttons-fg - Navigation buttons foreground color.
     */
    interface HTMLZNavigationTabsElement extends Components.ZNavigationTabs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZNavigationTabsElementEventMap>(type: K, listener: (this: HTMLZNavigationTabsElement, ev: ZNavigationTabsCustomEvent<HTMLZNavigationTabsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZNavigationTabsElementEventMap>(type: K, listener: (this: HTMLZNavigationTabsElement, ev: ZNavigationTabsCustomEvent<HTMLZNavigationTabsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZNavigationTabsElement: {
        prototype: HTMLZNavigationTabsElement;
        new (): HTMLZNavigationTabsElement;
    };
    interface HTMLZNotificationElementEventMap {
        "notificationAction": any;
        "notificationClose": any;
    }
    /**
     * Notification bar component.
     * @cssprop --z-notification--top-offset - The top offset of the notification. Use it when `sticky` prop is set to `true` and you need the notification to stay under other sticky elements. Default: 0px.
     */
    interface HTMLZNotificationElement extends Components.ZNotification, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZNotificationElementEventMap>(type: K, listener: (this: HTMLZNotificationElement, ev: ZNotificationCustomEvent<HTMLZNotificationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZNotificationElementEventMap>(type: K, listener: (this: HTMLZNotificationElement, ev: ZNotificationCustomEvent<HTMLZNotificationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZNotificationElement: {
        prototype: HTMLZNotificationElement;
        new (): HTMLZNotificationElement;
    };
    interface HTMLZOffcanvasElementEventMap {
        "canvasOpenStatusChanged": any;
    }
    interface HTMLZOffcanvasElement extends Components.ZOffcanvas, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZOffcanvasElementEventMap>(type: K, listener: (this: HTMLZOffcanvasElement, ev: ZOffcanvasCustomEvent<HTMLZOffcanvasElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZOffcanvasElementEventMap>(type: K, listener: (this: HTMLZOffcanvasElement, ev: ZOffcanvasCustomEvent<HTMLZOffcanvasElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZOffcanvasElement: {
        prototype: HTMLZOffcanvasElement;
        new (): HTMLZOffcanvasElement;
    };
    interface HTMLZOtpElementEventMap {
        "otpChange": any;
    }
    interface HTMLZOtpElement extends Components.ZOtp, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZOtpElementEventMap>(type: K, listener: (this: HTMLZOtpElement, ev: ZOtpCustomEvent<HTMLZOtpElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZOtpElementEventMap>(type: K, listener: (this: HTMLZOtpElement, ev: ZOtpCustomEvent<HTMLZOtpElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZOtpElement: {
        prototype: HTMLZOtpElement;
        new (): HTMLZOtpElement;
    };
    interface HTMLZPaginationElementEventMap {
        "pageChanged": any;
    }
    /**
     * Pagination bar component.
     */
    interface HTMLZPaginationElement extends Components.ZPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZPaginationElementEventMap>(type: K, listener: (this: HTMLZPaginationElement, ev: ZPaginationCustomEvent<HTMLZPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZPaginationElementEventMap>(type: K, listener: (this: HTMLZPaginationElement, ev: ZPaginationCustomEvent<HTMLZPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZPaginationElement: {
        prototype: HTMLZPaginationElement;
        new (): HTMLZPaginationElement;
    };
    interface HTMLZPanelElemElement extends Components.ZPanelElem, HTMLStencilElement {
    }
    var HTMLZPanelElemElement: {
        prototype: HTMLZPanelElemElement;
        new (): HTMLZPanelElemElement;
    };
    interface HTMLZPopoverElementEventMap {
        "positionChange": any;
        "openChange": any;
    }
    /**
     * Popover component.
     * @cssprop --z-popover-theme--surface - background color of the popover.
     * @cssprop --z-popover-theme--text - foreground color of the popover.
     * @cssprop --z-popover-padding - padding of the popover.
     * @cssprop --z-popover-shadow-filter - drop-shadow filter of the popover. Defaults to `drop-shadow(0 1px 2px var(--shadow-color-base))`.
     */
    interface HTMLZPopoverElement extends Components.ZPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZPopoverElementEventMap>(type: K, listener: (this: HTMLZPopoverElement, ev: ZPopoverCustomEvent<HTMLZPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZPopoverElementEventMap>(type: K, listener: (this: HTMLZPopoverElement, ev: ZPopoverCustomEvent<HTMLZPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZPopoverElement: {
        prototype: HTMLZPopoverElement;
        new (): HTMLZPopoverElement;
    };
    interface HTMLZRangePickerElementEventMap {
        "dateSelect": any;
    }
    interface HTMLZRangePickerElement extends Components.ZRangePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZRangePickerElementEventMap>(type: K, listener: (this: HTMLZRangePickerElement, ev: ZRangePickerCustomEvent<HTMLZRangePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZRangePickerElementEventMap>(type: K, listener: (this: HTMLZRangePickerElement, ev: ZRangePickerCustomEvent<HTMLZRangePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZRangePickerElement: {
        prototype: HTMLZRangePickerElement;
        new (): HTMLZRangePickerElement;
    };
    interface HTMLZSearchbarElementEventMap {
        "searchSubmit": string;
        "searchTyping": string;
        "searchItemClick": SearchbarItem;
    }
    /**
     * @cssprop --z-searchbar-results-height - Max height of the results container (default: 540px)
     * @cssprop --z-searchbar-tag-text-color - Color of tag's text (default --color-primary03);
     * @cssprop --z-searchbar-tag-bg - Color of tag's background (default --color-hover-primary);
     */
    interface HTMLZSearchbarElement extends Components.ZSearchbar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZSearchbarElementEventMap>(type: K, listener: (this: HTMLZSearchbarElement, ev: ZSearchbarCustomEvent<HTMLZSearchbarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZSearchbarElementEventMap>(type: K, listener: (this: HTMLZSearchbarElement, ev: ZSearchbarCustomEvent<HTMLZSearchbarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZSearchbarElement: {
        prototype: HTMLZSearchbarElement;
        new (): HTMLZSearchbarElement;
    };
    /**
     * Section title component.
     * An optional secondary title can be put over the primary one.
     * @cssprop --z-section-title--divider-color - Color of the divider. Use a CSS prop string like `"--red500"`. Default is `"--red500"`.
     */
    interface HTMLZSectionTitleElement extends Components.ZSectionTitle, HTMLStencilElement {
    }
    var HTMLZSectionTitleElement: {
        prototype: HTMLZSectionTitleElement;
        new (): HTMLZSectionTitleElement;
    };
    interface HTMLZSelectElementEventMap {
        "optionSelect": any;
        "resetSelect": any;
    }
    interface HTMLZSelectElement extends Components.ZSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZSelectElementEventMap>(type: K, listener: (this: HTMLZSelectElement, ev: ZSelectCustomEvent<HTMLZSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZSelectElementEventMap>(type: K, listener: (this: HTMLZSelectElement, ev: ZSelectCustomEvent<HTMLZSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZSelectElement: {
        prototype: HTMLZSelectElement;
        new (): HTMLZSelectElement;
    };
    /**
     * Component short description.
     */
    interface HTMLZSkipToContentElement extends Components.ZSkipToContent, HTMLStencilElement {
    }
    var HTMLZSkipToContentElement: {
        prototype: HTMLZSkipToContentElement;
        new (): HTMLZSkipToContentElement;
    };
    interface HTMLZSlideshowElement extends Components.ZSlideshow, HTMLStencilElement {
    }
    var HTMLZSlideshowElement: {
        prototype: HTMLZSlideshowElement;
        new (): HTMLZSlideshowElement;
    };
    interface HTMLZStepperElement extends Components.ZStepper, HTMLStencilElement {
    }
    var HTMLZStepperElement: {
        prototype: HTMLZStepperElement;
        new (): HTMLZStepperElement;
    };
    interface HTMLZStepperItemElement extends Components.ZStepperItem, HTMLStencilElement {
    }
    var HTMLZStepperItemElement: {
        prototype: HTMLZStepperItemElement;
        new (): HTMLZStepperItemElement;
    };
    /**
     * ZTable component.
     * @cssprop --z-table--cells-padding - Padding of the cells.
     */
    interface HTMLZTableElement extends Components.ZTable, HTMLStencilElement {
    }
    var HTMLZTableElement: {
        prototype: HTMLZTableElement;
        new (): HTMLZTableElement;
    };
    /**
     * Ztag component.
     * @cssprop --z-tag-text-color - text and icon color using tokens.
     * @cssprop --z-tag-bg - background color of the z-tag.
     */
    interface HTMLZTagElement extends Components.ZTag, HTMLStencilElement {
    }
    var HTMLZTagElement: {
        prototype: HTMLZTagElement;
        new (): HTMLZTagElement;
    };
    /**
     * ZTbody component.
     */
    interface HTMLZTbodyElement extends Components.ZTbody, HTMLStencilElement {
    }
    var HTMLZTbodyElement: {
        prototype: HTMLZTbodyElement;
        new (): HTMLZTbodyElement;
    };
    interface HTMLZTdElementEventMap {
        "colspanChange": number;
    }
    /**
     * ZTd component.
     */
    interface HTMLZTdElement extends Components.ZTd, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZTdElementEventMap>(type: K, listener: (this: HTMLZTdElement, ev: ZTdCustomEvent<HTMLZTdElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZTdElementEventMap>(type: K, listener: (this: HTMLZTdElement, ev: ZTdCustomEvent<HTMLZTdElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZTdElement: {
        prototype: HTMLZTdElement;
        new (): HTMLZTdElement;
    };
    /**
     * ZTFoot component.
     */
    interface HTMLZTfootElement extends Components.ZTfoot, HTMLStencilElement {
    }
    var HTMLZTfootElement: {
        prototype: HTMLZTfootElement;
        new (): HTMLZTfootElement;
    };
    interface HTMLZThElementEventMap {
        "sort": any;
    }
    /**
     * ZTh component.
     */
    interface HTMLZThElement extends Components.ZTh, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZThElementEventMap>(type: K, listener: (this: HTMLZThElement, ev: ZThCustomEvent<HTMLZThElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZThElementEventMap>(type: K, listener: (this: HTMLZThElement, ev: ZThCustomEvent<HTMLZThElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZThElement: {
        prototype: HTMLZThElement;
        new (): HTMLZThElement;
    };
    /**
     * ZThead component.
     */
    interface HTMLZTheadElement extends Components.ZThead, HTMLStencilElement {
    }
    var HTMLZTheadElement: {
        prototype: HTMLZTheadElement;
        new (): HTMLZTheadElement;
    };
    interface HTMLZToastNotificationElementEventMap {
        "toastClose": any;
    }
    interface HTMLZToastNotificationElement extends Components.ZToastNotification, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZToastNotificationElementEventMap>(type: K, listener: (this: HTMLZToastNotificationElement, ev: ZToastNotificationCustomEvent<HTMLZToastNotificationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZToastNotificationElementEventMap>(type: K, listener: (this: HTMLZToastNotificationElement, ev: ZToastNotificationCustomEvent<HTMLZToastNotificationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZToastNotificationElement: {
        prototype: HTMLZToastNotificationElement;
        new (): HTMLZToastNotificationElement;
    };
    interface HTMLZToastNotificationListElement extends Components.ZToastNotificationList, HTMLStencilElement {
    }
    var HTMLZToastNotificationListElement: {
        prototype: HTMLZToastNotificationListElement;
        new (): HTMLZToastNotificationListElement;
    };
    interface HTMLZToggleButtonElementEventMap {
        "toggleClick": any;
    }
    interface HTMLZToggleButtonElement extends Components.ZToggleButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZToggleButtonElementEventMap>(type: K, listener: (this: HTMLZToggleButtonElement, ev: ZToggleButtonCustomEvent<HTMLZToggleButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZToggleButtonElementEventMap>(type: K, listener: (this: HTMLZToggleButtonElement, ev: ZToggleButtonCustomEvent<HTMLZToggleButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZToggleButtonElement: {
        prototype: HTMLZToggleButtonElement;
        new (): HTMLZToggleButtonElement;
    };
    interface HTMLZToggleSwitchElementEventMap {
        "toggleClick": any;
    }
    interface HTMLZToggleSwitchElement extends Components.ZToggleSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZToggleSwitchElementEventMap>(type: K, listener: (this: HTMLZToggleSwitchElement, ev: ZToggleSwitchCustomEvent<HTMLZToggleSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZToggleSwitchElementEventMap>(type: K, listener: (this: HTMLZToggleSwitchElement, ev: ZToggleSwitchCustomEvent<HTMLZToggleSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZToggleSwitchElement: {
        prototype: HTMLZToggleSwitchElement;
        new (): HTMLZToggleSwitchElement;
    };
    /**
     * Tooltip component.
     * It is basically a wrapper for the `<z-popover>` component with custom configuration.
     * @cssprop --z-tooltip-theme--surface - background color of the popover.
     * @cssprop --z-tooltip-theme--text - foreground color of the popover.
     * @cssprop --z-tooltip-shadow-filter - drop-shadow filter of the popover.
     */
    interface HTMLZTooltipElement extends Components.ZTooltip, HTMLStencilElement {
    }
    var HTMLZTooltipElement: {
        prototype: HTMLZTooltipElement;
        new (): HTMLZTooltipElement;
    };
    interface HTMLZTrElementEventMap {
        "expand": any;
    }
    /**
     * ZTr component.
     * When the row is `expandable`, you can set the `prevent-expand` css class on an interactive element inside the row
     * to prevent the row from expanding.
     */
    interface HTMLZTrElement extends Components.ZTr, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZTrElementEventMap>(type: K, listener: (this: HTMLZTrElement, ev: ZTrCustomEvent<HTMLZTrElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZTrElementEventMap>(type: K, listener: (this: HTMLZTrElement, ev: ZTrCustomEvent<HTMLZTrElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZTrElement: {
        prototype: HTMLZTrElement;
        new (): HTMLZTrElement;
    };
    interface HTMLZVisuallyHiddenElement extends Components.ZVisuallyHidden, HTMLStencilElement {
    }
    var HTMLZVisuallyHiddenElement: {
        prototype: HTMLZVisuallyHiddenElement;
        new (): HTMLZVisuallyHiddenElement;
    };
    interface HTMLElementTagNameMap {
        "z-accordion": HTMLZAccordionElement;
        "z-alert": HTMLZAlertElement;
        "z-anchor-navigation": HTMLZAnchorNavigationElement;
        "z-app-header": HTMLZAppHeaderElement;
        "z-aria-alert": HTMLZAriaAlertElement;
        "z-avatar": HTMLZAvatarElement;
        "z-book-card": HTMLZBookCardElement;
        "z-breadcrumb": HTMLZBreadcrumbElement;
        "z-button": HTMLZButtonElement;
        "z-button-sort": HTMLZButtonSortElement;
        "z-card": HTMLZCardElement;
        "z-carousel": HTMLZCarouselElement;
        "z-chip": HTMLZChipElement;
        "z-combobox": HTMLZComboboxElement;
        "z-cover-hero": HTMLZCoverHeroElement;
        "z-date-picker": HTMLZDatePickerElement;
        "z-divider": HTMLZDividerElement;
        "z-dragdrop-area": HTMLZDragdropAreaElement;
        "z-file": HTMLZFileElement;
        "z-file-upload": HTMLZFileUploadElement;
        "z-ghost-loading": HTMLZGhostLoadingElement;
        "z-icon": HTMLZIconElement;
        "z-info-box": HTMLZInfoBoxElement;
        "z-info-reveal": HTMLZInfoRevealElement;
        "z-input": HTMLZInputElement;
        "z-input-message": HTMLZInputMessageElement;
        "z-list": HTMLZListElement;
        "z-list-element": HTMLZListElementElement;
        "z-list-group": HTMLZListGroupElement;
        "z-logo": HTMLZLogoElement;
        "z-menu": HTMLZMenuElement;
        "z-menu-section": HTMLZMenuSectionElement;
        "z-modal": HTMLZModalElement;
        "z-myz-card": HTMLZMyzCardElement;
        "z-myz-card-alert": HTMLZMyzCardAlertElement;
        "z-myz-card-body": HTMLZMyzCardBodyElement;
        "z-myz-card-cover": HTMLZMyzCardCoverElement;
        "z-myz-card-dictionary": HTMLZMyzCardDictionaryElement;
        "z-myz-card-footer": HTMLZMyzCardFooterElement;
        "z-myz-card-footer-sections": HTMLZMyzCardFooterSectionsElement;
        "z-myz-card-header": HTMLZMyzCardHeaderElement;
        "z-myz-card-icon": HTMLZMyzCardIconElement;
        "z-myz-card-info": HTMLZMyzCardInfoElement;
        "z-myz-card-list": HTMLZMyzCardListElement;
        "z-myz-list": HTMLZMyzListElement;
        "z-myz-list-item": HTMLZMyzListItemElement;
        "z-navigation-tabs": HTMLZNavigationTabsElement;
        "z-notification": HTMLZNotificationElement;
        "z-offcanvas": HTMLZOffcanvasElement;
        "z-otp": HTMLZOtpElement;
        "z-pagination": HTMLZPaginationElement;
        "z-panel-elem": HTMLZPanelElemElement;
        "z-popover": HTMLZPopoverElement;
        "z-range-picker": HTMLZRangePickerElement;
        "z-searchbar": HTMLZSearchbarElement;
        "z-section-title": HTMLZSectionTitleElement;
        "z-select": HTMLZSelectElement;
        "z-skip-to-content": HTMLZSkipToContentElement;
        "z-slideshow": HTMLZSlideshowElement;
        "z-stepper": HTMLZStepperElement;
        "z-stepper-item": HTMLZStepperItemElement;
        "z-table": HTMLZTableElement;
        "z-tag": HTMLZTagElement;
        "z-tbody": HTMLZTbodyElement;
        "z-td": HTMLZTdElement;
        "z-tfoot": HTMLZTfootElement;
        "z-th": HTMLZThElement;
        "z-thead": HTMLZTheadElement;
        "z-toast-notification": HTMLZToastNotificationElement;
        "z-toast-notification-list": HTMLZToastNotificationListElement;
        "z-toggle-button": HTMLZToggleButtonElement;
        "z-toggle-switch": HTMLZToggleSwitchElement;
        "z-tooltip": HTMLZTooltipElement;
        "z-tr": HTMLZTrElement;
        "z-visually-hidden": HTMLZVisuallyHiddenElement;
    }
}
declare namespace LocalJSX {
    /**
     * Accordion component.
     * @cssprop --z-accordion-highlight-color - Color of the highlight band on the summary's left edge. Only applies when `highlight` is true. Default: `transparent`.
     * @cssprop --z-accordion-bg - Background color of the summary. Default: `--color-surface02`.
     * @cssprop --z-accordion-label-color - Label color. Default: `--color-default-text`.
     * @cssprop --z-accordion-disabled-label-color - Label color when disabled. Default: `--color-text03`.
     * @cssprop --z-accordion-content-bg - Background color of the accordion. Default: `--color-surface02`.
     * @cssprop --z-accordion-content-fg - Content text color. Default: `--color-default-text`.
     * @cssprop --z-accordion-hover-color - Hover color of the summary. Default: `--color-surface03`.
     * @cssprop --z-accordion-left-padding - Left padding of the summary. Default: `--space-unit` * 2.
     * @cssprop --z-accordion-right-padding - Right padding of the summary. Default: `--space-unit`.
     * @cssprop --z-accordion-label-font-weight - Font weight of the summary label. Default: `--font-sb`.
     */
    interface ZAccordion {
        /**
          * Enable highlight band on the `summary`'s left edge.
         */
        "highlight"?: boolean;
        /**
          * Name of the z-icon to display before the label's text.
         */
        "icon"?: string;
        /**
          * Disabled state of the accordion.
         */
        "isDisabled"?: boolean;
        /**
          * Text label.
         */
        "label"?: string;
        /**
          * Event fired when the accordion is toggled.
         */
        "onToggled"?: (event: ZAccordionCustomEvent<boolean>) => void;
        /**
          * The open state of the accordion.
         */
        "open"?: boolean;
        /**
          * Enable box-shadow on the accordion. Only applies when `variant` is `BACKGROUND`.
         */
        "shadow"?: boolean;
        /**
          * Size of the component.
         */
        "size"?: ControlSize;
        /**
          * Accordion variant.
         */
        "variant"?: AccordionVariant;
    }
    interface ZAlert {
        /**
          * alert variant type
         */
        "type"?: AlertType;
    }
    /**
     * Anchor navigation component.
     * @example ```
     * <z-anchor-navigation>
     *  <div>
     *    <a href="#section-id">Section name</a>
     *    <button type="button">
     *      <z-icon name="share" />
     *    </button>
     *  </div>
     * </z-anchor-navigation>
     * ```
     */
    interface ZAnchorNavigation {
        /**
          * Enables automatic inference of the current item, listening for hash change and checking the `href` of the slotted anchors. When disabled, the highlight of current item must be handled manually by setting the `data-current` attribute to the correct slotted items and the `aria-current` attribute to the anchors.
         */
        "autoCurrent"?: boolean;
        /**
          * If enabled, the text of each anchor will be hidden unless for the current one or the one the user is hovering.
         */
        "hideUnselected"?: boolean;
    }
    /**
     * @cssprop --app-header-typography-1-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `24px`.
     * @cssprop --app-header-typography-2-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `28px`.
     * @cssprop --app-header-typography-3-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `32px`.
     * @cssprop --app-header-typography-4-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `36px`.
     * @cssprop --app-header-typography-5-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `42px`.
     * @cssprop --app-header-typography-6-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `48px`.
     * @cssprop --app-header-typography-7-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `54px`.
     * @cssprop --app-header-typography-8-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `60px`.
     * @cssprop --app-header-typography-9-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `68px`.
     * @cssprop --app-header-typography-10-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `76px`.
     * @cssprop --app-header-typography-11-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `84px`.
     * @cssprop --app-header-typography-12-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `92px`.
     * @cssprop --app-header-typography-1-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.33`.
     * @cssprop --app-header-typography-2-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.29`.
     * @cssprop --app-header-typography-3-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.25`.
     * @cssprop --app-header-typography-4-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.24`.
     * @cssprop --app-header-typography-5-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.24`.
     * @cssprop --app-header-typography-6-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.25`.
     * @cssprop --app-header-typography-7-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.2`.
     * @cssprop --app-header-typography-8-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.26`.
     * @cssprop --app-header-typography-9-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.24`.
     * @cssprop --app-header-typography-10-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.26`.
     * @cssprop --app-header-typography-11-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.2`.
     * @cssprop --app-header-typography-12-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.2`.
     * @cssprop --app-header-typography-1-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.2 / 1em)`.
     * @cssprop --app-header-typography-2-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.4 / 1em)`.
     * @cssprop --app-header-typography-3-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.6 / 1em)`.
     * @cssprop --app-header-typography-4-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.8 / 1em)`.
     * @cssprop --app-header-typography-5-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1 / 1em)`.
     * @cssprop --app-header-typography-6-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.2 / 1em)`.
     * @cssprop --app-header-typography-7-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.4 / 1em)`.
     * @cssprop --app-header-typography-8-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.6 / 1em)`.
     * @cssprop --app-header-typography-9-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.8 / 1em)`.
     * @cssprop --app-header-typography-10-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-2 / 1em)`.
     * @cssprop --app-header-typography-11-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-2.2 / 1em)`.
     * @cssprop --app-header-typography-12-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-2.4 / 1em)`.
     * @cssprop --app-header-content-max-width - Use it to set header's content max width. Useful when the project use a fixed width layout. Defaults to `100%`.
     * @cssprop --app-header-height - Defaults to `auto`.
     * @cssprop --app-header-top-offset - Top offset for the stuck header. Useful when there are other fixed elements above the header. Defaults to `48px` (the height of the main topbar).
     * @cssprop --app-header-drawer-trigger-size - The size of the drawer icon. Defaults to `--space-unit * 4`.
     * @cssprop --app-header-bg - Header background color. Defaults to `--color-surface01`.
     * @cssprop --app-header-stucked-bg - Stuck header background color. Defaults to `--color-surface01`.
     * @cssprop --app-header-text-color - Text color. Useful on `hero` variant to set text color based on the colors of the background image. Defaults to `--color-default-text`.
     * @cssprop --app-header-title-font-size - Variable to customize the title's font size.
     * NOTE: Only use one of the exported `--app-header-typography-*-size` as a value.
     * Defaults to `--app-header-typography-3-size`.
     * @cssprop --app-header-title-lineheight - Variable to customize the title's line-height.
     * NOTE: Only use one of the exported `--app-header-typography-*-lineheight` as a value and use the same level as the one of the font size.
     * Defaults to `--app-header-typography-3-lineheight`.
     * @cssprop --app-header-title-letter-spacing - Variable to customize the title's letter-spacing.
     * NOTE: Only use one of the exported `--app-header-typography-*-tracking` as a value and use the same level as the one of the font size.
     * Defaults to `--app-header-typography-3-tracking`.
     * @cssprop --app-header-stucked-text-color - Stuck header text color. Defaults to `--color-default-text`.
     */
    interface ZAppHeader {
        /**
          * The opening state of the drawer.
         */
        "drawerOpen"?: boolean;
        /**
          * Enable the search bar.
         */
        "enableSearch"?: boolean;
        /**
          * Control menu bar position in the header. - auto: the menu bar is positioned near the title - stack: the menu bar is positioned below the title - offcanvas: the menu bar is not displayed and a burger icon appears to open the offcanvas menu
         */
        "flow"?: "auto" | "stack" | "offcanvas";
        /**
          * Set the hero image source for the header. You can also use a [slot="hero"] node for advanced customization.
         */
        "hero"?: string;
        /**
          * Emitted when the `stuck` state of the header changes
         */
        "onSticking"?: (event: ZAppHeaderCustomEvent<any>) => void;
        /**
          * Should place an overlay over the hero image. Useful for legibility purpose.
         */
        "overlay"?: boolean;
        /**
          * Url to the search page. Set this prop and `enableSearch` to show a link-button on mobile and tablet viewports, instead of the normal searchbar. The link will also appear on the sticky header.
         */
        "searchPageUrl"?: string;
        /**
          * Placeholder text for the search bar.
         */
        "searchPlaceholder"?: string;
        /**
          * Search string for the search bar.
         */
        "searchString"?: string;
        /**
          * Stuck mode for the header. You can programmatically set it using an IntersectionObserver.
         */
        "stuck"?: boolean;
    }
    interface ZAriaAlert {
        /**
          * Aria live mode
         */
        "mode"?: ZAriaAlertMode;
    }
    interface ZAvatar {
        /**
          * [optional] Avatar background color
         */
        "backgroundColor"?: string;
        /**
          * [optional] Avatar image
         */
        "image"?: string;
        /**
          * [optional] Avatar size
         */
        "size"?: AvatarSize;
        /**
          * [optional] Avatar text
         */
        "text"?: string;
        /**
          * [optional] Avatar text color
         */
        "textColor"?: string;
    }
    /**
     * @cssprop --z-book-card-ribbon-background-color - ribbon backgrund color
     * @cssprop --z-book-card-ribbon-shadow-color - ribbon shadow color
     * @cssprop --z-book-card-compact-width - compact card custom width
     * @cssprop --z-book-card-compact-height - compact card custom height
     */
    interface ZBookCard {
        /**
          * [optional] Authors
         */
        "authors"?: string;
        /**
          * [optional] Borderless card - compact variant only
         */
        "borderless"?: boolean;
        /**
          * Cover URL
         */
        "cover"?: string;
        /**
          * [optional] Fallback cover URL
         */
        "fallbackCover"?: string;
        /**
          * [optional] Main ISBN
         */
        "isbn"?: string;
        /**
          * [optional] ISBN label
         */
        "isbnLabel"?: string;
        /**
          * click on interactive ribbon
         */
        "onRibbonClick"?: (event: ZBookCardCustomEvent<any>) => void;
        /**
          * Card main title
         */
        "operaTitle"?: string;
        /**
          * [optional] [accessibility] Card title HTML tag
         */
        "operaTitleTag"?: string;
        /**
          * [optional] Ribbon label - expanded and search variant only
         */
        "ribbon"?: string;
        /**
          * [optional] Ribbon icon - expanded and search variant only
         */
        "ribbonIcon"?: string;
        /**
          * [optional] Ribbon interactive - expanded and search variant only
         */
        "ribbonInteractive"?: boolean;
        /**
          * Card variant: expanded, compact, search
         */
        "variant"?: BookCardVariant;
        /**
          * [optional] Card subtitle
         */
        "volumeTitle"?: string;
    }
    interface ZBreadcrumb {
        /**
          * [optional] Variant of first node
         */
        "homepageVariant"?: BreadcrumbHomepageVariant;
        /**
          * [optional] Sets max number of element to show
         */
        "maxNodesToShow"?: number;
        /**
          * Emitted when preventFollowUrl=true to handle custom page transition
         */
        "onClickOnNode"?: (event: ZBreadcrumbCustomEvent<BreadcrumbPath["path"]>) => void;
        /**
          * [optional] Sets max number of row for each path inside the popover. Zero equals unlimited
         */
        "overflowMenuItemRows"?: number;
        /**
          * [optional] Sets the path style
         */
        "pathStyle"?: BreadcrumbPathStyle;
        /**
          * [optional] Controls the behaviour on <a> tag click/enter
         */
        "preventFollowUrl"?: boolean;
        /**
          * [optional] Sets the maximun number of chars per single node
         */
        "truncateChar"?: number;
    }
    interface ZButton {
        /**
          * defines a string value that labels an interactive element, used for accessibility.
         */
        "ariaLabel"?: string;
        /**
          * HTML button disabled attribute.
         */
        "disabled"?: boolean;
        /**
          * HTML <a> href attribute. If it is set, it renders an HTML <a> tag.
         */
        "href"?: string;
        /**
          * Identifier, should be unique.
         */
        "htmlid"?: string;
        /**
          * `z-icon` name to use (optional).
         */
        "icon"?: string;
        /**
          * HTML button name attribute.
         */
        "name"?: string;
        /**
          * defines role attribute, used for accessibility.
         */
        "role"?: string;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ButtonSize | ControlSize;
        /**
          * HTML a target attribute.
         */
        "target"?: string;
        /**
          * HTML button type attribute.
         */
        "type"?: ButtonType;
        /**
          * Graphical variant: `primary`, `secondary`, `tertiary`. Defaults to `primary`.
         */
        "variant"?: ButtonVariant;
    }
    interface ZButtonSort {
        /**
          * id, should be unique
         */
        "buttonid"?: string;
        /**
          * occurrences counter (optional)
         */
        "counter"?: number;
        /**
          * label content (descending)
         */
        "desclabel"?: string;
        /**
          * selected flag (optional)
         */
        "isselected"?: boolean;
        /**
          * label content (ascending)
         */
        "label"?: string;
        /**
          * sorting direction click event, returns `buttonid` and `sortAsc`
         */
        "onButtonSortClick"?: (event: ZButtonSortCustomEvent<any>) => void;
        /**
          * sortable flag (optional)
         */
        "sortasc"?: boolean;
        /**
          * sort label content (ascending) (optional)
         */
        "sortlabelasc"?: string;
        /**
          * sort label content (descending) (optional)
         */
        "sortlabeldesc"?: string;
    }
    /**
     * ZCard component.
     * @cssprop --aspect-ratio - Cover aspect ratio. Default: `1.62`
     * @cssprop --z-card--border-color - Default: `var(--gray200)`
     * @cssprop --z-card--color-cover-background - Cover color. Default: `var(--color-surface01)`
     * @cssprop --z-card--text-background - Background color for the `text` variant. Default: `var(--color-surface01)`
     * @cssprop --z-card--text-border-radius - Default: `none`
     * @cssprop --z-card--text-border - Configure CSS `border`. Default: `none`
     * @cssprop --z-card--text-padding - Configure CSS `padding`. Default: `none`
     */
    interface ZCard {
        /**
          * Enable 'clickable' style like hover and focus style.
         */
        "clickable"?: boolean;
        /**
          * Name of the icon to place over the image cover
         */
        "coverIcon"?: string;
        /**
          * Enable shadow. Default: false.
         */
        "showShadow"?: boolean;
        /**
          * Card variant. Can be one of "text", "border", "shadow", "overlay". Leave it undefined for the default card.
         */
        "variant"?: CardVariant;
    }
    /**
     * ZCarousel component.
     * @cssprop --z-carousel-gutter - The gutter between items.
     * @cssprop --z-carousel-items-shadow - The shadow around the items.
     */
    interface ZCarousel {
        /**
          * Arrow buttons position
         */
        "arrowsPosition"?: CarouselArrowsPosition;
        /**
          * Whether the navigation arrow buttons over the items are always visible or only on mouse hover. If set to `false`, the arrows will not be visible on mobile. Only meaningful with `arrowsPosition` set to `OVER`.
         */
        "fixedArrows"?: boolean;
        /**
          * The height of the ghost loader (only visible when `isLoading` is set to `true`)
         */
        "ghostLoadingHeight"?: number;
        /**
          * When enabled, navigating next the last item will go back to the first item and vice versa.
         */
        "infinite"?: boolean;
        /**
          * The z-carousel is on loading state
         */
        "isLoading"?: boolean;
        /**
          * The z-carousel title
         */
        "label"?: string;
        /**
          * Emitted on index change and only in `single` mode.
         */
        "onIndexChange"?: (event: ZCarouselCustomEvent<{currentItem: number}>) => void;
        /**
          * Progress indicator type. Only available for `single` mode
         */
        "progressMode"?: CarouselProgressMode;
        /**
          * Shows only one content at a time
         */
        "single"?: boolean;
    }
    interface ZChip {
        /**
          * z-chip aria-label string
         */
        "ariaLabel"?: string;
        /**
          * set z-chip as disabled
         */
        "disabled"?: boolean;
        /**
          * Non interactive icon
         */
        "icon"?: string;
        /**
          * z-chip interactive icon
         */
        "interactiveIcon"?: string;
        /**
          * click on interactive icon
         */
        "onInteractiveIconClick"?: (event: ZChipCustomEvent<any>) => void;
        /**
          * z-chip size type, can be default, medium or small
         */
        "type"?: ZChipType;
    }
    interface ZCombobox {
        /**
          * check all label (optional)
         */
        "checkalltext"?: string;
        /**
          * close combobox list text
         */
        "closesearchtext"?: string;
        /**
          * the combobox is disabled
         */
        "disabled"?: boolean;
        /**
          * show "check all" checkbox (optional)
         */
        "hascheckall"?: boolean;
        /**
          * group items by category
         */
        "hasgroupitems"?: boolean;
        /**
          * show search input flag (optional)
         */
        "hassearch"?: boolean;
        /**
          * input unique id
         */
        "inputid"?: string;
        /**
          * fixed style flag
         */
        "isfixed"?: boolean;
        /**
          * toggle combo list opening flag
         */
        "isopen"?: boolean;
        /**
          * list items array
         */
        "items"?: ComboItem[] | string;
        /**
          * label text
         */
        "label"?: string;
        /**
          * max number of checkable items (0 = unlimited)
         */
        "maxcheckableitems"?: number;
        /**
          * no result text message
         */
        "noresultslabel"?: string;
        /**
          * Emitted when value is checked/unchecked. Returns id, items.
         */
        "onComboboxChange"?: (event: ZComboboxCustomEvent<any>) => void;
        /**
          * search input label text (optional)
         */
        "searchlabel"?: string;
        /**
          * search input placeholder text (optional)
         */
        "searchplaceholder"?: string;
        /**
          * search input title text (optional)
         */
        "searchtitle"?: string;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ControlSize;
        /**
          * uncheck all label (optional)
         */
        "uncheckalltext"?: string;
    }
    /**
     * Cover hero component.
     * Component to display a hero image with content.
     * @cssprop --cover-hero-overlay - overlay color of the cover hero (CSS `background` property). **Default**: `linear-gradient(270deg, #0000 0%, #000000e6 100%)`.
     * @cssprop --cover-hero-text-color - color of the text.
     * @cssprop --cover-hero-aspect-ratio - aspect ratio to use for the image. You can pass a fraction or a number representing the ratio. **Default**: the intrinsic aspect ratio of the slotted image or `16/9`.
     */
    interface ZCoverHero {
        /**
          * Vertical content position (for `STACKED` variant).
         */
        "contentPosition"?: CoverHeroContentPosition;
        /**
          * Whether to keep the image aspect ratio. If set to `false`, the cssprop `--cover-hero-aspect-ratio` will not affect the component's size; instead, the height of the component follows the content's one. Note: it may be necessary to set a min and/or max height to the component.
         */
        "preserveAspectRatio"?: boolean;
        /**
          * Cover hero variant. Can be `OVERLAY` or `STACKED`.
         */
        "variant"?: CoverHeroVariant;
    }
    interface ZDatePicker {
        /**
          * z-input aria label
         */
        "ariaLabel"?: string;
        /**
          * unique id
         */
        "datePickerId"?: string;
        /**
          * z-input label
         */
        "label"?: string;
        /**
          * [Optional] datepicker mode: date, datetime, only months
         */
        "mode"?: ZDatePickerMode;
        /**
          * emitted when date changes, returns selected date
         */
        "onDateSelect"?: (event: ZDatePickerCustomEvent<any>) => void;
    }
    interface ZDivider {
        /**
          * [optional] Divider color
         */
        "color"?: string;
        /**
          * [optional] Divider orintation
         */
        "orientation"?: DividerOrientation;
        /**
          * [optional] Divider size
         */
        "size"?: DividerSize;
    }
    interface ZDragdropArea {
        /**
          * drag & drop button label
         */
        "dragAndDropLabel"?: string;
        /**
          * Emitted when user drop one or more files
         */
        "onFileDropped"?: (event: ZDragdropAreaCustomEvent<any>) => void;
    }
    interface ZFile {
        /**
          * File name
         */
        "fileName"?: string;
        /**
          * File chip id
         */
        "fileNumber"?: number;
        /**
          * Emitted when a z-file component is removed from the DOM
         */
        "onRemoveFile"?: (event: ZFileCustomEvent<any>) => void;
    }
    interface ZFileUpload {
        /**
          * Prop indicating the accepted file type: ex ".pdf, .doc, .jpg"
         */
        "acceptedFormat"?: string;
        /**
          * allowed file message
         */
        "allowedFilesMessage"?: string;
        /**
          * Prop indicating the button variant
         */
        "buttonVariant"?: ButtonVariant;
        /**
          * Description
         */
        "description"?: string;
        /**
          * drag & drop button label
         */
        "dragAndDropLabel"?: string;
        /**
          * error modal message
         */
        "errorModalMessage"?: string;
        /**
          * error modal title
         */
        "errorModalTitle"?: string;
        /**
          * Max file dimension in Megabyte
         */
        "fileMaxSize"?: number;
        /**
          * uploaded files history rendering
         */
        "hasFileSection"?: boolean;
        /**
          * Title
         */
        "mainTitle"?: string;
        /**
          * Emitted when user select one or more files
         */
        "onFileInput"?: (event: ZFileUploadCustomEvent<any>) => void;
        /**
          * Prop indicating the file upload type - can be default or dragdrop
         */
        "type"?: ZFileUploadType;
        /**
          * upoload button label
         */
        "uploadBtnLabel"?: string;
        /**
          * upload clickable message
         */
        "uploadClickableMessage"?: string;
        /**
          * upload message
         */
        "uploadMessage"?: string;
        /**
          * loaded files label
         */
        "uploadedFilesLabel"?: string;
    }
    interface ZGhostLoading {
    }
    interface ZIcon {
        /**
          * icon fill (optional)
         */
        "fill"?: string;
        /**
          * icon height (optional)
         */
        "height"?: number;
        /**
          * icon id (optional)
         */
        "iconid"?: string;
        /**
          * icon name
         */
        "name"?: string;
        /**
          * icon width (optional)
         */
        "width"?: number;
    }
    interface ZInfoBox {
        /**
          * info box unique id
         */
        "boxid"?: string;
        /**
          * render close icon flag
         */
        "isclosable"?: boolean;
        /**
          * emitted on close icon click
         */
        "onInfoBoxClose"?: (event: ZInfoBoxCustomEvent<any>) => void;
    }
    /**
     * Info reveal component.
     * @cssprop --z-info-reveal-panel-width - Width of the info panel.
     */
    interface ZInfoReveal {
        /**
          * Aria label of the trigger button. It will be only used when `label` prop is empty.
         */
        "ariaLabel"?: string;
        /**
          * Name of the icon for the trigger button
         */
        "icon"?: string;
        /**
          * Label of the trigger button.
         */
        "label"?: string;
        /**
          * The position of the z-info-reveal in the page. This helps to correctly place the info panel. The panel will grow in the opposite direction of the position. For example, with the default position `BOTTOM_RIGHT`, the panel will grow vertically upwards and horizontally to the left.
         */
        "position"?: InfoRevealPosition;
        /**
          * Size of the trigger button
         */
        "size"?: ControlSize;
    }
    interface ZInput {
        /**
          * the input aria-activedescendant (optional): available for text, password, number, email
         */
        "ariaActivedescendant"?: string;
        /**
          * the input aria-autocomplete (optional): available for text, password, number, email
         */
        "ariaAutocomplete"?: string;
        /**
          * the input aria-controls (optional): available for text, password, number, email
         */
        "ariaControls"?: string;
        /**
          * the input aria-expaded: available for text, password, number, email
         */
        "ariaExpanded"?: string;
        /**
          * the input aria-label
         */
        "ariaLabel"?: string;
        /**
          * the input has autocomplete option (optional): available for text, password, number, email
         */
        "autocomplete"?: string;
        /**
          * checked: available for checkbox, radio
         */
        "checked"?: boolean;
        /**
          * the input is disabled
         */
        "disabled"?: boolean;
        /**
          * render clear icon when typing (optional): available for text
         */
        "hasclearicon"?: boolean;
        /**
          * the id of the input element
         */
        "htmlid"?: string;
        /**
          * the input html title (optional)
         */
        "htmltitle"?: string;
        /**
          * render icon (optional): available for text
         */
        "icon"?: string;
        /**
          * the input label
         */
        "label"?: string;
        /**
          * the input label position: available for checkbox, radio
         */
        "labelPosition"?: LabelPosition;
        /**
          * max number value (optional): available for number
         */
        "max"?: number;
        /**
          * Max length value (optional): available for text
         */
        "maxlength"?: number;
        /**
          * input helper message (optional): available for text, password, number, email, textarea - if set to `false` message won't be displayed
         */
        "message"?: string | boolean;
        /**
          * min number value (optional): available for number
         */
        "min"?: number;
        /**
          * Min length value (optional): available for text
         */
        "minlength"?: number;
        /**
          * the input name
         */
        "name"?: string;
        /**
          * Emitted on input blur
         */
        "onInputBlur"?: (event: ZInputCustomEvent<any>) => void;
        /**
          * Emitted on input value change, returns value, validity
         */
        "onInputChange"?: (event: ZInputCustomEvent<any>) => void;
        /**
          * Emitted on checkbox check/uncheck, returns id, checked, type, name, value, validity
         */
        "onInputCheck"?: (event: ZInputCustomEvent<any>) => void;
        /**
          * Emitted on input focus
         */
        "onInputFocus"?: (event: ZInputCustomEvent<any>) => void;
        /**
          * Emitted when user starts typing
         */
        "onStartTyping"?: (event: ZInputCustomEvent<any>) => void;
        /**
          * Emitted when user stops typing, returns value, validity
         */
        "onStopTyping"?: (event: ZInputCustomEvent<any>) => void;
        /**
          * pattern value (optional): available for tel, text, search, url, email, password
         */
        "pattern"?: string;
        /**
          * the input placeholder (optional)
         */
        "placeholder"?: string;
        /**
          * the input is readonly
         */
        "readonly"?: boolean;
        /**
          * the input is required (optional): available for text, password, number, email, textarea, checkbox
         */
        "required"?: boolean;
        /**
          * the input role
         */
        "role"?: string;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ControlSize;
        /**
          * the input status (optional): available for text, password, number, email, textarea
         */
        "status"?: InputStatus;
        /**
          * step number value (optional): available for number
         */
        "step"?: number;
        /**
          * input types
         */
        "type"?: InputType;
        /**
          * the input value
         */
        "value"?: string;
    }
    interface ZInputMessage {
        /**
          * input helper message
         */
        "message"?: string;
        /**
          * input status (optional)
         */
        "status"?: InputStatus;
    }
    interface ZList {
        /**
          * [optional] type of the list marker for each element
         */
        "listType"?: ListType;
        /**
          * Sets role of the element.
         */
        "role"?: string;
        /**
          * [optional] Sets size of inside elements.
         */
        "size"?: ListSize;
    }
    interface ZListElement {
        /**
          * [optional] Align expandable button left or right.
         */
        "alignButton"?: ExpandableListButtonAlign;
        /**
          * [optional] Sets element clickable.
         */
        "clickable"?: boolean;
        /**
          * [optional] Sets text color of the element.
         */
        "color"?: string;
        /**
          * [optional] Sets disabled style of the element.
         */
        "disabled"?: boolean;
        /**
          * [optional] Sets the divider color.
         */
        "dividerColor"?: string;
        /**
          * [optional] Sets the divider size.
         */
        "dividerSize"?: DividerSize;
        /**
          * [optional] Sets the position where to insert the divider.
         */
        "dividerType"?: ListDividerType;
        /**
          * [optional] Sets element as expandable.
         */
        "expandable"?: boolean;
        /**
          * [optional] Sets expandable style to element.
         */
        "expandableStyle"?: ExpandableListStyle;
        /**
          * set tabindex to Host tag (optional). Defaults to 0.
         */
        "htmlTabindex"?: number | null;
        /**
          * [optional] List element id.
         */
        "listElementId"?: number;
        /**
          * [optional] position of the list element inside the list or the group
         */
        "listElementPosition"?: string;
        /**
          * [optional] type of the list marker for each element
         */
        "listType"?: ListType;
        /**
          * remove filter click event, returns filterid
         */
        "onAccessibleFocus"?: (event: ZListElementCustomEvent<number>) => void;
        /**
          * set parent aria-activedescendant on focus event, returns filterid
         */
        "onAriaDescendantFocus"?: (event: ZListElementCustomEvent<number>) => void;
        /**
          * remove filter click event, returns filterid
         */
        "onClickItem"?: (event: ZListElementCustomEvent<any>) => void;
        /**
          * Sets element role.
         */
        "role"?: string;
        /**
          * [optional] Sets size of inside elements.
         */
        "size"?: ListSize;
    }
    interface ZListGroup {
        /**
          * [optional] Sets the divider color.
         */
        "dividerColor"?: string;
        /**
          * [optional] Sets the divider size.
         */
        "dividerSize"?: DividerSize;
        /**
          * [optional] Sets the position where to insert the divider.
         */
        "dividerType"?: ListDividerType;
        /**
          * [optional] type of the list marker for each element
         */
        "listType"?: ListType;
        /**
          * [optional] Sets size of inside elements.
         */
        "size"?: ListSize;
    }
    interface ZLogo {
        /**
          * image height
         */
        "height"?: number;
        /**
          * alternative image text
         */
        "imageAlt"?: string;
        /**
          * link url (optional)
         */
        "link"?: string;
        /**
          * if true, the mobile logo is displayed, otherwise the desktop one
         */
        "mobileLogo"?: boolean;
        /**
          * link target: true means _blank, false means _self
         */
        "targetBlank"?: boolean;
        /**
          * image width
         */
        "width"?: number;
    }
    /**
     * @cssprop --z-menu-label-color - Color of the label's text.
     */
    interface ZMenu {
        /**
          * Flag to set the active status of the menu.
         */
        "active"?: boolean;
        /**
          * Flag to set the display mode of the list. If true, the list will be absolutely positioned under the menu label, stacked beneath it otherwise.
         */
        "floating"?: boolean;
        /**
          * The menu has been closed.
         */
        "onClosed"?: (event: ZMenuCustomEvent<any>) => void;
        /**
          * The menu has been opened.
         */
        "onOpened"?: (event: ZMenuCustomEvent<any>) => void;
        /**
          * The opening state of the menu.
         */
        "open"?: boolean;
        /**
          * Tells the component that it's placed in a vertical context with other `ZMenu`s (e.g. in the ZAppHeader's offcanvas). A small border is placed under it as a separator from other elements.
         */
        "verticalContext"?: boolean;
    }
    /**
     * A component to create submenus inside the ZMenu.
     */
    interface ZMenuSection {
        /**
          * Active state
         */
        "active"?: boolean;
        /**
          * The section has been closed.
         */
        "onClosed"?: (event: ZMenuSectionCustomEvent<any>) => void;
        /**
          * The section has been opened.
         */
        "onOpened"?: (event: ZMenuSectionCustomEvent<any>) => void;
    }
    interface ZModal {
        /**
          * add role "alertdialog" to dialog (optional, default is false)
         */
        "alertdialog"?: boolean;
        /**
          * if true, the modal is closable (optional, default is true)
         */
        "closable"?: boolean;
        /**
          * aria-label for close button (optional)
         */
        "closeButtonLabel"?: string;
        /**
          * unique id
         */
        "modalid"?: string;
        /**
          * subtitle (optional)
         */
        "modalsubtitle"?: string;
        /**
          * title text (optional)
         */
        "modaltitle"?: string;
        /**
          * emitted on background click, returns modalid
         */
        "onModalBackgroundClick"?: (event: ZModalCustomEvent<any>) => void;
        /**
          * emitted on close button click, returns modalid
         */
        "onModalClose"?: (event: ZModalCustomEvent<any>) => void;
        /**
          * emitted on modal header click, returns modalid
         */
        "onModalHeaderActive"?: (event: ZModalCustomEvent<any>) => void;
        /**
          * if true, the modal can scroll inside, if false the viewport can scroll
         */
        "scrollInside"?: boolean;
    }
    interface ZMyzCard {
        /**
          * graphic variant (optional)
         */
        "cardtype"?: LicenseType;
        /**
          * faded status
         */
        "faded"?: boolean;
        /**
          * highlighted status
         */
        "ishighlighted"?: boolean;
        /**
          * pressed status
         */
        "ispressed"?: boolean;
    }
    interface ZMyzCardAlert {
        /**
          * action button text
         */
        "actiontext"?: string;
        /**
          * content text
         */
        "contenttext"?: string;
        /**
          * icon name
         */
        "iconname"?: string;
        /**
          * undo action click/keyboard event, returns actionType
         */
        "onUndoAction"?: (event: ZMyzCardAlertCustomEvent<any>) => void;
        /**
          * alert variant type
         */
        "type"?: string;
    }
    interface ZMyzCardBody {
    }
    interface ZMyzCardCover {
        /**
          * default error image source
         */
        "defaultimg"?: string;
        /**
          * faded status
         */
        "faded"?: boolean;
        /**
          * image source
         */
        "img"?: string;
        /**
          * cover alt title
         */
        "titolo"?: string;
    }
    interface ZMyzCardDictionary {
        /**
          * card cover
         */
        "cover"?: string;
        /**
          * card is disabled
         */
        "disabled"?: boolean;
        /**
          * flip button label
         */
        "flipbuttonlabel"?: string;
        /**
          * card is flipped
         */
        "flipped"?: boolean;
        /**
          * hide info button
         */
        "hideinfobtn"?: boolean;
        /**
          * card title
         */
        "name"?: string;
        /**
          * when card is flipped
         */
        "onCardFlipped"?: (event: ZMyzCardDictionaryCustomEvent<any>) => void;
    }
    interface ZMyzCardFooter {
        /**
          * authors name text
         */
        "autori"?: string;
        /**
          * card graphic variant (optional)
         */
        "cardtype"?: LicenseType;
        /**
          * display footer custom slotted content
         */
        "customContent"?: boolean;
        /**
          * faded status
         */
        "faded"?: boolean;
        /**
          * volume isbn
         */
        "isbn"?: string;
        /**
          * footer opened by default (optional)
         */
        "opened"?: boolean;
        /**
          * volume title
         */
        "titolo"?: string;
    }
    interface ZMyzCardFooterSections {
    }
    interface ZMyzCardHeader {
        /**
          * card graphic variant (optional)
         */
        "cardtype"?: LicenseType;
        /**
          * faded status
         */
        "faded"?: boolean;
        /**
          * volume title
         */
        "titolo"?: string;
    }
    interface ZMyzCardIcon {
        /**
          * description of the icon
         */
        "ariaLabel"?: string;
        /**
          * icon name
         */
        "icon"?: string;
        /**
          * disabled status flag
         */
        "isdisabled"?: boolean;
    }
    interface ZMyzCardInfo {
        /**
          * dictionary info
         */
        "data"?: string | DictionaryData;
        /**
          * tabindex link attribute (optional)
         */
        "htmltabindex"?: number;
        /**
          * flip card to front
         */
        "onFlipCard"?: (event: ZMyzCardInfoCustomEvent<any>) => void;
    }
    interface ZMyzCardList {
        /**
          * list data stringified array
         */
        "listdata"?: string;
    }
    interface ZMyzList {
        /**
          * json stringified list data (mutable, optional)
         */
        "inputrawdata"?: string;
        /**
          * list item data (mutable, optional)
         */
        "list"?: ListItem[];
    }
    interface ZMyzListItem {
        /**
          * data-action attribute (optional)
         */
        "action"?: string;
        /**
          * icon name (optional)
         */
        "icon"?: string;
        /**
          * link url (optional)
         */
        "link"?: string;
        /**
          * link target (optional)
         */
        "linktarget"?: string;
        /**
          * id (optional)
         */
        "listitemid"?: string;
        /**
          * emitted on list item click, returns listitemid
         */
        "onZListItemClick"?: (event: ZMyzListItemCustomEvent<any>) => void;
        /**
          * emitted on list item link click, returns linkId
         */
        "onZListItemLinkClick"?: (event: ZMyzListItemCustomEvent<any>) => void;
        /**
          * content text
         */
        "text"?: string;
        /**
          * underlined style flag
         */
        "underlined"?: boolean;
    }
    /**
     * Navigation tabs component.
     * To select a specific tab programmatically, set the `aria-selected` attribute to `true` on the desired tab.
     * @cssprop --z-navigation-tabs-nav-buttons-bg - Navigation buttons background color.
     * @cssprop --z-navigation-tabs-nav-buttons-fg - Navigation buttons foreground color.
     */
    interface ZNavigationTabs {
        /**
          * Set `aria-label` attribute to the internal `<nav>` element with `tablist` role.
         */
        "ariaLabel"?: string;
        /**
          * Emitted when the selected tab changes. Contains the index of the new selected tab in the `detail` of the event.
         */
        "onSelected"?: (event: ZNavigationTabsCustomEvent<number>) => void;
        /**
          * Navigation tabs orientation.
         */
        "orientation"?: NavigationTabsOrientation;
        /**
          * Index of the selected tab. Useful to programmatically select a tab. The tab can also be selected by setting the `aria-selected` attribute to `true` on the desired tab.
         */
        "selectedTab"?: number;
        /**
          * Navigation tabs size.
         */
        "size"?: NavigationTabsSize;
    }
    /**
     * Notification bar component.
     * @cssprop --z-notification--top-offset - The top offset of the notification. Use it when `sticky` prop is set to `true` and you need the notification to stay under other sticky elements. Default: 0px.
     */
    interface ZNotification {
        /**
          * Action button text
         */
        "actiontext"?: string;
        /**
          * Name of the icon on the left of the content
         */
        "contenticonname"?: string;
        /**
          * Call to action clicked
         */
        "onNotificationAction"?: (event: ZNotificationCustomEvent<any>) => void;
        /**
          * Close button clicked
         */
        "onNotificationClose"?: (event: ZNotificationCustomEvent<any>) => void;
        /**
          * Enable close icon
         */
        "showclose"?: boolean;
        /**
          * Enable shadow.
          * @deprecated shadow is available only for the `sticky` version of the notification.
         */
        "showshadow"?: boolean;
        /**
          * Enable sticky notification bar.
         */
        "sticky"?: boolean;
        /**
          * Alert variant type
         */
        "type"?: NotificationType;
    }
    interface ZOffcanvas {
        /**
          * emitted when `open` prop changes
         */
        "onCanvasOpenStatusChanged"?: (event: ZOffcanvasCustomEvent<any>) => void;
        /**
          * Whether the offcanvas is open. Default: false
         */
        "open"?: boolean;
        /**
          * Whether to skip the initial animation. Useful when the initial value of the `open` prop is set to `true`.
         */
        "skipLoadAnimation"?: boolean;
        /**
          * open content transitioning in a specified direction left | right. Default: left
         */
        "transitiondirection"?: TransitionDirection;
        /**
          * Offcanvas variant. Can be one `overlay` or `pushcontent`. Default variant: pushcontent
         */
        "variant"?: OffCanvasVariant;
    }
    interface ZOtp {
        /**
          * Input number
         */
        "inputNum"?: number;
        /**
          * Input message
         */
        "message"?: string;
        /**
          * Otp change event
         */
        "onOtpChange"?: (event: ZOtpCustomEvent<any>) => void;
        /**
          * Input status
         */
        "status"?: InputStatus;
    }
    /**
     * Pagination bar component.
     */
    interface ZPagination {
        /**
          * Current page.
         */
        "currentPage"?: number;
        /**
          * Enable buttons to go to the first and last pages.
         */
        "edges"?: boolean;
        /**
          * Whether to show "go to page" feature.
         */
        "goToPage"?: boolean;
        /**
          * Pagination label placed before the bar.
         */
        "label"?: string;
        /**
          * Enable navigation arrows.
         */
        "navArrows"?: boolean;
        /**
          * Event emitted when the current page has changed.
         */
        "onPageChanged"?: (event: ZPaginationCustomEvent<any>) => void;
        /**
          * Number of pages to skip.
         */
        "skip"?: number;
        /**
          * Number of pages to show left/right of the current, before showing "load more" symbol (…).
         */
        "split"?: number;
        /**
          * Total number of pages. Required.
         */
        "totalPages": number;
        /**
          * Number of pages to show at a time. If not set, all pages will be shown.
         */
        "visiblePages"?: number;
    }
    interface ZPanelElem {
        /**
          * name of slot container (optional)
         */
        "descrSlotName"?: string;
        /**
          * html element id (optional)
         */
        "elemid"?: string;
        /**
          * alternative image text (optional)
         */
        "imgalt"?: string;
        /**
          * image url source (optional)
         */
        "imgurl"?: string;
        /**
          * disabled status flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * icon link name (optional)
         */
        "linkicon"?: string;
        /**
          * link label text
         */
        "linklabel"?: string;
        /**
          * link target (optional)
         */
        "target"?: string;
        /**
          * link url
         */
        "url"?: string;
    }
    /**
     * Popover component.
     * @cssprop --z-popover-theme--surface - background color of the popover.
     * @cssprop --z-popover-theme--text - foreground color of the popover.
     * @cssprop --z-popover-padding - padding of the popover.
     * @cssprop --z-popover-shadow-filter - drop-shadow filter of the popover. Defaults to `drop-shadow(0 1px 2px var(--shadow-color-base))`.
     */
    interface ZPopover {
        /**
          * The selector or the element bound with the popover. If string css selector is provided make sure to use a valid selector.
         */
        "bindTo"?: string | HTMLElement;
        /**
          * Whether to center the popup on the main side (according to "position").
         */
        "center"?: boolean;
        /**
          * If true, the popover can be closed by clicking outside of it or pressing the escape key. Otherwise, it will be closed only programmatically (by setting `open` to `false`).
         */
        "closable"?: boolean;
        /**
          * Open change event.
         */
        "onOpenChange"?: (event: ZPopoverCustomEvent<any>) => void;
        /**
          * Position change event.
         */
        "onPositionChange"?: (event: ZPopoverCustomEvent<any>) => void;
        /**
          * The open state of the popover.
         */
        "open"?: boolean;
        /**
          * Popover position.
         */
        "position"?: PopoverPosition;
        /**
          * Whether to show popover's arrow.
         */
        "showArrow"?: boolean;
    }
    interface ZRangePicker {
        /**
          * first z-input aria label
         */
        "firstAriaLabel"?: string;
        /**
          * first z-input label
         */
        "firstLabel"?: string;
        /**
          * readonly mode
         */
        "firstPickerPlaceholder"?: string;
        /**
          * readonly mode
         */
        "firstPickerReadOnly"?: boolean;
        /**
          * readonly mode
         */
        "lastPickerPlaceholder"?: string;
        /**
          * readonly mode
         */
        "lastPickerReadOnly"?: boolean;
        /**
          * [Optional] datepicker mode: date or datetime
         */
        "mode"?: ZRangePickerMode;
        /**
          * emitted when date changes, returns an array with the two selected dates
         */
        "onDateSelect"?: (event: ZRangePickerCustomEvent<any>) => void;
        /**
          * unique id
         */
        "rangePickerId"?: string;
        /**
          * second z-input aria label
         */
        "secondAriaLabel"?: string;
        /**
          * second z-input label
         */
        "secondLabel"?: string;
    }
    /**
     * @cssprop --z-searchbar-results-height - Max height of the results container (default: 540px)
     * @cssprop --z-searchbar-tag-text-color - Color of tag's text (default --color-primary03);
     * @cssprop --z-searchbar-tag-bg - Color of tag's background (default --color-hover-primary);
     */
    interface ZSearchbar {
        /**
          * Show autocomplete results
         */
        "autocomplete"?: boolean;
        /**
          * Minimun number of characters to dispatch typing event
         */
        "autocompleteMinChars"?: number;
        /**
          * the id of the searchbar element
         */
        "htmlid"?: string;
        /**
          * Emitted on search result click, return item
         */
        "onSearchItemClick"?: (event: ZSearchbarCustomEvent<SearchbarItem>) => void;
        /**
          * Emitted on search submit, return search string
         */
        "onSearchSubmit"?: (event: ZSearchbarCustomEvent<string>) => void;
        /**
          * Emitted on search typing, return search string
         */
        "onSearchTyping"?: (event: ZSearchbarCustomEvent<string>) => void;
        /**
          * Search input placeholder
         */
        "placeholder"?: string;
        /**
          * Prevent submit action
         */
        "preventSubmit"?: boolean;
        /**
          * Number of results shown - default all
         */
        "resultsCount"?: number;
        /**
          * Truncate results to single row
         */
        "resultsEllipsis"?: boolean;
        /**
          * Autocomplete results items
         */
        "resultsItems"?: SearchbarItem[] | string;
        /**
          * Set button icon without label
         */
        "searchButtonIconOnly"?: boolean;
        /**
          * Search helper text
         */
        "searchHelperLabel"?: string;
        /**
          * Show submit button
         */
        "showSearchButton"?: boolean;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ControlSize;
        /**
          * Sort autocomplete results items
         */
        "sortResultsItems"?: boolean;
        /**
          * Input search string
         */
        "value"?: string;
        /**
          * Graphical variant: `primary`, `secondary`, `tertiary`. Defaults to `primary`.
         */
        "variant"?: ButtonVariant;
    }
    /**
     * Section title component.
     * An optional secondary title can be put over the primary one.
     * @cssprop --z-section-title--divider-color - Color of the divider. Use a CSS prop string like `"--red500"`. Default is `"--red500"`.
     */
    interface ZSectionTitle {
        /**
          * Divider position for the primary title. This prop only works if the secondary title is not set.
         */
        "dividerPosition"?: ZSectionTitleDividerPosition;
        /**
          * Whether the primary title text is uppercase.
         */
        "uppercase"?: boolean;
    }
    interface ZSelect {
        /**
          * the input aria-label
         */
        "ariaLabel"?: string;
        /**
          * the input has autocomplete option
         */
        "autocomplete"?: boolean;
        /**
          * the input is disabled
         */
        "disabled"?: boolean;
        "hasGroupItems"?: boolean;
        /**
          * the id of the input element
         */
        "htmlid"?: string;
        /**
          * the input html title (optional)
         */
        "htmltitle"?: string;
        /**
          * When fixed, it occupies space and pushes down next elements.
         */
        "isfixed"?: boolean;
        /**
          * the input select options
         */
        "items"?: SelectItem[] | string;
        /**
          * the input label
         */
        "label"?: string;
        /**
          * input helper message (optional) - if set to `false` message won't be displayed
         */
        "message"?: string | boolean;
        /**
          * the input name
         */
        "name"?: string;
        /**
          * no result text message
         */
        "noresultslabel"?: string;
        /**
          * Emitted on select option selection, returns select id, selected item id
         */
        "onOptionSelect"?: (event: ZSelectCustomEvent<any>) => void;
        /**
          * Emitted on reset selected item, returns select id, selected item id
         */
        "onResetSelect"?: (event: ZSelectCustomEvent<any>) => void;
        /**
          * the input placeholder (optional)
         */
        "placeholder"?: string;
        /**
          * the input is readonly
         */
        "readonly"?: boolean;
        "resetItem"?: string;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ControlSize;
        /**
          * the input status (optional)
         */
        "status"?: InputStatus;
    }
    /**
     * Component short description.
     */
    interface ZSkipToContent {
        /**
          * Array to fill link into skip-content
         */
        "links"?: string | SkipToContentLink[];
        /**
          * Graphical variant: `dark`, `light`.
         */
        "variant"?: ThemeVariant;
    }
    interface ZSlideshow {
        /**
          * array or JSON stringified images urls
         */
        "data"?: string[] | string;
        /**
          * slideshow id
         */
        "slideshowid"?: string;
    }
    interface ZStepper {
    }
    interface ZStepperItem {
        /**
          * The checked state of the item.
         */
        "checked"?: boolean;
        /**
          * The disabled state of the item.
         */
        "disabled"?: boolean;
        /**
          * The href to navigate on click.
         */
        "href"?: string;
        /**
          * The number of the step item.
         */
        "index"?: number;
        /**
          * The pressed state of the item.
         */
        "pressed"?: boolean;
    }
    /**
     * ZTable component.
     * @cssprop --z-table--cells-padding - Padding of the cells.
     */
    interface ZTable {
        /**
          * Whether the table cells should show a border between them.
         */
        "bordered"?: boolean;
    }
    /**
     * Ztag component.
     * @cssprop --z-tag-text-color - text and icon color using tokens.
     * @cssprop --z-tag-bg - background color of the z-tag.
     */
    interface ZTag {
        /**
          * [optional] Hide the text and show it on hover
         */
        "expandable"?: boolean;
        /**
          * [optional] Tag icon
         */
        "icon"?: string;
    }
    /**
     * ZTbody component.
     */
    interface ZTbody {
    }
    /**
     * ZTd component.
     */
    interface ZTd {
        /**
          * Number of columns that the cell should span.
         */
        "colspan"?: number;
        /**
          * Emitted when the value of the `colspan` changes.
         */
        "onColspanChange"?: (event: ZTdCustomEvent<number>) => void;
        /**
          * Enables the contextual menu. Can be set to "hover" or "always" to show the button only on cell hover or always. Set a nullish value to hide the menu button.
         */
        "showMenu"?: VisibilityCondition;
        /**
          * Whether the cell should stick.
         */
        "sticky"?: boolean;
    }
    /**
     * ZTFoot component.
     */
    interface ZTfoot {
        /**
          * If true, the footer will be stuck to the bottom of the table.
         */
        "sticky"?: boolean;
    }
    /**
     * ZTh component.
     */
    interface ZTh {
        /**
          * Number of columns that the cell should span.
         */
        "colspan"?: number;
        /**
          * Sort event fired when the user clicks on the sort button. The sorting logic must be implemented by the app. You can set an `id` on the `z-th` to easly identify the column in the event listener.
         */
        "onSort"?: (event: ZThCustomEvent<any>) => void;
        /**
          * Set popover position.
         */
        "popoverPosition"?: PopoverPosition;
        /**
          * Enables the contextual menu. Can be set to "hover" or "always" to show the button only on cell hover or always. Set a nullish value to hide the menu button.
         */
        "showMenu"?: VisibilityCondition;
        /**
          * Current sorting direction. Set `SortDirection.ASC` or `SortDirection.DESC` to show the sort icon.
         */
        "sortDirection"?: SortDirection;
        /**
          * Whether the cell should stick.
         */
        "sticky"?: boolean;
    }
    /**
     * ZThead component.
     */
    interface ZThead {
        /**
          * If true, the header will be stuck to the top of the table.
         */
        "sticky"?: boolean;
    }
    interface ZToastNotification {
        /**
          * toast notification closing timeout (ms)
         */
        "autoclose"?: number;
        /**
          * toggles closing button rendering
         */
        "closebutton"?: boolean;
        /**
          * toast notification draggable percentage
         */
        "draggablepercentage"?: number;
        /**
          * toast notification's title
         */
        "heading"?: string;
        /**
          * toast notification can be draggable
         */
        "isdraggable"?: boolean;
        /**
          * toast notification's message
         */
        "message"?: string;
        /**
          * notification close event
         */
        "onToastClose"?: (event: ZToastNotificationCustomEvent<any>) => void;
        /**
          * toast notification autoclose can be paused
         */
        "pauseonfocusloss"?: boolean;
        /**
          * toast notification animation type: slide-in-left, slide-in-right, slide-in-down, slide-in-up
         */
        "transition"?: ToastNotificationTransition;
        /**
          * toast notification type: dark, light, accent, error, success, warning
         */
        "type"?: ToastNotification;
    }
    interface ZToastNotificationList {
        /**
          * Set the entry position of new notification in the list
         */
        "newestontop"?: boolean;
        /**
          * Set the position of toast notification list - top-left, top-centre, top-right, bottom-left, bottom-centre, bottom-right
         */
        "position"?: ToastNotificationPosition;
    }
    interface ZToggleButton {
        /**
          * aria-label for the button
         */
        "ariaLabel"?: string;
        /**
          * avoidclick status flag
         */
        "avoidclick"?: boolean;
        /**
          * disabled status flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * label text
         */
        "label"?: string;
        /**
          * emitted on toggle button click, returns isOpen
         */
        "onToggleClick"?: (event: ZToggleButtonCustomEvent<any>) => void;
        /**
          * open by default (optional)
         */
        "opened"?: boolean;
    }
    interface ZToggleSwitch {
        /**
          * Checked state
         */
        "checked"?: boolean;
        /**
          * Disabled flag
         */
        "disabled"?: boolean;
        /**
          * HTML id attribute to set to the internal checkbox
         */
        "htmlid"?: string;
        /**
          * Label position
         */
        "labelPosition"?: LabelPosition;
        /**
          * Toggle click event
         */
        "onToggleClick"?: (event: ZToggleSwitchCustomEvent<any>) => void;
    }
    /**
     * Tooltip component.
     * It is basically a wrapper for the `<z-popover>` component with custom configuration.
     * @cssprop --z-tooltip-theme--surface - background color of the popover.
     * @cssprop --z-tooltip-theme--text - foreground color of the popover.
     * @cssprop --z-tooltip-shadow-filter - drop-shadow filter of the popover.
     */
    interface ZTooltip {
        /**
          * The selector or the element bound with the tooltip.
         */
        "bindTo"?: string | HTMLElement;
        /**
          * Reflects `closable` prop of the popover. "If true, the popover can be closed by clicking outside of it or pressing the escape key. Otherwise, it will be closed only programmatically (by setting `open` to `false`)."
         */
        "closable"?: boolean;
        /**
          * Enable tooltip dark mode.
         */
        "dark"?: boolean;
        /**
          * The open state of the tooltip.
         */
        "open"?: boolean;
        /**
          * Tooltip position.
         */
        "position"?: PopoverPosition;
    }
    /**
     * ZTr component.
     * When the row is `expandable`, you can set the `prevent-expand` css class on an interactive element inside the row
     * to prevent the row from expanding.
     */
    interface ZTr {
        /**
          * Whether the row is expandable. Use a `z-td` as the last cell of the row for the additional content. It will show a button to expand/collapse the row. The last cell will be hidden until the button or row is clicked.  If some element inside the expandable row contains the `prevent-expand` css class, the row will not expand by clicking that element.
         */
        "expandable"?: boolean;
        /**
          * Row has been expanded
         */
        "onExpand"?: (event: ZTrCustomEvent<any>) => void;
    }
    interface ZVisuallyHidden {
    }
    interface IntrinsicElements {
        "z-accordion": ZAccordion;
        "z-alert": ZAlert;
        "z-anchor-navigation": ZAnchorNavigation;
        "z-app-header": ZAppHeader;
        "z-aria-alert": ZAriaAlert;
        "z-avatar": ZAvatar;
        "z-book-card": ZBookCard;
        "z-breadcrumb": ZBreadcrumb;
        "z-button": ZButton;
        "z-button-sort": ZButtonSort;
        "z-card": ZCard;
        "z-carousel": ZCarousel;
        "z-chip": ZChip;
        "z-combobox": ZCombobox;
        "z-cover-hero": ZCoverHero;
        "z-date-picker": ZDatePicker;
        "z-divider": ZDivider;
        "z-dragdrop-area": ZDragdropArea;
        "z-file": ZFile;
        "z-file-upload": ZFileUpload;
        "z-ghost-loading": ZGhostLoading;
        "z-icon": ZIcon;
        "z-info-box": ZInfoBox;
        "z-info-reveal": ZInfoReveal;
        "z-input": ZInput;
        "z-input-message": ZInputMessage;
        "z-list": ZList;
        "z-list-element": ZListElement;
        "z-list-group": ZListGroup;
        "z-logo": ZLogo;
        "z-menu": ZMenu;
        "z-menu-section": ZMenuSection;
        "z-modal": ZModal;
        "z-myz-card": ZMyzCard;
        "z-myz-card-alert": ZMyzCardAlert;
        "z-myz-card-body": ZMyzCardBody;
        "z-myz-card-cover": ZMyzCardCover;
        "z-myz-card-dictionary": ZMyzCardDictionary;
        "z-myz-card-footer": ZMyzCardFooter;
        "z-myz-card-footer-sections": ZMyzCardFooterSections;
        "z-myz-card-header": ZMyzCardHeader;
        "z-myz-card-icon": ZMyzCardIcon;
        "z-myz-card-info": ZMyzCardInfo;
        "z-myz-card-list": ZMyzCardList;
        "z-myz-list": ZMyzList;
        "z-myz-list-item": ZMyzListItem;
        "z-navigation-tabs": ZNavigationTabs;
        "z-notification": ZNotification;
        "z-offcanvas": ZOffcanvas;
        "z-otp": ZOtp;
        "z-pagination": ZPagination;
        "z-panel-elem": ZPanelElem;
        "z-popover": ZPopover;
        "z-range-picker": ZRangePicker;
        "z-searchbar": ZSearchbar;
        "z-section-title": ZSectionTitle;
        "z-select": ZSelect;
        "z-skip-to-content": ZSkipToContent;
        "z-slideshow": ZSlideshow;
        "z-stepper": ZStepper;
        "z-stepper-item": ZStepperItem;
        "z-table": ZTable;
        "z-tag": ZTag;
        "z-tbody": ZTbody;
        "z-td": ZTd;
        "z-tfoot": ZTfoot;
        "z-th": ZTh;
        "z-thead": ZThead;
        "z-toast-notification": ZToastNotification;
        "z-toast-notification-list": ZToastNotificationList;
        "z-toggle-button": ZToggleButton;
        "z-toggle-switch": ZToggleSwitch;
        "z-tooltip": ZTooltip;
        "z-tr": ZTr;
        "z-visually-hidden": ZVisuallyHidden;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * Accordion component.
             * @cssprop --z-accordion-highlight-color - Color of the highlight band on the summary's left edge. Only applies when `highlight` is true. Default: `transparent`.
             * @cssprop --z-accordion-bg - Background color of the summary. Default: `--color-surface02`.
             * @cssprop --z-accordion-label-color - Label color. Default: `--color-default-text`.
             * @cssprop --z-accordion-disabled-label-color - Label color when disabled. Default: `--color-text03`.
             * @cssprop --z-accordion-content-bg - Background color of the accordion. Default: `--color-surface02`.
             * @cssprop --z-accordion-content-fg - Content text color. Default: `--color-default-text`.
             * @cssprop --z-accordion-hover-color - Hover color of the summary. Default: `--color-surface03`.
             * @cssprop --z-accordion-left-padding - Left padding of the summary. Default: `--space-unit` * 2.
             * @cssprop --z-accordion-right-padding - Right padding of the summary. Default: `--space-unit`.
             * @cssprop --z-accordion-label-font-weight - Font weight of the summary label. Default: `--font-sb`.
             */
            "z-accordion": LocalJSX.ZAccordion & JSXBase.HTMLAttributes<HTMLZAccordionElement>;
            "z-alert": LocalJSX.ZAlert & JSXBase.HTMLAttributes<HTMLZAlertElement>;
            /**
             * Anchor navigation component.
             * @example ```
             * <z-anchor-navigation>
             *  <div>
             *    <a href="#section-id">Section name</a>
             *    <button type="button">
             *      <z-icon name="share" />
             *    </button>
             *  </div>
             * </z-anchor-navigation>
             * ```
             */
            "z-anchor-navigation": LocalJSX.ZAnchorNavigation & JSXBase.HTMLAttributes<HTMLZAnchorNavigationElement>;
            /**
             * @cssprop --app-header-typography-1-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `24px`.
             * @cssprop --app-header-typography-2-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `28px`.
             * @cssprop --app-header-typography-3-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `32px`.
             * @cssprop --app-header-typography-4-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `36px`.
             * @cssprop --app-header-typography-5-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `42px`.
             * @cssprop --app-header-typography-6-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `48px`.
             * @cssprop --app-header-typography-7-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `54px`.
             * @cssprop --app-header-typography-8-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `60px`.
             * @cssprop --app-header-typography-9-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `68px`.
             * @cssprop --app-header-typography-10-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `76px`.
             * @cssprop --app-header-typography-11-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `84px`.
             * @cssprop --app-header-typography-12-size - Part of the heading typography's scale. Use it if you have to override the default value. Value: `92px`.
             * @cssprop --app-header-typography-1-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.33`.
             * @cssprop --app-header-typography-2-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.29`.
             * @cssprop --app-header-typography-3-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.25`.
             * @cssprop --app-header-typography-4-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.24`.
             * @cssprop --app-header-typography-5-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.24`.
             * @cssprop --app-header-typography-6-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.25`.
             * @cssprop --app-header-typography-7-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.2`.
             * @cssprop --app-header-typography-8-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.26`.
             * @cssprop --app-header-typography-9-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.24`.
             * @cssprop --app-header-typography-10-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.26`.
             * @cssprop --app-header-typography-11-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.2`.
             * @cssprop --app-header-typography-12-lineheight - Part of the heading typography's scale. Use it if you have to override the default value. Value: `1.2`.
             * @cssprop --app-header-typography-1-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.2 / 1em)`.
             * @cssprop --app-header-typography-2-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.4 / 1em)`.
             * @cssprop --app-header-typography-3-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.6 / 1em)`.
             * @cssprop --app-header-typography-4-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-0.8 / 1em)`.
             * @cssprop --app-header-typography-5-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1 / 1em)`.
             * @cssprop --app-header-typography-6-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.2 / 1em)`.
             * @cssprop --app-header-typography-7-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.4 / 1em)`.
             * @cssprop --app-header-typography-8-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.6 / 1em)`.
             * @cssprop --app-header-typography-9-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-1.8 / 1em)`.
             * @cssprop --app-header-typography-10-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-2 / 1em)`.
             * @cssprop --app-header-typography-11-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-2.2 / 1em)`.
             * @cssprop --app-header-typography-12-tracking - Part of the heading typography's scale. Use it if you have to override the default value. Value: `calc(-2.4 / 1em)`.
             * @cssprop --app-header-content-max-width - Use it to set header's content max width. Useful when the project use a fixed width layout. Defaults to `100%`.
             * @cssprop --app-header-height - Defaults to `auto`.
             * @cssprop --app-header-top-offset - Top offset for the stuck header. Useful when there are other fixed elements above the header. Defaults to `48px` (the height of the main topbar).
             * @cssprop --app-header-drawer-trigger-size - The size of the drawer icon. Defaults to `--space-unit * 4`.
             * @cssprop --app-header-bg - Header background color. Defaults to `--color-surface01`.
             * @cssprop --app-header-stucked-bg - Stuck header background color. Defaults to `--color-surface01`.
             * @cssprop --app-header-text-color - Text color. Useful on `hero` variant to set text color based on the colors of the background image. Defaults to `--color-default-text`.
             * @cssprop --app-header-title-font-size - Variable to customize the title's font size.
             * NOTE: Only use one of the exported `--app-header-typography-*-size` as a value.
             * Defaults to `--app-header-typography-3-size`.
             * @cssprop --app-header-title-lineheight - Variable to customize the title's line-height.
             * NOTE: Only use one of the exported `--app-header-typography-*-lineheight` as a value and use the same level as the one of the font size.
             * Defaults to `--app-header-typography-3-lineheight`.
             * @cssprop --app-header-title-letter-spacing - Variable to customize the title's letter-spacing.
             * NOTE: Only use one of the exported `--app-header-typography-*-tracking` as a value and use the same level as the one of the font size.
             * Defaults to `--app-header-typography-3-tracking`.
             * @cssprop --app-header-stucked-text-color - Stuck header text color. Defaults to `--color-default-text`.
             */
            "z-app-header": LocalJSX.ZAppHeader & JSXBase.HTMLAttributes<HTMLZAppHeaderElement>;
            "z-aria-alert": LocalJSX.ZAriaAlert & JSXBase.HTMLAttributes<HTMLZAriaAlertElement>;
            "z-avatar": LocalJSX.ZAvatar & JSXBase.HTMLAttributes<HTMLZAvatarElement>;
            /**
             * @cssprop --z-book-card-ribbon-background-color - ribbon backgrund color
             * @cssprop --z-book-card-ribbon-shadow-color - ribbon shadow color
             * @cssprop --z-book-card-compact-width - compact card custom width
             * @cssprop --z-book-card-compact-height - compact card custom height
             */
            "z-book-card": LocalJSX.ZBookCard & JSXBase.HTMLAttributes<HTMLZBookCardElement>;
            "z-breadcrumb": LocalJSX.ZBreadcrumb & JSXBase.HTMLAttributes<HTMLZBreadcrumbElement>;
            "z-button": LocalJSX.ZButton & JSXBase.HTMLAttributes<HTMLZButtonElement>;
            "z-button-sort": LocalJSX.ZButtonSort & JSXBase.HTMLAttributes<HTMLZButtonSortElement>;
            /**
             * ZCard component.
             * @cssprop --aspect-ratio - Cover aspect ratio. Default: `1.62`
             * @cssprop --z-card--border-color - Default: `var(--gray200)`
             * @cssprop --z-card--color-cover-background - Cover color. Default: `var(--color-surface01)`
             * @cssprop --z-card--text-background - Background color for the `text` variant. Default: `var(--color-surface01)`
             * @cssprop --z-card--text-border-radius - Default: `none`
             * @cssprop --z-card--text-border - Configure CSS `border`. Default: `none`
             * @cssprop --z-card--text-padding - Configure CSS `padding`. Default: `none`
             */
            "z-card": LocalJSX.ZCard & JSXBase.HTMLAttributes<HTMLZCardElement>;
            /**
             * ZCarousel component.
             * @cssprop --z-carousel-gutter - The gutter between items.
             * @cssprop --z-carousel-items-shadow - The shadow around the items.
             */
            "z-carousel": LocalJSX.ZCarousel & JSXBase.HTMLAttributes<HTMLZCarouselElement>;
            "z-chip": LocalJSX.ZChip & JSXBase.HTMLAttributes<HTMLZChipElement>;
            "z-combobox": LocalJSX.ZCombobox & JSXBase.HTMLAttributes<HTMLZComboboxElement>;
            /**
             * Cover hero component.
             * Component to display a hero image with content.
             * @cssprop --cover-hero-overlay - overlay color of the cover hero (CSS `background` property). **Default**: `linear-gradient(270deg, #0000 0%, #000000e6 100%)`.
             * @cssprop --cover-hero-text-color - color of the text.
             * @cssprop --cover-hero-aspect-ratio - aspect ratio to use for the image. You can pass a fraction or a number representing the ratio. **Default**: the intrinsic aspect ratio of the slotted image or `16/9`.
             */
            "z-cover-hero": LocalJSX.ZCoverHero & JSXBase.HTMLAttributes<HTMLZCoverHeroElement>;
            "z-date-picker": LocalJSX.ZDatePicker & JSXBase.HTMLAttributes<HTMLZDatePickerElement>;
            "z-divider": LocalJSX.ZDivider & JSXBase.HTMLAttributes<HTMLZDividerElement>;
            "z-dragdrop-area": LocalJSX.ZDragdropArea & JSXBase.HTMLAttributes<HTMLZDragdropAreaElement>;
            "z-file": LocalJSX.ZFile & JSXBase.HTMLAttributes<HTMLZFileElement>;
            "z-file-upload": LocalJSX.ZFileUpload & JSXBase.HTMLAttributes<HTMLZFileUploadElement>;
            "z-ghost-loading": LocalJSX.ZGhostLoading & JSXBase.HTMLAttributes<HTMLZGhostLoadingElement>;
            "z-icon": LocalJSX.ZIcon & JSXBase.HTMLAttributes<HTMLZIconElement>;
            "z-info-box": LocalJSX.ZInfoBox & JSXBase.HTMLAttributes<HTMLZInfoBoxElement>;
            /**
             * Info reveal component.
             * @cssprop --z-info-reveal-panel-width - Width of the info panel.
             */
            "z-info-reveal": LocalJSX.ZInfoReveal & JSXBase.HTMLAttributes<HTMLZInfoRevealElement>;
            "z-input": LocalJSX.ZInput & JSXBase.HTMLAttributes<HTMLZInputElement>;
            "z-input-message": LocalJSX.ZInputMessage & JSXBase.HTMLAttributes<HTMLZInputMessageElement>;
            "z-list": LocalJSX.ZList & JSXBase.HTMLAttributes<HTMLZListElement>;
            "z-list-element": LocalJSX.ZListElement & JSXBase.HTMLAttributes<HTMLZListElementElement>;
            "z-list-group": LocalJSX.ZListGroup & JSXBase.HTMLAttributes<HTMLZListGroupElement>;
            "z-logo": LocalJSX.ZLogo & JSXBase.HTMLAttributes<HTMLZLogoElement>;
            /**
             * @cssprop --z-menu-label-color - Color of the label's text.
             */
            "z-menu": LocalJSX.ZMenu & JSXBase.HTMLAttributes<HTMLZMenuElement>;
            /**
             * A component to create submenus inside the ZMenu.
             */
            "z-menu-section": LocalJSX.ZMenuSection & JSXBase.HTMLAttributes<HTMLZMenuSectionElement>;
            "z-modal": LocalJSX.ZModal & JSXBase.HTMLAttributes<HTMLZModalElement>;
            "z-myz-card": LocalJSX.ZMyzCard & JSXBase.HTMLAttributes<HTMLZMyzCardElement>;
            "z-myz-card-alert": LocalJSX.ZMyzCardAlert & JSXBase.HTMLAttributes<HTMLZMyzCardAlertElement>;
            "z-myz-card-body": LocalJSX.ZMyzCardBody & JSXBase.HTMLAttributes<HTMLZMyzCardBodyElement>;
            "z-myz-card-cover": LocalJSX.ZMyzCardCover & JSXBase.HTMLAttributes<HTMLZMyzCardCoverElement>;
            "z-myz-card-dictionary": LocalJSX.ZMyzCardDictionary & JSXBase.HTMLAttributes<HTMLZMyzCardDictionaryElement>;
            "z-myz-card-footer": LocalJSX.ZMyzCardFooter & JSXBase.HTMLAttributes<HTMLZMyzCardFooterElement>;
            "z-myz-card-footer-sections": LocalJSX.ZMyzCardFooterSections & JSXBase.HTMLAttributes<HTMLZMyzCardFooterSectionsElement>;
            "z-myz-card-header": LocalJSX.ZMyzCardHeader & JSXBase.HTMLAttributes<HTMLZMyzCardHeaderElement>;
            "z-myz-card-icon": LocalJSX.ZMyzCardIcon & JSXBase.HTMLAttributes<HTMLZMyzCardIconElement>;
            "z-myz-card-info": LocalJSX.ZMyzCardInfo & JSXBase.HTMLAttributes<HTMLZMyzCardInfoElement>;
            "z-myz-card-list": LocalJSX.ZMyzCardList & JSXBase.HTMLAttributes<HTMLZMyzCardListElement>;
            "z-myz-list": LocalJSX.ZMyzList & JSXBase.HTMLAttributes<HTMLZMyzListElement>;
            "z-myz-list-item": LocalJSX.ZMyzListItem & JSXBase.HTMLAttributes<HTMLZMyzListItemElement>;
            /**
             * Navigation tabs component.
             * To select a specific tab programmatically, set the `aria-selected` attribute to `true` on the desired tab.
             * @cssprop --z-navigation-tabs-nav-buttons-bg - Navigation buttons background color.
             * @cssprop --z-navigation-tabs-nav-buttons-fg - Navigation buttons foreground color.
             */
            "z-navigation-tabs": LocalJSX.ZNavigationTabs & JSXBase.HTMLAttributes<HTMLZNavigationTabsElement>;
            /**
             * Notification bar component.
             * @cssprop --z-notification--top-offset - The top offset of the notification. Use it when `sticky` prop is set to `true` and you need the notification to stay under other sticky elements. Default: 0px.
             */
            "z-notification": LocalJSX.ZNotification & JSXBase.HTMLAttributes<HTMLZNotificationElement>;
            "z-offcanvas": LocalJSX.ZOffcanvas & JSXBase.HTMLAttributes<HTMLZOffcanvasElement>;
            "z-otp": LocalJSX.ZOtp & JSXBase.HTMLAttributes<HTMLZOtpElement>;
            /**
             * Pagination bar component.
             */
            "z-pagination": LocalJSX.ZPagination & JSXBase.HTMLAttributes<HTMLZPaginationElement>;
            "z-panel-elem": LocalJSX.ZPanelElem & JSXBase.HTMLAttributes<HTMLZPanelElemElement>;
            /**
             * Popover component.
             * @cssprop --z-popover-theme--surface - background color of the popover.
             * @cssprop --z-popover-theme--text - foreground color of the popover.
             * @cssprop --z-popover-padding - padding of the popover.
             * @cssprop --z-popover-shadow-filter - drop-shadow filter of the popover. Defaults to `drop-shadow(0 1px 2px var(--shadow-color-base))`.
             */
            "z-popover": LocalJSX.ZPopover & JSXBase.HTMLAttributes<HTMLZPopoverElement>;
            "z-range-picker": LocalJSX.ZRangePicker & JSXBase.HTMLAttributes<HTMLZRangePickerElement>;
            /**
             * @cssprop --z-searchbar-results-height - Max height of the results container (default: 540px)
             * @cssprop --z-searchbar-tag-text-color - Color of tag's text (default --color-primary03);
             * @cssprop --z-searchbar-tag-bg - Color of tag's background (default --color-hover-primary);
             */
            "z-searchbar": LocalJSX.ZSearchbar & JSXBase.HTMLAttributes<HTMLZSearchbarElement>;
            /**
             * Section title component.
             * An optional secondary title can be put over the primary one.
             * @cssprop --z-section-title--divider-color - Color of the divider. Use a CSS prop string like `"--red500"`. Default is `"--red500"`.
             */
            "z-section-title": LocalJSX.ZSectionTitle & JSXBase.HTMLAttributes<HTMLZSectionTitleElement>;
            "z-select": LocalJSX.ZSelect & JSXBase.HTMLAttributes<HTMLZSelectElement>;
            /**
             * Component short description.
             */
            "z-skip-to-content": LocalJSX.ZSkipToContent & JSXBase.HTMLAttributes<HTMLZSkipToContentElement>;
            "z-slideshow": LocalJSX.ZSlideshow & JSXBase.HTMLAttributes<HTMLZSlideshowElement>;
            "z-stepper": LocalJSX.ZStepper & JSXBase.HTMLAttributes<HTMLZStepperElement>;
            "z-stepper-item": LocalJSX.ZStepperItem & JSXBase.HTMLAttributes<HTMLZStepperItemElement>;
            /**
             * ZTable component.
             * @cssprop --z-table--cells-padding - Padding of the cells.
             */
            "z-table": LocalJSX.ZTable & JSXBase.HTMLAttributes<HTMLZTableElement>;
            /**
             * Ztag component.
             * @cssprop --z-tag-text-color - text and icon color using tokens.
             * @cssprop --z-tag-bg - background color of the z-tag.
             */
            "z-tag": LocalJSX.ZTag & JSXBase.HTMLAttributes<HTMLZTagElement>;
            /**
             * ZTbody component.
             */
            "z-tbody": LocalJSX.ZTbody & JSXBase.HTMLAttributes<HTMLZTbodyElement>;
            /**
             * ZTd component.
             */
            "z-td": LocalJSX.ZTd & JSXBase.HTMLAttributes<HTMLZTdElement>;
            /**
             * ZTFoot component.
             */
            "z-tfoot": LocalJSX.ZTfoot & JSXBase.HTMLAttributes<HTMLZTfootElement>;
            /**
             * ZTh component.
             */
            "z-th": LocalJSX.ZTh & JSXBase.HTMLAttributes<HTMLZThElement>;
            /**
             * ZThead component.
             */
            "z-thead": LocalJSX.ZThead & JSXBase.HTMLAttributes<HTMLZTheadElement>;
            "z-toast-notification": LocalJSX.ZToastNotification & JSXBase.HTMLAttributes<HTMLZToastNotificationElement>;
            "z-toast-notification-list": LocalJSX.ZToastNotificationList & JSXBase.HTMLAttributes<HTMLZToastNotificationListElement>;
            "z-toggle-button": LocalJSX.ZToggleButton & JSXBase.HTMLAttributes<HTMLZToggleButtonElement>;
            "z-toggle-switch": LocalJSX.ZToggleSwitch & JSXBase.HTMLAttributes<HTMLZToggleSwitchElement>;
            /**
             * Tooltip component.
             * It is basically a wrapper for the `<z-popover>` component with custom configuration.
             * @cssprop --z-tooltip-theme--surface - background color of the popover.
             * @cssprop --z-tooltip-theme--text - foreground color of the popover.
             * @cssprop --z-tooltip-shadow-filter - drop-shadow filter of the popover.
             */
            "z-tooltip": LocalJSX.ZTooltip & JSXBase.HTMLAttributes<HTMLZTooltipElement>;
            /**
             * ZTr component.
             * When the row is `expandable`, you can set the `prevent-expand` css class on an interactive element inside the row
             * to prevent the row from expanding.
             */
            "z-tr": LocalJSX.ZTr & JSXBase.HTMLAttributes<HTMLZTrElement>;
            "z-visually-hidden": LocalJSX.ZVisuallyHidden & JSXBase.HTMLAttributes<HTMLZVisuallyHiddenElement>;
        }
    }
}
