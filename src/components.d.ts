/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AlertType, LicenseType } from "./beans/index";
import { AvatarSize, ButtonSize, ButtonType, ButtonVariant, CardVariant, CarouselArrowsPosition, CarouselProgressMode, ComboItem, ControlSize, CoverHeroContentPosition, CoverHeroVariant, DictionaryData, DividerOrientation, DividerSize, ExpandableListButtonAlign, ExpandableListStyle, InfoRevealPosition, InputStatus, InputType, LabelPosition, ListDividerType, ListSize, ListType, NavigationTabsOrientation, NavigationTabsSize, NotificationType, OffCanvasVariant, PocketStatus, PopoverPosition, SearchbarItem, SelectItem, Size, SkipToContentLink, SortDirection, ThemeVariant, ToastNotification, ToastNotificationPosition, ToastNotificationTransition, TransitionDirection, ZAriaAlertMode, ZChipType, ZDatePickerMode, ZFileUploadType, ZRangePickerMode, ZSectionTitleDividerPosition, ZTableRowExpandedType } from "./beans";
import { ListItem } from "./beans/index.js";
import { ZTypographyLevels } from "./deprecated/typography/z-typography/index";
export namespace Components {
    interface ZAlert {
        /**
          * alert variant type
         */
        "type": AlertType;
    }
    interface ZAnchorNavigation {
        /**
          * If enabled, the text of each anchor will be hidden unless for the current one or the one the user is hovering.
         */
        "hideUnselected": boolean;
    }
    interface ZAppHeader {
        /**
          * The opening state of the drawer.
         */
        "drawerOpen": boolean;
        /**
          * Control menu bar position in the header. - auto: the menu bar is positioned near the title - stack: the menu bar is positioned below the title - offcanvas: the menu bar is not displayed and a burger icon appears to open the offcanvas menu  **Optional**
         */
        "flow": "auto" | "stack" | "offcanvas";
        /**
          * Set the hero image source for the header. You can also use a slot="hero" node for advanced customisation. **Optional**
         */
        "hero": string;
        /**
          * Should place an overlay over the hero image. Useful for legibility purpose. **Optional**
         */
        "overlay": boolean;
        /**
          * Stuck mode for the header. You can programmatically set it using an IntersectionObserver. **Optional**
         */
        "stuck": boolean;
    }
    interface ZAppSwitcher {
        /**
          * theme variant, default 'dark'
         */
        "theme"?: ThemeVariant;
    }
    interface ZAriaAlert {
        /**
          * Aria live mode
         */
        "mode": ZAriaAlertMode;
    }
    interface ZAvatar {
        /**
          * [optional] Avatar background color
         */
        "backgroundColor"?: string;
        /**
          * [optional] Avatar image
         */
        "image"?: string;
        /**
          * [optional] Avatar size
         */
        "size"?: AvatarSize;
        /**
          * [optional] Avatar text
         */
        "text"?: string;
        /**
          * [optional] Avatar text color
         */
        "textColor"?: string;
    }
    interface ZBody {
        /**
          * HTML tag to use to wrap slotted content
         */
        "component": string;
        /**
          * Typography level
         */
        "level": 1 | 2 | 3 | 4 | 5;
        /**
          * Font weight variant
         */
        "variant": "regular" | "semibold";
    }
    interface ZButton {
        /**
          * defines a string value that labels an interactive element, used for accessibility.
         */
        "ariaLabel": string;
        /**
          * HTML button disabled attribute.
         */
        "disabled"?: boolean;
        /**
          * HTML <a> href attribute. If it is set, it renders an HTML <a> tag.
         */
        "href"?: string;
        /**
          * Identifier, should be unique.
         */
        "htmlid"?: string;
        /**
          * `z-icon` name to use (optional).
         */
        "icon"?: string;
        /**
          * HTML button name attribute.
         */
        "name"?: string;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ButtonSize;
        /**
          * HTML a target attribute.
         */
        "target"?: string;
        /**
          * HTML button type attribute.
         */
        "type"?: ButtonType;
        /**
          * Graphical variant: `primary`, `secondary`, `tertiary`. Defaults to `primary`.
         */
        "variant"?: ButtonVariant;
    }
    interface ZButtonSort {
        /**
          * id, should be unique
         */
        "buttonid": string;
        /**
          * occurrencies counter (optional)
         */
        "counter"?: number;
        /**
          * label content (descending)
         */
        "desclabel"?: string;
        /**
          * selected flag (optional)
         */
        "isselected"?: boolean;
        /**
          * label content (ascending)
         */
        "label": string;
        /**
          * sortable flag (optional)
         */
        "sortasc"?: boolean;
        /**
          * sort label content (ascending) (optional)
         */
        "sortlabelasc"?: string;
        /**
          * sort label content (descending) (optional)
         */
        "sortlabeldesc"?: string;
    }
    interface ZCard {
        /**
          * Enable click interactions on the card. Default: false
         */
        "clickable": boolean;
        /**
          * Name of the icon to place over the image cover
         */
        "coverIcon": string;
        /**
          * Enable shadow. Default: false.
         */
        "showshadow": boolean;
        /**
          * Card variant. Can be one of "text", "border", "shadow", "overlay". Leave it undefined for the default card.
         */
        "variant": CardVariant;
    }
    interface ZCarousel {
        /**
          * Arrow buttons position
         */
        "arrowsPosition"?: CarouselArrowsPosition;
        /**
          * The height of z-carousel ghost loading, this prop is mandatory when isloading is set to true, as otherwise the component won't show.
         */
        "ghostLoadingHeight": number;
        /**
          * The z-carousel is on loading state
         */
        "isLoading": boolean;
        /**
          * The z-carousel title, if given.
         */
        "label"?: string;
        /**
          * Progress indicator. Only available for `single` mode
         */
        "progressMode"?: CarouselProgressMode;
        /**
          * Shows only one content at a time
         */
        "single": boolean;
    }
    interface ZChip {
        /**
          * set z-chip as disabled
         */
        "disabled"?: boolean;
        /**
          * Non interactive icon
         */
        "icon"?: string;
        /**
          * z-chip interactive icon
         */
        "interactiveIcon"?: string;
        /**
          * z-chip size type, can be default, medium or small
         */
        "type"?: ZChipType;
    }
    interface ZCombobox {
        /**
          * check all label (optional)
         */
        "checkalltext"?: string;
        /**
          * close combobox list text
         */
        "closesearchtext"?: string;
        /**
          * the combobox is disabled
         */
        "disabled"?: boolean;
        /**
          * show "check all" checkbox (optional)
         */
        "hascheckall"?: boolean;
        /**
          * group items by category
         */
        "hasgroupitems"?: boolean;
        /**
          * show search input flag (optional)
         */
        "hassearch"?: boolean;
        /**
          * input unique id
         */
        "inputid": string;
        /**
          * fixed style flag
         */
        "isfixed": boolean;
        /**
          * toggle combo list opening flag
         */
        "isopen": boolean;
        /**
          * list items array
         */
        "items": ComboItem[] | string;
        /**
          * label text
         */
        "label": string;
        /**
          * max number of checkable items (0 = unlimited)
         */
        "maxcheckableitems": number;
        /**
          * no result text message
         */
        "noresultslabel"?: string;
        /**
          * search input label text (optional)
         */
        "searchlabel"?: string;
        /**
          * search input placeholder text (optional)
         */
        "searchplaceholder"?: string;
        /**
          * search input title text (optional)
         */
        "searchtitle"?: string;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ControlSize;
        /**
          * uncheck all label (optional)
         */
        "uncheckalltext"?: string;
    }
    interface ZContextualMenu {
        /**
          * [optional] Sets text color of ZContextualMenu's content
         */
        "color"?: string;
        /**
          * Elements of ZContextualMenu
         */
        "elements"?: string;
        /**
          * [optional] Sets the position of the popover
         */
        "popoverPosition"?: PopoverPosition;
    }
    interface ZCoverHero {
        /**
          * Vertical content position (for `STACKED` variant).
         */
        "contentPosition": CoverHeroContentPosition;
        /**
          * Whether to keep the image aspect ratio. If set to `false`, the cssprop `--cover-hero-aspect-ratio` will not affect the component's size; instead, the height of the component follows the content's one. Note: it may be necessary to set a min and/or max height to the component.
         */
        "preserveAspectRatio": boolean;
        /**
          * Cover hero variant. Can be `OVERLAY` or `STACKED`.
         */
        "variant": CoverHeroVariant;
    }
    interface ZDatePicker {
        /**
          * z-input aria label
         */
        "ariaLabel": string;
        /**
          * unique id
         */
        "datePickerId": string;
        /**
          * z-input label
         */
        "label"?: string;
        /**
          * [Optional] datepicker mode: date, datetime, only months
         */
        "mode": ZDatePickerMode;
    }
    interface ZDivider {
        /**
          * [optional] Divider color
         */
        "color"?: string;
        /**
          * [optional] Divider orintation
         */
        "orientation"?: DividerOrientation;
        /**
          * [optional] Divider size
         */
        "size"?: DividerSize;
    }
    interface ZDragdropArea {
    }
    interface ZFile {
        /**
          * File name
         */
        "fileName": string;
        /**
          * File chip id
         */
        "fileNumber": number;
    }
    interface ZFileUpload {
        /**
          * Prop indicating the accepted file type: ex ".pdf, .doc, .jpg"
         */
        "acceptedFormat"?: string;
        /**
          * Prop indicating the button variant
         */
        "buttonVariant"?: ButtonVariant;
        /**
          * Description
         */
        "description"?: string;
        /**
          * Max file dimension in Megabyte
         */
        "fileMaxSize"?: number;
        /**
          * get array of uploaded files
         */
        "getFiles": () => Promise<File[]>;
        /**
          * Title
         */
        "mainTitle"?: string;
        /**
          * Prop indicating the file upload type - can be default or dragdrop
         */
        "type": ZFileUploadType;
    }
    interface ZGhostLoading {
    }
    interface ZHeading {
        /**
          * HTML tag to use to wrap slotted content
         */
        "component": string;
        /**
          * Typography level
         */
        "level": 1 | 2 | 3 | 4;
        /**
          * Font weight variant
         */
        "variant": "regular" | "semibold" | "light";
    }
    interface ZIcon {
        /**
          * icon fill (optional)
         */
        "fill"?: string;
        /**
          * icon height (optional)
         */
        "height"?: number;
        /**
          * icon id (optional)
         */
        "iconid"?: string;
        /**
          * icon name
         */
        "name": string;
        /**
          * icon width (optional)
         */
        "width"?: number;
    }
    interface ZInfoBox {
        /**
          * info box unique id
         */
        "boxid": string;
        /**
          * render close icon flag
         */
        "isclosable": boolean;
    }
    interface ZInfoReveal {
        /**
          * Name of the icon for the open button
         */
        "icon"?: string;
        /**
          * Text that appears on closed panel next to the open button.
         */
        "label"?: string;
        /**
          * Info reveal's position
         */
        "position"?: InfoRevealPosition;
    }
    interface ZInput {
        /**
          * the input aria-label
         */
        "ariaLabel": string;
        /**
          * the input has autocomplete option (optional): available for text, password, number, email
         */
        "autocomplete"?: string;
        /**
          * checked: available for checkbox, radio
         */
        "checked"?: boolean;
        /**
          * the input is disabled
         */
        "disabled"?: boolean;
        /**
          * render clear icon when typing (optional): available for text
         */
        "hasclearicon"?: boolean;
        /**
          * the id of the input element
         */
        "htmlid": string;
        /**
          * the input html title (optional)
         */
        "htmltitle"?: string;
        /**
          * render icon (optional): available for text
         */
        "icon"?: string;
        /**
          * get checked status
         */
        "isChecked": () => Promise<boolean>;
        /**
          * the input label
         */
        "label"?: string;
        /**
          * the input label position: available for checkbox, radio
         */
        "labelPosition"?: LabelPosition;
        /**
          * max number value (optional): available for number
         */
        "max"?: number;
        /**
          * input helper message (optional): available for text, password, number, email, textarea - if set to `false` message won't be displayed
         */
        "message"?: string | boolean;
        /**
          * min number value (optional): available for number
         */
        "min"?: number;
        /**
          * the input name
         */
        "name"?: string;
        /**
          * pattern value (optional): available for tel, text, search, url, email, password
         */
        "pattern"?: string;
        /**
          * the input placeholder (optional)
         */
        "placeholder"?: string;
        /**
          * the input is readonly
         */
        "readonly"?: boolean;
        /**
          * the input is required (optional): available for text, password, number, email, textarea, checkbox
         */
        "required"?: boolean;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ControlSize;
        /**
          * the input status (optional): available for text, password, number, email, textarea
         */
        "status"?: InputStatus;
        /**
          * step number value (optional): available for number
         */
        "step"?: number;
        /**
          * input types
         */
        "type": InputType;
        /**
          * the input value
         */
        "value"?: string;
    }
    interface ZInputMessage {
        /**
          * input helper message
         */
        "message": string;
        /**
          * input status (optional)
         */
        "status"?: InputStatus;
    }
    interface ZLink {
        /**
          * big link version
         */
        "big"?: boolean;
        /**
          * link url (optional)
         */
        "href"?: string;
        /**
          * link id (optional)
         */
        "htmlid"?: string;
        /**
          * tabindex link attribute (optional)
         */
        "htmltabindex"?: number;
        /**
          * link icon name (optional)
         */
        "icon"?: string;
        /**
          * link icon position (optional)
         */
        "iconposition"?: "left" | "right";
        /**
          * active link flag (optional)
         */
        "isactive"?: boolean;
        /**
          * disable link flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * white variant flag (optional)
         */
        "iswhite"?: boolean;
        /**
          * link target (optional)
         */
        "target"?: string;
        /**
          * link text variant (optional)
         */
        "textcolor"?: "primary" | "inverse" | "white" | "black";
        /**
          * draw underline on text (optional)
         */
        "underline"?: boolean;
    }
    interface ZList {
        /**
          * [optional] type of the list marker for each element
         */
        "listType"?: ListType;
        /**
          * [optional] Sets size of inside elements.
         */
        "size"?: ListSize;
    }
    interface ZListElement {
        /**
          * [optional] Align expandable button left or right.
         */
        "alignButton"?: ExpandableListButtonAlign;
        /**
          * [optional] Sets element clickable.
         */
        "clickable"?: boolean;
        /**
          * [optional] Sets text color of the element.
         */
        "color"?: string;
        /**
          * [optional] Sets disabled style of the element.
         */
        "disabled"?: boolean;
        /**
          * [optional] Sets the divider color.
         */
        "dividerColor"?: string;
        /**
          * [optional] Sets the divider size.
         */
        "dividerSize"?: DividerSize;
        /**
          * [optional] Sets the position where to insert the divider.
         */
        "dividerType"?: ListDividerType;
        /**
          * [optional] Sets element as expandable.
         */
        "expandable"?: boolean;
        /**
          * [optional] Sets expandable style to element.
         */
        "expandableStyle"?: ExpandableListStyle;
        /**
          * [optional] If is used in ZContextualMenu component
         */
        "isContextualMenu"?: boolean;
        /**
          * [optional] List element id.
         */
        "listElementId"?: number;
        /**
          * [optional] position of the list element inside the list or the group
         */
        "listElementPosition"?: string;
        /**
          * [optional] type of the list marker for each element
         */
        "listType"?: ListType;
        /**
          * [optional] Sets size of inside elements.
         */
        "size"?: ListSize;
    }
    interface ZListGroup {
        /**
          * [optional] Sets the divider color.
         */
        "dividerColor"?: string;
        /**
          * [optional] Sets the divider size.
         */
        "dividerSize"?: DividerSize;
        /**
          * [optional] Sets the position where to insert the divider.
         */
        "dividerType"?: ListDividerType;
        /**
          * [optional] type of the list marker for each element
         */
        "listType"?: ListType;
        /**
          * [optional] Sets size of inside elements.
         */
        "size"?: ListSize;
    }
    interface ZLogo {
        /**
          * image height
         */
        "height"?: number;
        /**
          * alternative image text
         */
        "imageAlt"?: string;
        /**
          * link url (optional)
         */
        "link"?: string;
        /**
          * if true, the mobile logo is displayed, otherwise the desktop one
         */
        "mobileLogo"?: boolean;
        /**
          * link target: true means _blank, false means _self
         */
        "targetBlank"?: boolean;
        /**
          * image width
         */
        "width"?: number;
    }
    interface ZMenu {
        /**
          * Flag to set the active status of the menu.
         */
        "active"?: boolean;
        /**
          * Flag to set the display mode of the list. If true, the list will be absolutely positioned under the menu label, stacked beneath it otherwise.
          * @default false
         */
        "floating"?: boolean;
        /**
          * The opening state of the menu.
          * @default false
         */
        "open": boolean;
    }
    interface ZMenuSection {
        /**
          * Active state
         */
        "active"?: boolean;
    }
    interface ZMessagesPocket {
        /**
          * number of messages
         */
        "messages": number;
        /**
          * pocket id
         */
        "pocketid": string;
        /**
          * pocket status
         */
        "status": PocketStatus;
    }
    interface ZModal {
        /**
          * add role "alertdialog" to dialog (optional, default is false)
         */
        "alertdialog"?: boolean;
        /**
          * close modal
         */
        "close": () => Promise<void>;
        /**
          * aria-label for close button (optional)
         */
        "closeButtonLabel": string;
        /**
          * unique id
         */
        "modalid": string;
        /**
          * subtitle (optional)
         */
        "modalsubtitle"?: string;
        /**
          * title text (optional)
         */
        "modaltitle"?: string;
        /**
          * open modal
         */
        "open": () => Promise<void>;
    }
    interface ZMyzCard {
        /**
          * graphic variant (optional)
         */
        "cardtype"?: LicenseType;
        /**
          * faded status
         */
        "faded": boolean;
        /**
          * highlighted status
         */
        "ishighlighted": boolean;
        /**
          * pressed status
         */
        "ispressed": boolean;
    }
    interface ZMyzCardAlert {
        /**
          * action button text
         */
        "actiontext"?: string;
        /**
          * content text
         */
        "contenttext": string;
        /**
          * icon name
         */
        "iconname": string;
        /**
          * alert variant type
         */
        "type": string;
    }
    interface ZMyzCardBody {
    }
    interface ZMyzCardCover {
        /**
          * default error image source
         */
        "defaultimg": string;
        /**
          * faded status
         */
        "faded": boolean;
        /**
          * image source
         */
        "img": string;
        /**
          * cover alt title
         */
        "titolo": string;
    }
    interface ZMyzCardDictionary {
        /**
          * card cover
         */
        "cover": string;
        /**
          * card is disabled
         */
        "disabled": boolean;
        /**
          * flip button label
         */
        "flipbuttonlabel": string;
        /**
          * card is flipped
         */
        "flipped": boolean;
        /**
          * hide info button
         */
        "hideinfobtn": boolean;
        /**
          * card title
         */
        "name": string;
    }
    interface ZMyzCardFooter {
        /**
          * authors name text
         */
        "autori": string;
        /**
          * card graphic variant (optional)
         */
        "cardtype"?: LicenseType;
        /**
          * display footer custom slotted content
         */
        "customContent": boolean;
        /**
          * faded status
         */
        "faded": boolean;
        /**
          * volume isbn
         */
        "isbn": string;
        /**
          * footer opened by default (optional)
         */
        "opened"?: boolean;
        /**
          * volume title
         */
        "titolo": string;
    }
    interface ZMyzCardFooterSections {
    }
    interface ZMyzCardHeader {
        /**
          * card graphic variant (optional)
         */
        "cardtype"?: LicenseType;
        /**
          * faded status
         */
        "faded": boolean;
        /**
          * volume title
         */
        "titolo": string;
    }
    interface ZMyzCardIcon {
        /**
          * description of the icon
         */
        "ariaLabel": string;
        /**
          * icon name
         */
        "icon": string;
        /**
          * disabled status flag
         */
        "isdisabled": boolean;
    }
    interface ZMyzCardInfo {
        /**
          * dictionary info
         */
        "data": string | DictionaryData;
        /**
          * tabindex link attribute (optional)
         */
        "htmltabindex"?: number;
    }
    interface ZMyzCardList {
        /**
          * list data stringified array
         */
        "listdata": string;
    }
    interface ZMyzList {
        /**
          * json stringified list data (mutable, optional)
         */
        "inputrawdata"?: string;
        /**
          * list item data (mutable, optional)
         */
        "list"?: ListItem[];
    }
    interface ZMyzListItem {
        /**
          * data-action attribute (optional)
         */
        "action"?: string;
        /**
          * icon name (optional)
         */
        "icon"?: string;
        /**
          * link url (optional)
         */
        "link"?: string;
        /**
          * link target (optional)
         */
        "linktarget"?: string;
        /**
          * id (optional)
         */
        "listitemid"?: string;
        /**
          * content text
         */
        "text": string;
        /**
          * underlined style flag
         */
        "underlined": boolean;
    }
    interface ZNavigationTab {
        /**
          * Whether the tab is disabled.
         */
        "disabled"?: boolean;
        /**
          * Html `title` attribute for the button.
         */
        "htmlTitle": string;
        /**
          * Name of the icon to use. The `filled` version will be automatically used (if found) when the tab is `selected`.
         */
        "icon": string;
        /**
          * Label to show in the tab.
         */
        "label": string;
        /**
          * Tab orientation. Do not set this manually: `z-navigation-tabs` will handle this.
         */
        "orientation": NavigationTabsOrientation;
        /**
          * Whether the tab is selected.
         */
        "selected"?: boolean;
        /**
          * Tab size. Do not set this manually: `z-navigation-tabs` will handle this.
         */
        "size": NavigationTabsSize;
    }
    interface ZNavigationTabLink {
        /**
          * Whether the tab is disabled.
         */
        "disabled"?: boolean;
        /**
          * Url to set to the anchor element.
         */
        "href": string;
        /**
          * Html title attribute for the anchor element.
         */
        "htmlTitle": string;
        /**
          * Name of the icon to use. The `filled` version will be automatically used (if found) when the tab is `selected`.
         */
        "icon": string;
        /**
          * Label to show in the tab.
         */
        "label": string;
        /**
          * Tab orientation. Do not set this manually: `z-navigation-tabs` will handle this.
         */
        "orientation": NavigationTabsOrientation;
        /**
          * Whether the tab is selected.
         */
        "selected"?: boolean;
        /**
          * Tab size. Do not set this manually: `z-navigation-tabs` will handle this.
         */
        "size": NavigationTabsSize;
        /**
          * Html `target` attribute for the anchor element.
         */
        "target": string;
    }
    interface ZNavigationTabs {
        /**
          * Navigation tabs orientation.
         */
        "orientation"?: NavigationTabsOrientation;
        /**
          * Navigation tabs size.
         */
        "size"?: NavigationTabsSize;
    }
    interface ZNotification {
        /**
          * Action button text
         */
        "actiontext"?: string;
        /**
          * Name of the icon on the left of the content
         */
        "contenticonname"?: string;
        /**
          * Enable close icon
         */
        "showclose"?: boolean;
        /**
          * Enable shadow.
          * @deprecated shadow is available only for the `sticky` version of the notification.
         */
        "showshadow"?: boolean;
        /**
          * Enable sticky notification bar.
         */
        "sticky"?: boolean;
        /**
          * Alert variant type
         */
        "type": NotificationType;
    }
    interface ZOffcanvas {
        /**
          * open component. Default: false
         */
        "open": boolean;
        /**
          * open content transitioning in a specified direction left | right. Default: left
         */
        "transitiondirection"?: TransitionDirection;
        /**
          * Offcanvas variant. Can be one of "overlay", "pushcontent" Default variant: pushcontent
         */
        "variant"?: OffCanvasVariant;
    }
    interface ZOtp {
        /**
          * Input number
         */
        "inputNum"?: number;
        /**
          * Input message
         */
        "message"?: string;
        /**
          * Input status
         */
        "status"?: InputStatus;
    }
    interface ZPagination {
        /**
          * Current page.
         */
        "currentPage": number;
        /**
          * Enable buttons to go to the first and last pages.
         */
        "edges": boolean;
        /**
          * Whether to show "go to page" feature.
         */
        "goToPage": boolean;
        /**
          * Pagination label placed before the bar.
         */
        "label"?: string;
        /**
          * Enable navigation arrows.
         */
        "navArrows": boolean;
        /**
          * Number of pages to skip.
         */
        "skip": number;
        /**
          * Number of pages to show left/right of the current, before showing "load more" symbol (…).
         */
        "split"?: number;
        /**
          * Total number of pages. Required.
         */
        "totalPages": number;
        /**
          * Number of pages to show at a time. If not set, all pages will be shown.
         */
        "visiblePages"?: number;
    }
    interface ZPanelElem {
        /**
          * name of slot container (optional)
         */
        "descrSlotName"?: string;
        /**
          * html element id (optional)
         */
        "elemid"?: string;
        /**
          * alternative image text (optional)
         */
        "imgalt"?: string;
        /**
          * image url source (optional)
         */
        "imgurl"?: string;
        /**
          * disabled status flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * icon link name (optional)
         */
        "linkicon"?: string;
        /**
          * link label text
         */
        "linklabel": string;
        /**
          * link target (optional)
         */
        "target"?: string;
        /**
          * link url
         */
        "url": string;
    }
    interface ZPocket {
        /**
          * close z-pocket
         */
        "close": () => Promise<void>;
        /**
          * open z-pocket
         */
        "open": () => Promise<void>;
        /**
          * pocket id
         */
        "pocketid": string;
        /**
          * pocket status
         */
        "status": PocketStatus;
    }
    interface ZPocketBody {
        /**
          * pocket id
         */
        "pocketid": string;
        /**
          * pocket status
         */
        "status": PocketStatus;
    }
    interface ZPocketHeader {
        /**
          * pocket id
         */
        "pocketid": string;
    }
    interface ZPocketMessage {
    }
    interface ZPopover {
        /**
          * The selector or the element bound with the popover.
         */
        "bindTo"?: string | HTMLElement;
        /**
          * Whether to center the popup on the main side (according to "position").
         */
        "center": boolean;
        /**
          * Whether the popover should be closed when the user clicks outside of it or hit "ESC".
         */
        "closable": boolean;
        /**
          * The open state of the popover.
         */
        "open": boolean;
        /**
          * Popover position.
         */
        "position": PopoverPosition;
        /**
          * Whether to show popover's arrow.
         */
        "showArrow": boolean;
    }
    interface ZRangePicker {
        /**
          * first z-input aria label
         */
        "firstAriaLabel"?: string;
        /**
          * first z-input label
         */
        "firstLabel"?: string;
        /**
          * [Optional] datepicker mode: date or datetime
         */
        "mode": ZRangePickerMode;
        /**
          * unique id
         */
        "rangePickerId": string;
        /**
          * second z-input aria label
         */
        "secondAriaLabel"?: string;
        /**
          * second z-input label
         */
        "secondLabel"?: string;
    }
    interface ZSearchbar {
        /**
          * Show autocomplete results
         */
        "autocomplete"?: boolean;
        /**
          * Minimun number of characters to dispatch typing event
         */
        "autocompleteMinChars"?: number;
        /**
          * the id of the searchbar element
         */
        "htmlid": string;
        /**
          * Search input placeholder
         */
        "placeholder"?: string;
        /**
          * Prevent submit action
         */
        "preventSubmit"?: boolean;
        /**
          * Number of results shown - default all
         */
        "resultsCount"?: number;
        /**
          * Truncate results to single row
         */
        "resultsEllipsis"?: boolean;
        /**
          * Autocomplete results items
         */
        "resultsItems"?: SearchbarItem[] | string;
        /**
          * Search helper text
         */
        "searchHelperLabel"?: string;
        /**
          * Show submit button
         */
        "showSearchButton"?: boolean;
        /**
          * Sort autocomplete results items
         */
        "sortResultsItems"?: boolean;
        /**
          * Input search string
         */
        "value"?: string;
    }
    interface ZSectionTitle {
        /**
          * Divider position for the primary title. This prop only works if the secondary title is not set.
         */
        "dividerPosition": ZSectionTitleDividerPosition;
        /**
          * Whether the primary title text is uppercase.
         */
        "uppercase": boolean;
    }
    interface ZSelect {
        /**
          * the input aria-label
         */
        "ariaLabel": string;
        /**
          * the input has autocomplete option
         */
        "autocomplete"?: boolean;
        /**
          * the input is disabled
         */
        "disabled"?: boolean;
        /**
          * get the input selected options
         */
        "getSelectedItem": () => Promise<SelectItem>;
        /**
          * get the input value
         */
        "getValue": () => Promise<string>;
        "hasGroupItems"?: boolean;
        /**
          * the id of the input element
         */
        "htmlid": string;
        /**
          * the input html title (optional)
         */
        "htmltitle"?: string;
        /**
          * When fixed, it occupies space and pushes down next elements.
         */
        "isfixed"?: boolean;
        /**
          * the input select options
         */
        "items": SelectItem[] | string;
        /**
          * the input label
         */
        "label"?: string;
        /**
          * input helper message (optional) - if set to `false` message won't be displayed
         */
        "message"?: string | boolean;
        /**
          * the input name
         */
        "name"?: string;
        /**
          * no result text message
         */
        "noresultslabel"?: string;
        /**
          * the input placeholder (optional)
         */
        "placeholder"?: string;
        /**
          * the input is readonly
         */
        "readonly"?: boolean;
        "resetItem"?: string;
        /**
          * set the input value
         */
        "setValue": (value: string | string[]) => Promise<void>;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ControlSize;
        /**
          * the input status (optional)
         */
        "status"?: InputStatus;
    }
    interface ZSkipToContent {
        /**
          * Array to fill link into skip-content
         */
        "links": string | SkipToContentLink[];
        /**
          * Graphical variant: `dark`, `light`.
         */
        "variant"?: ThemeVariant;
    }
    interface ZSlideshow {
        /**
          * array or JSON stringified images urls
         */
        "data": string[] | string;
        /**
          * slideshow id
         */
        "slideshowid": string;
    }
    interface ZStepper {
    }
    interface ZStepperItem {
        /**
          * The disabled state of the item.
         */
        "disabled": boolean;
        /**
          * The href to navigate on click.
         */
        "href": string;
        /**
          * The number of the step item.
         */
        "index": number;
        /**
          * The pressed state of the item.
         */
        "pressed": boolean;
    }
    interface ZTable {
        /**
          * Sets table with border
         */
        "bordered"?: boolean;
        /**
          * Sets call to action label
         */
        "callToActionLabel"?: string;
        /**
          * Sets call to action label
         */
        "callToActionTwoLabel"?: string;
        /**
          * Sets first column sticky
         */
        "columnSticky"?: boolean;
        /**
          * Sets empty table
         */
        "empty"?: boolean;
        /**
          * Set error status
         */
        "error"?: boolean;
        /**
          * Set error status
         */
        "errorLink"?: string;
        /**
          * Error message
         */
        "errorMessage"?: string;
        /**
          * Sets header sticky
         */
        "headerSticky"?: boolean;
        /**
          * Number of lines of element
         */
        "lines"?: number;
        /**
          * Set message
         */
        "message"?: string;
        /**
          * Set subtitle
         */
        "subtitle"?: string;
    }
    interface ZTableBody {
    }
    interface ZTableCell {
        /**
          * Set padding size of cell, if special 0px padding will be set
         */
        "padding": Size;
        /**
          * [Optional] Show contextual menu button
         */
        "showButton"?: boolean;
    }
    interface ZTableEmptyBox {
        /**
          * Sets main title message
         */
        "message"?: string;
        /**
          * Sets message
         */
        "subtitle"?: string;
    }
    interface ZTableExpandedRow {
        /**
          * Number table column plus 1 for the expand button
         */
        "colSpan": number;
    }
    interface ZTableFooter {
    }
    interface ZTableHead {
    }
    interface ZTableHeader {
        /**
          * Column ID
         */
        "columnId": string;
        /**
          * [Optional] Default sort order
         */
        "defaultSortDirection"?: SortDirection;
        /**
          * Set padding size of cell, if special 0px padding will be set
         */
        "padding": Size;
        /**
          * [Optional] Show contextual menu button
         */
        "showButton"?: boolean;
        /**
          * Sort direction
         */
        "sortDirection": SortDirection;
        /**
          * [Optional] Make the header sortable
         */
        "sortable"?: boolean;
    }
    interface ZTableHeaderRow {
        /**
          * Row expandable flag
         */
        "expandable"?: boolean;
    }
    interface ZTableRow {
        /**
          * Table row expanded type
         */
        "expandedType": ZTableRowExpandedType;
    }
    interface ZTableStickyFooter {
    }
    interface ZTag {
        /**
          * [optional] Hide the text and show it on hover
         */
        "expandable"?: boolean;
        /**
          * [optional] Tag icon
         */
        "icon"?: string;
    }
    interface ZToastNotification {
        /**
          * toast notification closing timeout (ms)
         */
        "autoclose"?: number;
        /**
          * toggles closing button rendering
         */
        "closebutton": boolean;
        /**
          * toast notification draggable percentage
         */
        "draggablepercentage"?: number;
        /**
          * toast notification's title
         */
        "heading"?: string;
        /**
          * toast notification can be draggable
         */
        "isdraggable"?: boolean;
        /**
          * toast notification's message
         */
        "message": string;
        /**
          * toast notification autoclose can be paused
         */
        "pauseonfocusloss"?: boolean;
        /**
          * toast notification animation type: slide-in-left, slide-in-right, slide-in-down, slide-in-up
         */
        "transition"?: ToastNotificationTransition;
        /**
          * toast notification type:  dark, light, accent, error, success, warning
         */
        "type"?: ToastNotification;
    }
    interface ZToastNotificationList {
        /**
          * Set the entry position of new notification in the list
         */
        "newestontop"?: boolean;
        /**
          * Set the position of toast notification list - top-left, top-centre, top-right, bottom-left, bottom-centre, bottom-right
         */
        "position": ToastNotificationPosition;
    }
    interface ZToggleButton {
        /**
          * avoidclick status flag
         */
        "avoidclick": boolean;
        /**
          * disabled status flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * label text
         */
        "label": string;
        /**
          * open by default (optional)
         */
        "opened"?: boolean;
    }
    interface ZToggleSwitch {
        /**
          * Checked state
         */
        "checked"?: boolean;
        /**
          * Disabled flag
         */
        "disabled"?: boolean;
        /**
          * HTML id attribute to set to the internal checkbox
         */
        "htmlid": string;
        /**
          * Label position
         */
        "labelPosition"?: LabelPosition;
    }
    interface ZTooltip {
        /**
          * The selector or the element bound with the tooltip.
         */
        "bindTo"?: string | HTMLElement;
        /**
          * Enable tooltip dark mode.
         */
        "dark": boolean;
        /**
          * The open state of the tooltip.
         */
        "open": boolean;
        /**
          * Tooltip position.
         */
        "position": PopoverPosition;
    }
    interface ZTypography {
        /**
          * HTML tag to use to wrap slotted content
         */
        "component": string;
        /**
          * Typography level
         */
        "level": ZTypographyLevels;
        /**
          * Font weight variant
         */
        "variant": "regular" | "semibold" | "light";
    }
    interface ZVisuallyHidden {
    }
}
export interface ZAppHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZAppHeaderElement;
}
export interface ZAppSwitcherCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZAppSwitcherElement;
}
export interface ZButtonSortCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZButtonSortElement;
}
export interface ZCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZCardElement;
}
export interface ZCarouselCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZCarouselElement;
}
export interface ZChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZChipElement;
}
export interface ZComboboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZComboboxElement;
}
export interface ZContextualMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZContextualMenuElement;
}
export interface ZDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZDatePickerElement;
}
export interface ZDragdropAreaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZDragdropAreaElement;
}
export interface ZFileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZFileElement;
}
export interface ZFileUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZFileUploadElement;
}
export interface ZInfoBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZInfoBoxElement;
}
export interface ZInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZInputElement;
}
export interface ZLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZLinkElement;
}
export interface ZListElementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZListElementElement;
}
export interface ZMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZMenuElement;
}
export interface ZMenuSectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZMenuSectionElement;
}
export interface ZModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZModalElement;
}
export interface ZMyzCardAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZMyzCardAlertElement;
}
export interface ZMyzCardDictionaryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZMyzCardDictionaryElement;
}
export interface ZMyzCardInfoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZMyzCardInfoElement;
}
export interface ZMyzListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZMyzListItemElement;
}
export interface ZNavigationTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZNavigationTabElement;
}
export interface ZNavigationTabLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZNavigationTabLinkElement;
}
export interface ZNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZNotificationElement;
}
export interface ZOffcanvasCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZOffcanvasElement;
}
export interface ZOtpCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZOtpElement;
}
export interface ZPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZPaginationElement;
}
export interface ZPocketCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZPocketElement;
}
export interface ZPocketHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZPocketHeaderElement;
}
export interface ZPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZPopoverElement;
}
export interface ZRangePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZRangePickerElement;
}
export interface ZSearchbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZSearchbarElement;
}
export interface ZSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZSelectElement;
}
export interface ZTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZTableElement;
}
export interface ZTableHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZTableHeaderElement;
}
export interface ZTableRowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZTableRowElement;
}
export interface ZToastNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZToastNotificationElement;
}
export interface ZToggleButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZToggleButtonElement;
}
export interface ZToggleSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZToggleSwitchElement;
}
declare global {
    interface HTMLZAlertElement extends Components.ZAlert, HTMLStencilElement {
    }
    var HTMLZAlertElement: {
        prototype: HTMLZAlertElement;
        new (): HTMLZAlertElement;
    };
    interface HTMLZAnchorNavigationElement extends Components.ZAnchorNavigation, HTMLStencilElement {
    }
    var HTMLZAnchorNavigationElement: {
        prototype: HTMLZAnchorNavigationElement;
        new (): HTMLZAnchorNavigationElement;
    };
    interface HTMLZAppHeaderElement extends Components.ZAppHeader, HTMLStencilElement {
    }
    var HTMLZAppHeaderElement: {
        prototype: HTMLZAppHeaderElement;
        new (): HTMLZAppHeaderElement;
    };
    interface HTMLZAppSwitcherElement extends Components.ZAppSwitcher, HTMLStencilElement {
    }
    var HTMLZAppSwitcherElement: {
        prototype: HTMLZAppSwitcherElement;
        new (): HTMLZAppSwitcherElement;
    };
    interface HTMLZAriaAlertElement extends Components.ZAriaAlert, HTMLStencilElement {
    }
    var HTMLZAriaAlertElement: {
        prototype: HTMLZAriaAlertElement;
        new (): HTMLZAriaAlertElement;
    };
    interface HTMLZAvatarElement extends Components.ZAvatar, HTMLStencilElement {
    }
    var HTMLZAvatarElement: {
        prototype: HTMLZAvatarElement;
        new (): HTMLZAvatarElement;
    };
    interface HTMLZBodyElement extends Components.ZBody, HTMLStencilElement {
    }
    var HTMLZBodyElement: {
        prototype: HTMLZBodyElement;
        new (): HTMLZBodyElement;
    };
    interface HTMLZButtonElement extends Components.ZButton, HTMLStencilElement {
    }
    var HTMLZButtonElement: {
        prototype: HTMLZButtonElement;
        new (): HTMLZButtonElement;
    };
    interface HTMLZButtonSortElement extends Components.ZButtonSort, HTMLStencilElement {
    }
    var HTMLZButtonSortElement: {
        prototype: HTMLZButtonSortElement;
        new (): HTMLZButtonSortElement;
    };
    interface HTMLZCardElement extends Components.ZCard, HTMLStencilElement {
    }
    var HTMLZCardElement: {
        prototype: HTMLZCardElement;
        new (): HTMLZCardElement;
    };
    interface HTMLZCarouselElement extends Components.ZCarousel, HTMLStencilElement {
    }
    var HTMLZCarouselElement: {
        prototype: HTMLZCarouselElement;
        new (): HTMLZCarouselElement;
    };
    interface HTMLZChipElement extends Components.ZChip, HTMLStencilElement {
    }
    var HTMLZChipElement: {
        prototype: HTMLZChipElement;
        new (): HTMLZChipElement;
    };
    interface HTMLZComboboxElement extends Components.ZCombobox, HTMLStencilElement {
    }
    var HTMLZComboboxElement: {
        prototype: HTMLZComboboxElement;
        new (): HTMLZComboboxElement;
    };
    interface HTMLZContextualMenuElement extends Components.ZContextualMenu, HTMLStencilElement {
    }
    var HTMLZContextualMenuElement: {
        prototype: HTMLZContextualMenuElement;
        new (): HTMLZContextualMenuElement;
    };
    interface HTMLZCoverHeroElement extends Components.ZCoverHero, HTMLStencilElement {
    }
    var HTMLZCoverHeroElement: {
        prototype: HTMLZCoverHeroElement;
        new (): HTMLZCoverHeroElement;
    };
    interface HTMLZDatePickerElement extends Components.ZDatePicker, HTMLStencilElement {
    }
    var HTMLZDatePickerElement: {
        prototype: HTMLZDatePickerElement;
        new (): HTMLZDatePickerElement;
    };
    interface HTMLZDividerElement extends Components.ZDivider, HTMLStencilElement {
    }
    var HTMLZDividerElement: {
        prototype: HTMLZDividerElement;
        new (): HTMLZDividerElement;
    };
    interface HTMLZDragdropAreaElement extends Components.ZDragdropArea, HTMLStencilElement {
    }
    var HTMLZDragdropAreaElement: {
        prototype: HTMLZDragdropAreaElement;
        new (): HTMLZDragdropAreaElement;
    };
    interface HTMLZFileElement extends Components.ZFile, HTMLStencilElement {
    }
    var HTMLZFileElement: {
        prototype: HTMLZFileElement;
        new (): HTMLZFileElement;
    };
    interface HTMLZFileUploadElement extends Components.ZFileUpload, HTMLStencilElement {
    }
    var HTMLZFileUploadElement: {
        prototype: HTMLZFileUploadElement;
        new (): HTMLZFileUploadElement;
    };
    interface HTMLZGhostLoadingElement extends Components.ZGhostLoading, HTMLStencilElement {
    }
    var HTMLZGhostLoadingElement: {
        prototype: HTMLZGhostLoadingElement;
        new (): HTMLZGhostLoadingElement;
    };
    interface HTMLZHeadingElement extends Components.ZHeading, HTMLStencilElement {
    }
    var HTMLZHeadingElement: {
        prototype: HTMLZHeadingElement;
        new (): HTMLZHeadingElement;
    };
    interface HTMLZIconElement extends Components.ZIcon, HTMLStencilElement {
    }
    var HTMLZIconElement: {
        prototype: HTMLZIconElement;
        new (): HTMLZIconElement;
    };
    interface HTMLZInfoBoxElement extends Components.ZInfoBox, HTMLStencilElement {
    }
    var HTMLZInfoBoxElement: {
        prototype: HTMLZInfoBoxElement;
        new (): HTMLZInfoBoxElement;
    };
    interface HTMLZInfoRevealElement extends Components.ZInfoReveal, HTMLStencilElement {
    }
    var HTMLZInfoRevealElement: {
        prototype: HTMLZInfoRevealElement;
        new (): HTMLZInfoRevealElement;
    };
    interface HTMLZInputElement extends Components.ZInput, HTMLStencilElement {
    }
    var HTMLZInputElement: {
        prototype: HTMLZInputElement;
        new (): HTMLZInputElement;
    };
    interface HTMLZInputMessageElement extends Components.ZInputMessage, HTMLStencilElement {
    }
    var HTMLZInputMessageElement: {
        prototype: HTMLZInputMessageElement;
        new (): HTMLZInputMessageElement;
    };
    interface HTMLZLinkElement extends Components.ZLink, HTMLStencilElement {
    }
    var HTMLZLinkElement: {
        prototype: HTMLZLinkElement;
        new (): HTMLZLinkElement;
    };
    interface HTMLZListElement extends Components.ZList, HTMLStencilElement {
    }
    var HTMLZListElement: {
        prototype: HTMLZListElement;
        new (): HTMLZListElement;
    };
    interface HTMLZListElementElement extends Components.ZListElement, HTMLStencilElement {
    }
    var HTMLZListElementElement: {
        prototype: HTMLZListElementElement;
        new (): HTMLZListElementElement;
    };
    interface HTMLZListGroupElement extends Components.ZListGroup, HTMLStencilElement {
    }
    var HTMLZListGroupElement: {
        prototype: HTMLZListGroupElement;
        new (): HTMLZListGroupElement;
    };
    interface HTMLZLogoElement extends Components.ZLogo, HTMLStencilElement {
    }
    var HTMLZLogoElement: {
        prototype: HTMLZLogoElement;
        new (): HTMLZLogoElement;
    };
    interface HTMLZMenuElement extends Components.ZMenu, HTMLStencilElement {
    }
    var HTMLZMenuElement: {
        prototype: HTMLZMenuElement;
        new (): HTMLZMenuElement;
    };
    interface HTMLZMenuSectionElement extends Components.ZMenuSection, HTMLStencilElement {
    }
    var HTMLZMenuSectionElement: {
        prototype: HTMLZMenuSectionElement;
        new (): HTMLZMenuSectionElement;
    };
    interface HTMLZMessagesPocketElement extends Components.ZMessagesPocket, HTMLStencilElement {
    }
    var HTMLZMessagesPocketElement: {
        prototype: HTMLZMessagesPocketElement;
        new (): HTMLZMessagesPocketElement;
    };
    interface HTMLZModalElement extends Components.ZModal, HTMLStencilElement {
    }
    var HTMLZModalElement: {
        prototype: HTMLZModalElement;
        new (): HTMLZModalElement;
    };
    interface HTMLZMyzCardElement extends Components.ZMyzCard, HTMLStencilElement {
    }
    var HTMLZMyzCardElement: {
        prototype: HTMLZMyzCardElement;
        new (): HTMLZMyzCardElement;
    };
    interface HTMLZMyzCardAlertElement extends Components.ZMyzCardAlert, HTMLStencilElement {
    }
    var HTMLZMyzCardAlertElement: {
        prototype: HTMLZMyzCardAlertElement;
        new (): HTMLZMyzCardAlertElement;
    };
    interface HTMLZMyzCardBodyElement extends Components.ZMyzCardBody, HTMLStencilElement {
    }
    var HTMLZMyzCardBodyElement: {
        prototype: HTMLZMyzCardBodyElement;
        new (): HTMLZMyzCardBodyElement;
    };
    interface HTMLZMyzCardCoverElement extends Components.ZMyzCardCover, HTMLStencilElement {
    }
    var HTMLZMyzCardCoverElement: {
        prototype: HTMLZMyzCardCoverElement;
        new (): HTMLZMyzCardCoverElement;
    };
    interface HTMLZMyzCardDictionaryElement extends Components.ZMyzCardDictionary, HTMLStencilElement {
    }
    var HTMLZMyzCardDictionaryElement: {
        prototype: HTMLZMyzCardDictionaryElement;
        new (): HTMLZMyzCardDictionaryElement;
    };
    interface HTMLZMyzCardFooterElement extends Components.ZMyzCardFooter, HTMLStencilElement {
    }
    var HTMLZMyzCardFooterElement: {
        prototype: HTMLZMyzCardFooterElement;
        new (): HTMLZMyzCardFooterElement;
    };
    interface HTMLZMyzCardFooterSectionsElement extends Components.ZMyzCardFooterSections, HTMLStencilElement {
    }
    var HTMLZMyzCardFooterSectionsElement: {
        prototype: HTMLZMyzCardFooterSectionsElement;
        new (): HTMLZMyzCardFooterSectionsElement;
    };
    interface HTMLZMyzCardHeaderElement extends Components.ZMyzCardHeader, HTMLStencilElement {
    }
    var HTMLZMyzCardHeaderElement: {
        prototype: HTMLZMyzCardHeaderElement;
        new (): HTMLZMyzCardHeaderElement;
    };
    interface HTMLZMyzCardIconElement extends Components.ZMyzCardIcon, HTMLStencilElement {
    }
    var HTMLZMyzCardIconElement: {
        prototype: HTMLZMyzCardIconElement;
        new (): HTMLZMyzCardIconElement;
    };
    interface HTMLZMyzCardInfoElement extends Components.ZMyzCardInfo, HTMLStencilElement {
    }
    var HTMLZMyzCardInfoElement: {
        prototype: HTMLZMyzCardInfoElement;
        new (): HTMLZMyzCardInfoElement;
    };
    interface HTMLZMyzCardListElement extends Components.ZMyzCardList, HTMLStencilElement {
    }
    var HTMLZMyzCardListElement: {
        prototype: HTMLZMyzCardListElement;
        new (): HTMLZMyzCardListElement;
    };
    interface HTMLZMyzListElement extends Components.ZMyzList, HTMLStencilElement {
    }
    var HTMLZMyzListElement: {
        prototype: HTMLZMyzListElement;
        new (): HTMLZMyzListElement;
    };
    interface HTMLZMyzListItemElement extends Components.ZMyzListItem, HTMLStencilElement {
    }
    var HTMLZMyzListItemElement: {
        prototype: HTMLZMyzListItemElement;
        new (): HTMLZMyzListItemElement;
    };
    interface HTMLZNavigationTabElement extends Components.ZNavigationTab, HTMLStencilElement {
    }
    var HTMLZNavigationTabElement: {
        prototype: HTMLZNavigationTabElement;
        new (): HTMLZNavigationTabElement;
    };
    interface HTMLZNavigationTabLinkElement extends Components.ZNavigationTabLink, HTMLStencilElement {
    }
    var HTMLZNavigationTabLinkElement: {
        prototype: HTMLZNavigationTabLinkElement;
        new (): HTMLZNavigationTabLinkElement;
    };
    interface HTMLZNavigationTabsElement extends Components.ZNavigationTabs, HTMLStencilElement {
    }
    var HTMLZNavigationTabsElement: {
        prototype: HTMLZNavigationTabsElement;
        new (): HTMLZNavigationTabsElement;
    };
    interface HTMLZNotificationElement extends Components.ZNotification, HTMLStencilElement {
    }
    var HTMLZNotificationElement: {
        prototype: HTMLZNotificationElement;
        new (): HTMLZNotificationElement;
    };
    interface HTMLZOffcanvasElement extends Components.ZOffcanvas, HTMLStencilElement {
    }
    var HTMLZOffcanvasElement: {
        prototype: HTMLZOffcanvasElement;
        new (): HTMLZOffcanvasElement;
    };
    interface HTMLZOtpElement extends Components.ZOtp, HTMLStencilElement {
    }
    var HTMLZOtpElement: {
        prototype: HTMLZOtpElement;
        new (): HTMLZOtpElement;
    };
    interface HTMLZPaginationElement extends Components.ZPagination, HTMLStencilElement {
    }
    var HTMLZPaginationElement: {
        prototype: HTMLZPaginationElement;
        new (): HTMLZPaginationElement;
    };
    interface HTMLZPanelElemElement extends Components.ZPanelElem, HTMLStencilElement {
    }
    var HTMLZPanelElemElement: {
        prototype: HTMLZPanelElemElement;
        new (): HTMLZPanelElemElement;
    };
    interface HTMLZPocketElement extends Components.ZPocket, HTMLStencilElement {
    }
    var HTMLZPocketElement: {
        prototype: HTMLZPocketElement;
        new (): HTMLZPocketElement;
    };
    interface HTMLZPocketBodyElement extends Components.ZPocketBody, HTMLStencilElement {
    }
    var HTMLZPocketBodyElement: {
        prototype: HTMLZPocketBodyElement;
        new (): HTMLZPocketBodyElement;
    };
    interface HTMLZPocketHeaderElement extends Components.ZPocketHeader, HTMLStencilElement {
    }
    var HTMLZPocketHeaderElement: {
        prototype: HTMLZPocketHeaderElement;
        new (): HTMLZPocketHeaderElement;
    };
    interface HTMLZPocketMessageElement extends Components.ZPocketMessage, HTMLStencilElement {
    }
    var HTMLZPocketMessageElement: {
        prototype: HTMLZPocketMessageElement;
        new (): HTMLZPocketMessageElement;
    };
    interface HTMLZPopoverElement extends Components.ZPopover, HTMLStencilElement {
    }
    var HTMLZPopoverElement: {
        prototype: HTMLZPopoverElement;
        new (): HTMLZPopoverElement;
    };
    interface HTMLZRangePickerElement extends Components.ZRangePicker, HTMLStencilElement {
    }
    var HTMLZRangePickerElement: {
        prototype: HTMLZRangePickerElement;
        new (): HTMLZRangePickerElement;
    };
    interface HTMLZSearchbarElement extends Components.ZSearchbar, HTMLStencilElement {
    }
    var HTMLZSearchbarElement: {
        prototype: HTMLZSearchbarElement;
        new (): HTMLZSearchbarElement;
    };
    interface HTMLZSectionTitleElement extends Components.ZSectionTitle, HTMLStencilElement {
    }
    var HTMLZSectionTitleElement: {
        prototype: HTMLZSectionTitleElement;
        new (): HTMLZSectionTitleElement;
    };
    interface HTMLZSelectElement extends Components.ZSelect, HTMLStencilElement {
    }
    var HTMLZSelectElement: {
        prototype: HTMLZSelectElement;
        new (): HTMLZSelectElement;
    };
    interface HTMLZSkipToContentElement extends Components.ZSkipToContent, HTMLStencilElement {
    }
    var HTMLZSkipToContentElement: {
        prototype: HTMLZSkipToContentElement;
        new (): HTMLZSkipToContentElement;
    };
    interface HTMLZSlideshowElement extends Components.ZSlideshow, HTMLStencilElement {
    }
    var HTMLZSlideshowElement: {
        prototype: HTMLZSlideshowElement;
        new (): HTMLZSlideshowElement;
    };
    interface HTMLZStepperElement extends Components.ZStepper, HTMLStencilElement {
    }
    var HTMLZStepperElement: {
        prototype: HTMLZStepperElement;
        new (): HTMLZStepperElement;
    };
    interface HTMLZStepperItemElement extends Components.ZStepperItem, HTMLStencilElement {
    }
    var HTMLZStepperItemElement: {
        prototype: HTMLZStepperItemElement;
        new (): HTMLZStepperItemElement;
    };
    interface HTMLZTableElement extends Components.ZTable, HTMLStencilElement {
    }
    var HTMLZTableElement: {
        prototype: HTMLZTableElement;
        new (): HTMLZTableElement;
    };
    interface HTMLZTableBodyElement extends Components.ZTableBody, HTMLStencilElement {
    }
    var HTMLZTableBodyElement: {
        prototype: HTMLZTableBodyElement;
        new (): HTMLZTableBodyElement;
    };
    interface HTMLZTableCellElement extends Components.ZTableCell, HTMLStencilElement {
    }
    var HTMLZTableCellElement: {
        prototype: HTMLZTableCellElement;
        new (): HTMLZTableCellElement;
    };
    interface HTMLZTableEmptyBoxElement extends Components.ZTableEmptyBox, HTMLStencilElement {
    }
    var HTMLZTableEmptyBoxElement: {
        prototype: HTMLZTableEmptyBoxElement;
        new (): HTMLZTableEmptyBoxElement;
    };
    interface HTMLZTableExpandedRowElement extends Components.ZTableExpandedRow, HTMLStencilElement {
    }
    var HTMLZTableExpandedRowElement: {
        prototype: HTMLZTableExpandedRowElement;
        new (): HTMLZTableExpandedRowElement;
    };
    interface HTMLZTableFooterElement extends Components.ZTableFooter, HTMLStencilElement {
    }
    var HTMLZTableFooterElement: {
        prototype: HTMLZTableFooterElement;
        new (): HTMLZTableFooterElement;
    };
    interface HTMLZTableHeadElement extends Components.ZTableHead, HTMLStencilElement {
    }
    var HTMLZTableHeadElement: {
        prototype: HTMLZTableHeadElement;
        new (): HTMLZTableHeadElement;
    };
    interface HTMLZTableHeaderElement extends Components.ZTableHeader, HTMLStencilElement {
    }
    var HTMLZTableHeaderElement: {
        prototype: HTMLZTableHeaderElement;
        new (): HTMLZTableHeaderElement;
    };
    interface HTMLZTableHeaderRowElement extends Components.ZTableHeaderRow, HTMLStencilElement {
    }
    var HTMLZTableHeaderRowElement: {
        prototype: HTMLZTableHeaderRowElement;
        new (): HTMLZTableHeaderRowElement;
    };
    interface HTMLZTableRowElement extends Components.ZTableRow, HTMLStencilElement {
    }
    var HTMLZTableRowElement: {
        prototype: HTMLZTableRowElement;
        new (): HTMLZTableRowElement;
    };
    interface HTMLZTableStickyFooterElement extends Components.ZTableStickyFooter, HTMLStencilElement {
    }
    var HTMLZTableStickyFooterElement: {
        prototype: HTMLZTableStickyFooterElement;
        new (): HTMLZTableStickyFooterElement;
    };
    interface HTMLZTagElement extends Components.ZTag, HTMLStencilElement {
    }
    var HTMLZTagElement: {
        prototype: HTMLZTagElement;
        new (): HTMLZTagElement;
    };
    interface HTMLZToastNotificationElement extends Components.ZToastNotification, HTMLStencilElement {
    }
    var HTMLZToastNotificationElement: {
        prototype: HTMLZToastNotificationElement;
        new (): HTMLZToastNotificationElement;
    };
    interface HTMLZToastNotificationListElement extends Components.ZToastNotificationList, HTMLStencilElement {
    }
    var HTMLZToastNotificationListElement: {
        prototype: HTMLZToastNotificationListElement;
        new (): HTMLZToastNotificationListElement;
    };
    interface HTMLZToggleButtonElement extends Components.ZToggleButton, HTMLStencilElement {
    }
    var HTMLZToggleButtonElement: {
        prototype: HTMLZToggleButtonElement;
        new (): HTMLZToggleButtonElement;
    };
    interface HTMLZToggleSwitchElement extends Components.ZToggleSwitch, HTMLStencilElement {
    }
    var HTMLZToggleSwitchElement: {
        prototype: HTMLZToggleSwitchElement;
        new (): HTMLZToggleSwitchElement;
    };
    interface HTMLZTooltipElement extends Components.ZTooltip, HTMLStencilElement {
    }
    var HTMLZTooltipElement: {
        prototype: HTMLZTooltipElement;
        new (): HTMLZTooltipElement;
    };
    interface HTMLZTypographyElement extends Components.ZTypography, HTMLStencilElement {
    }
    var HTMLZTypographyElement: {
        prototype: HTMLZTypographyElement;
        new (): HTMLZTypographyElement;
    };
    interface HTMLZVisuallyHiddenElement extends Components.ZVisuallyHidden, HTMLStencilElement {
    }
    var HTMLZVisuallyHiddenElement: {
        prototype: HTMLZVisuallyHiddenElement;
        new (): HTMLZVisuallyHiddenElement;
    };
    interface HTMLElementTagNameMap {
        "z-alert": HTMLZAlertElement;
        "z-anchor-navigation": HTMLZAnchorNavigationElement;
        "z-app-header": HTMLZAppHeaderElement;
        "z-app-switcher": HTMLZAppSwitcherElement;
        "z-aria-alert": HTMLZAriaAlertElement;
        "z-avatar": HTMLZAvatarElement;
        "z-body": HTMLZBodyElement;
        "z-button": HTMLZButtonElement;
        "z-button-sort": HTMLZButtonSortElement;
        "z-card": HTMLZCardElement;
        "z-carousel": HTMLZCarouselElement;
        "z-chip": HTMLZChipElement;
        "z-combobox": HTMLZComboboxElement;
        "z-contextual-menu": HTMLZContextualMenuElement;
        "z-cover-hero": HTMLZCoverHeroElement;
        "z-date-picker": HTMLZDatePickerElement;
        "z-divider": HTMLZDividerElement;
        "z-dragdrop-area": HTMLZDragdropAreaElement;
        "z-file": HTMLZFileElement;
        "z-file-upload": HTMLZFileUploadElement;
        "z-ghost-loading": HTMLZGhostLoadingElement;
        "z-heading": HTMLZHeadingElement;
        "z-icon": HTMLZIconElement;
        "z-info-box": HTMLZInfoBoxElement;
        "z-info-reveal": HTMLZInfoRevealElement;
        "z-input": HTMLZInputElement;
        "z-input-message": HTMLZInputMessageElement;
        "z-link": HTMLZLinkElement;
        "z-list": HTMLZListElement;
        "z-list-element": HTMLZListElementElement;
        "z-list-group": HTMLZListGroupElement;
        "z-logo": HTMLZLogoElement;
        "z-menu": HTMLZMenuElement;
        "z-menu-section": HTMLZMenuSectionElement;
        "z-messages-pocket": HTMLZMessagesPocketElement;
        "z-modal": HTMLZModalElement;
        "z-myz-card": HTMLZMyzCardElement;
        "z-myz-card-alert": HTMLZMyzCardAlertElement;
        "z-myz-card-body": HTMLZMyzCardBodyElement;
        "z-myz-card-cover": HTMLZMyzCardCoverElement;
        "z-myz-card-dictionary": HTMLZMyzCardDictionaryElement;
        "z-myz-card-footer": HTMLZMyzCardFooterElement;
        "z-myz-card-footer-sections": HTMLZMyzCardFooterSectionsElement;
        "z-myz-card-header": HTMLZMyzCardHeaderElement;
        "z-myz-card-icon": HTMLZMyzCardIconElement;
        "z-myz-card-info": HTMLZMyzCardInfoElement;
        "z-myz-card-list": HTMLZMyzCardListElement;
        "z-myz-list": HTMLZMyzListElement;
        "z-myz-list-item": HTMLZMyzListItemElement;
        "z-navigation-tab": HTMLZNavigationTabElement;
        "z-navigation-tab-link": HTMLZNavigationTabLinkElement;
        "z-navigation-tabs": HTMLZNavigationTabsElement;
        "z-notification": HTMLZNotificationElement;
        "z-offcanvas": HTMLZOffcanvasElement;
        "z-otp": HTMLZOtpElement;
        "z-pagination": HTMLZPaginationElement;
        "z-panel-elem": HTMLZPanelElemElement;
        "z-pocket": HTMLZPocketElement;
        "z-pocket-body": HTMLZPocketBodyElement;
        "z-pocket-header": HTMLZPocketHeaderElement;
        "z-pocket-message": HTMLZPocketMessageElement;
        "z-popover": HTMLZPopoverElement;
        "z-range-picker": HTMLZRangePickerElement;
        "z-searchbar": HTMLZSearchbarElement;
        "z-section-title": HTMLZSectionTitleElement;
        "z-select": HTMLZSelectElement;
        "z-skip-to-content": HTMLZSkipToContentElement;
        "z-slideshow": HTMLZSlideshowElement;
        "z-stepper": HTMLZStepperElement;
        "z-stepper-item": HTMLZStepperItemElement;
        "z-table": HTMLZTableElement;
        "z-table-body": HTMLZTableBodyElement;
        "z-table-cell": HTMLZTableCellElement;
        "z-table-empty-box": HTMLZTableEmptyBoxElement;
        "z-table-expanded-row": HTMLZTableExpandedRowElement;
        "z-table-footer": HTMLZTableFooterElement;
        "z-table-head": HTMLZTableHeadElement;
        "z-table-header": HTMLZTableHeaderElement;
        "z-table-header-row": HTMLZTableHeaderRowElement;
        "z-table-row": HTMLZTableRowElement;
        "z-table-sticky-footer": HTMLZTableStickyFooterElement;
        "z-tag": HTMLZTagElement;
        "z-toast-notification": HTMLZToastNotificationElement;
        "z-toast-notification-list": HTMLZToastNotificationListElement;
        "z-toggle-button": HTMLZToggleButtonElement;
        "z-toggle-switch": HTMLZToggleSwitchElement;
        "z-tooltip": HTMLZTooltipElement;
        "z-typography": HTMLZTypographyElement;
        "z-visually-hidden": HTMLZVisuallyHiddenElement;
    }
}
declare namespace LocalJSX {
    interface ZAlert {
        /**
          * alert variant type
         */
        "type"?: AlertType;
    }
    interface ZAnchorNavigation {
        /**
          * If enabled, the text of each anchor will be hidden unless for the current one or the one the user is hovering.
         */
        "hideUnselected"?: boolean;
    }
    interface ZAppHeader {
        /**
          * The opening state of the drawer.
         */
        "drawerOpen"?: boolean;
        /**
          * Control menu bar position in the header. - auto: the menu bar is positioned near the title - stack: the menu bar is positioned below the title - offcanvas: the menu bar is not displayed and a burger icon appears to open the offcanvas menu  **Optional**
         */
        "flow"?: "auto" | "stack" | "offcanvas";
        /**
          * Set the hero image source for the header. You can also use a slot="hero" node for advanced customisation. **Optional**
         */
        "hero"?: string;
        /**
          * Emitted when the `stuck` state of the header changes
         */
        "onSticking"?: (event: ZAppHeaderCustomEvent<any>) => void;
        /**
          * Should place an overlay over the hero image. Useful for legibility purpose. **Optional**
         */
        "overlay"?: boolean;
        /**
          * Stuck mode for the header. You can programmatically set it using an IntersectionObserver. **Optional**
         */
        "stuck"?: boolean;
    }
    interface ZAppSwitcher {
        /**
          * emitted on app button icon click, returns open/closed state
         */
        "onAppButtonClick"?: (event: ZAppSwitcherCustomEvent<any>) => void;
        /**
          * theme variant, default 'dark'
         */
        "theme"?: ThemeVariant;
    }
    interface ZAriaAlert {
        /**
          * Aria live mode
         */
        "mode"?: ZAriaAlertMode;
    }
    interface ZAvatar {
        /**
          * [optional] Avatar background color
         */
        "backgroundColor"?: string;
        /**
          * [optional] Avatar image
         */
        "image"?: string;
        /**
          * [optional] Avatar size
         */
        "size"?: AvatarSize;
        /**
          * [optional] Avatar text
         */
        "text"?: string;
        /**
          * [optional] Avatar text color
         */
        "textColor"?: string;
    }
    interface ZBody {
        /**
          * HTML tag to use to wrap slotted content
         */
        "component"?: string;
        /**
          * Typography level
         */
        "level"?: 1 | 2 | 3 | 4 | 5;
        /**
          * Font weight variant
         */
        "variant"?: "regular" | "semibold";
    }
    interface ZButton {
        /**
          * defines a string value that labels an interactive element, used for accessibility.
         */
        "ariaLabel"?: string;
        /**
          * HTML button disabled attribute.
         */
        "disabled"?: boolean;
        /**
          * HTML <a> href attribute. If it is set, it renders an HTML <a> tag.
         */
        "href"?: string;
        /**
          * Identifier, should be unique.
         */
        "htmlid"?: string;
        /**
          * `z-icon` name to use (optional).
         */
        "icon"?: string;
        /**
          * HTML button name attribute.
         */
        "name"?: string;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ButtonSize;
        /**
          * HTML a target attribute.
         */
        "target"?: string;
        /**
          * HTML button type attribute.
         */
        "type"?: ButtonType;
        /**
          * Graphical variant: `primary`, `secondary`, `tertiary`. Defaults to `primary`.
         */
        "variant"?: ButtonVariant;
    }
    interface ZButtonSort {
        /**
          * id, should be unique
         */
        "buttonid"?: string;
        /**
          * occurrencies counter (optional)
         */
        "counter"?: number;
        /**
          * label content (descending)
         */
        "desclabel"?: string;
        /**
          * selected flag (optional)
         */
        "isselected"?: boolean;
        /**
          * label content (ascending)
         */
        "label"?: string;
        /**
          * sorting direction click event, returns buttonid and sortAsc
         */
        "onButtonSortClick"?: (event: ZButtonSortCustomEvent<any>) => void;
        /**
          * sortable flag (optional)
         */
        "sortasc"?: boolean;
        /**
          * sort label content (ascending) (optional)
         */
        "sortlabelasc"?: string;
        /**
          * sort label content (descending) (optional)
         */
        "sortlabeldesc"?: string;
    }
    interface ZCard {
        /**
          * Enable click interactions on the card. Default: false
         */
        "clickable"?: boolean;
        /**
          * Name of the icon to place over the image cover
         */
        "coverIcon"?: string;
        /**
          * Card click event. Fired only if `clickable` is true.
         */
        "onCardClicked"?: (event: ZCardCustomEvent<any>) => void;
        /**
          * Enable shadow. Default: false.
         */
        "showshadow"?: boolean;
        /**
          * Card variant. Can be one of "text", "border", "shadow", "overlay". Leave it undefined for the default card.
         */
        "variant"?: CardVariant;
    }
    interface ZCarousel {
        /**
          * Arrow buttons position
         */
        "arrowsPosition"?: CarouselArrowsPosition;
        /**
          * The height of z-carousel ghost loading, this prop is mandatory when isloading is set to true, as otherwise the component won't show.
         */
        "ghostLoadingHeight"?: number;
        /**
          * The z-carousel is on loading state
         */
        "isLoading"?: boolean;
        /**
          * The z-carousel title, if given.
         */
        "label"?: string;
        /**
          * Emitted on index change and only in `single` mode.
         */
        "onIndexChange"?: (event: ZCarouselCustomEvent<any>) => void;
        /**
          * Progress indicator. Only available for `single` mode
         */
        "progressMode"?: CarouselProgressMode;
        /**
          * Shows only one content at a time
         */
        "single"?: boolean;
    }
    interface ZChip {
        /**
          * set z-chip as disabled
         */
        "disabled"?: boolean;
        /**
          * Non interactive icon
         */
        "icon"?: string;
        /**
          * z-chip interactive icon
         */
        "interactiveIcon"?: string;
        /**
          * click on interactive icon
         */
        "onInteractiveIconClick"?: (event: ZChipCustomEvent<any>) => void;
        /**
          * z-chip size type, can be default, medium or small
         */
        "type"?: ZChipType;
    }
    interface ZCombobox {
        /**
          * check all label (optional)
         */
        "checkalltext"?: string;
        /**
          * close combobox list text
         */
        "closesearchtext"?: string;
        /**
          * the combobox is disabled
         */
        "disabled"?: boolean;
        /**
          * show "check all" checkbox (optional)
         */
        "hascheckall"?: boolean;
        /**
          * group items by category
         */
        "hasgroupitems"?: boolean;
        /**
          * show search input flag (optional)
         */
        "hassearch"?: boolean;
        /**
          * input unique id
         */
        "inputid"?: string;
        /**
          * fixed style flag
         */
        "isfixed"?: boolean;
        /**
          * toggle combo list opening flag
         */
        "isopen"?: boolean;
        /**
          * list items array
         */
        "items"?: ComboItem[] | string;
        /**
          * label text
         */
        "label"?: string;
        /**
          * max number of checkable items (0 = unlimited)
         */
        "maxcheckableitems"?: number;
        /**
          * no result text message
         */
        "noresultslabel"?: string;
        /**
          * Emitted when value is checked/unchecked. Returns id, items.
         */
        "onComboboxChange"?: (event: ZComboboxCustomEvent<any>) => void;
        /**
          * search input label text (optional)
         */
        "searchlabel"?: string;
        /**
          * search input placeholder text (optional)
         */
        "searchplaceholder"?: string;
        /**
          * search input title text (optional)
         */
        "searchtitle"?: string;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ControlSize;
        /**
          * uncheck all label (optional)
         */
        "uncheckalltext"?: string;
    }
    interface ZContextualMenu {
        /**
          * [optional] Sets text color of ZContextualMenu's content
         */
        "color"?: string;
        /**
          * Elements of ZContextualMenu
         */
        "elements"?: string;
        /**
          * remove filter click event, returns filterid
         */
        "onClickContextualMenu"?: (event: ZContextualMenuCustomEvent<any>) => void;
        /**
          * [optional] Sets the position of the popover
         */
        "popoverPosition"?: PopoverPosition;
    }
    interface ZCoverHero {
        /**
          * Vertical content position (for `STACKED` variant).
         */
        "contentPosition"?: CoverHeroContentPosition;
        /**
          * Whether to keep the image aspect ratio. If set to `false`, the cssprop `--cover-hero-aspect-ratio` will not affect the component's size; instead, the height of the component follows the content's one. Note: it may be necessary to set a min and/or max height to the component.
         */
        "preserveAspectRatio"?: boolean;
        /**
          * Cover hero variant. Can be `OVERLAY` or `STACKED`.
         */
        "variant"?: CoverHeroVariant;
    }
    interface ZDatePicker {
        /**
          * z-input aria label
         */
        "ariaLabel"?: string;
        /**
          * unique id
         */
        "datePickerId"?: string;
        /**
          * z-input label
         */
        "label"?: string;
        /**
          * [Optional] datepicker mode: date, datetime, only months
         */
        "mode"?: ZDatePickerMode;
        /**
          * emitted when date changes, returns selected date
         */
        "onDateSelect"?: (event: ZDatePickerCustomEvent<any>) => void;
    }
    interface ZDivider {
        /**
          * [optional] Divider color
         */
        "color"?: string;
        /**
          * [optional] Divider orintation
         */
        "orientation"?: DividerOrientation;
        /**
          * [optional] Divider size
         */
        "size"?: DividerSize;
    }
    interface ZDragdropArea {
        /**
          * Emitted when user drop one or more files
         */
        "onFileDropped"?: (event: ZDragdropAreaCustomEvent<any>) => void;
    }
    interface ZFile {
        /**
          * File name
         */
        "fileName"?: string;
        /**
          * File chip id
         */
        "fileNumber"?: number;
        /**
          * Emitted when a z-file component is removed from the DOM
         */
        "onRemoveFile"?: (event: ZFileCustomEvent<any>) => void;
    }
    interface ZFileUpload {
        /**
          * Prop indicating the accepted file type: ex ".pdf, .doc, .jpg"
         */
        "acceptedFormat"?: string;
        /**
          * Prop indicating the button variant
         */
        "buttonVariant"?: ButtonVariant;
        /**
          * Description
         */
        "description"?: string;
        /**
          * Max file dimension in Megabyte
         */
        "fileMaxSize"?: number;
        /**
          * Title
         */
        "mainTitle"?: string;
        /**
          * Emitted when user select one or more files
         */
        "onFileInput"?: (event: ZFileUploadCustomEvent<any>) => void;
        /**
          * Prop indicating the file upload type - can be default or dragdrop
         */
        "type"?: ZFileUploadType;
    }
    interface ZGhostLoading {
    }
    interface ZHeading {
        /**
          * HTML tag to use to wrap slotted content
         */
        "component"?: string;
        /**
          * Typography level
         */
        "level"?: 1 | 2 | 3 | 4;
        /**
          * Font weight variant
         */
        "variant"?: "regular" | "semibold" | "light";
    }
    interface ZIcon {
        /**
          * icon fill (optional)
         */
        "fill"?: string;
        /**
          * icon height (optional)
         */
        "height"?: number;
        /**
          * icon id (optional)
         */
        "iconid"?: string;
        /**
          * icon name
         */
        "name"?: string;
        /**
          * icon width (optional)
         */
        "width"?: number;
    }
    interface ZInfoBox {
        /**
          * info box unique id
         */
        "boxid"?: string;
        /**
          * render close icon flag
         */
        "isclosable"?: boolean;
        /**
          * emitted on close icon click
         */
        "onInfoBoxClose"?: (event: ZInfoBoxCustomEvent<any>) => void;
    }
    interface ZInfoReveal {
        /**
          * Name of the icon for the open button
         */
        "icon"?: string;
        /**
          * Text that appears on closed panel next to the open button.
         */
        "label"?: string;
        /**
          * Info reveal's position
         */
        "position"?: InfoRevealPosition;
    }
    interface ZInput {
        /**
          * the input aria-label
         */
        "ariaLabel"?: string;
        /**
          * the input has autocomplete option (optional): available for text, password, number, email
         */
        "autocomplete"?: string;
        /**
          * checked: available for checkbox, radio
         */
        "checked"?: boolean;
        /**
          * the input is disabled
         */
        "disabled"?: boolean;
        /**
          * render clear icon when typing (optional): available for text
         */
        "hasclearicon"?: boolean;
        /**
          * the id of the input element
         */
        "htmlid"?: string;
        /**
          * the input html title (optional)
         */
        "htmltitle"?: string;
        /**
          * render icon (optional): available for text
         */
        "icon"?: string;
        /**
          * the input label
         */
        "label"?: string;
        /**
          * the input label position: available for checkbox, radio
         */
        "labelPosition"?: LabelPosition;
        /**
          * max number value (optional): available for number
         */
        "max"?: number;
        /**
          * input helper message (optional): available for text, password, number, email, textarea - if set to `false` message won't be displayed
         */
        "message"?: string | boolean;
        /**
          * min number value (optional): available for number
         */
        "min"?: number;
        /**
          * the input name
         */
        "name"?: string;
        /**
          * Emitted on input value change, returns value, validity
         */
        "onInputChange"?: (event: ZInputCustomEvent<any>) => void;
        /**
          * Emitted on checkbox check/uncheck, returns id, checked, type, name, value, validity
         */
        "onInputCheck"?: (event: ZInputCustomEvent<any>) => void;
        /**
          * Emitted when user starts typing
         */
        "onStartTyping"?: (event: ZInputCustomEvent<any>) => void;
        /**
          * Emitted when user stops typing, returns value, validity
         */
        "onStopTyping"?: (event: ZInputCustomEvent<any>) => void;
        /**
          * pattern value (optional): available for tel, text, search, url, email, password
         */
        "pattern"?: string;
        /**
          * the input placeholder (optional)
         */
        "placeholder"?: string;
        /**
          * the input is readonly
         */
        "readonly"?: boolean;
        /**
          * the input is required (optional): available for text, password, number, email, textarea, checkbox
         */
        "required"?: boolean;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ControlSize;
        /**
          * the input status (optional): available for text, password, number, email, textarea
         */
        "status"?: InputStatus;
        /**
          * step number value (optional): available for number
         */
        "step"?: number;
        /**
          * input types
         */
        "type"?: InputType;
        /**
          * the input value
         */
        "value"?: string;
    }
    interface ZInputMessage {
        /**
          * input helper message
         */
        "message"?: string;
        /**
          * input status (optional)
         */
        "status"?: InputStatus;
    }
    interface ZLink {
        /**
          * big link version
         */
        "big"?: boolean;
        /**
          * link url (optional)
         */
        "href"?: string;
        /**
          * link id (optional)
         */
        "htmlid"?: string;
        /**
          * tabindex link attribute (optional)
         */
        "htmltabindex"?: number;
        /**
          * link icon name (optional)
         */
        "icon"?: string;
        /**
          * link icon position (optional)
         */
        "iconposition"?: "left" | "right";
        /**
          * active link flag (optional)
         */
        "isactive"?: boolean;
        /**
          * disable link flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * white variant flag (optional)
         */
        "iswhite"?: boolean;
        /**
          * emitted on link click, returns linkId
         */
        "onZLinkClick"?: (event: ZLinkCustomEvent<any>) => void;
        /**
          * link target (optional)
         */
        "target"?: string;
        /**
          * link text variant (optional)
         */
        "textcolor"?: "primary" | "inverse" | "white" | "black";
        /**
          * draw underline on text (optional)
         */
        "underline"?: boolean;
    }
    interface ZList {
        /**
          * [optional] type of the list marker for each element
         */
        "listType"?: ListType;
        /**
          * [optional] Sets size of inside elements.
         */
        "size"?: ListSize;
    }
    interface ZListElement {
        /**
          * [optional] Align expandable button left or right.
         */
        "alignButton"?: ExpandableListButtonAlign;
        /**
          * [optional] Sets element clickable.
         */
        "clickable"?: boolean;
        /**
          * [optional] Sets text color of the element.
         */
        "color"?: string;
        /**
          * [optional] Sets disabled style of the element.
         */
        "disabled"?: boolean;
        /**
          * [optional] Sets the divider color.
         */
        "dividerColor"?: string;
        /**
          * [optional] Sets the divider size.
         */
        "dividerSize"?: DividerSize;
        /**
          * [optional] Sets the position where to insert the divider.
         */
        "dividerType"?: ListDividerType;
        /**
          * [optional] Sets element as expandable.
         */
        "expandable"?: boolean;
        /**
          * [optional] Sets expandable style to element.
         */
        "expandableStyle"?: ExpandableListStyle;
        /**
          * [optional] If is used in ZContextualMenu component
         */
        "isContextualMenu"?: boolean;
        /**
          * [optional] List element id.
         */
        "listElementId"?: number;
        /**
          * [optional] position of the list element inside the list or the group
         */
        "listElementPosition"?: string;
        /**
          * [optional] type of the list marker for each element
         */
        "listType"?: ListType;
        /**
          * remove filter click event, returns filterid
         */
        "onAccessibleFocus"?: (event: ZListElementCustomEvent<number>) => void;
        /**
          * remove filter click event, returns filterid
         */
        "onClickItem"?: (event: ZListElementCustomEvent<any>) => void;
        /**
          * [optional] Sets size of inside elements.
         */
        "size"?: ListSize;
    }
    interface ZListGroup {
        /**
          * [optional] Sets the divider color.
         */
        "dividerColor"?: string;
        /**
          * [optional] Sets the divider size.
         */
        "dividerSize"?: DividerSize;
        /**
          * [optional] Sets the position where to insert the divider.
         */
        "dividerType"?: ListDividerType;
        /**
          * [optional] type of the list marker for each element
         */
        "listType"?: ListType;
        /**
          * [optional] Sets size of inside elements.
         */
        "size"?: ListSize;
    }
    interface ZLogo {
        /**
          * image height
         */
        "height"?: number;
        /**
          * alternative image text
         */
        "imageAlt"?: string;
        /**
          * link url (optional)
         */
        "link"?: string;
        /**
          * if true, the mobile logo is displayed, otherwise the desktop one
         */
        "mobileLogo"?: boolean;
        /**
          * link target: true means _blank, false means _self
         */
        "targetBlank"?: boolean;
        /**
          * image width
         */
        "width"?: number;
    }
    interface ZMenu {
        /**
          * Flag to set the active status of the menu.
         */
        "active"?: boolean;
        /**
          * Flag to set the display mode of the list. If true, the list will be absolutely positioned under the menu label, stacked beneath it otherwise.
          * @default false
         */
        "floating"?: boolean;
        /**
          * The menu has been closed.
         */
        "onClosed"?: (event: ZMenuCustomEvent<any>) => void;
        /**
          * The menu has been opened.
         */
        "onOpened"?: (event: ZMenuCustomEvent<any>) => void;
        /**
          * The opening state of the menu.
          * @default false
         */
        "open"?: boolean;
    }
    interface ZMenuSection {
        /**
          * Active state
         */
        "active"?: boolean;
        /**
          * The section has been closed.
         */
        "onClosed"?: (event: ZMenuSectionCustomEvent<any>) => void;
        /**
          * The section has been opened.
         */
        "onOpened"?: (event: ZMenuSectionCustomEvent<any>) => void;
    }
    interface ZMessagesPocket {
        /**
          * number of messages
         */
        "messages"?: number;
        /**
          * pocket id
         */
        "pocketid"?: string;
        /**
          * pocket status
         */
        "status"?: PocketStatus;
    }
    interface ZModal {
        /**
          * add role "alertdialog" to dialog (optional, default is false)
         */
        "alertdialog"?: boolean;
        /**
          * aria-label for close button (optional)
         */
        "closeButtonLabel"?: string;
        /**
          * unique id
         */
        "modalid"?: string;
        /**
          * subtitle (optional)
         */
        "modalsubtitle"?: string;
        /**
          * title text (optional)
         */
        "modaltitle"?: string;
        /**
          * emitted on background click, returns modalid
         */
        "onModalBackgroundClick"?: (event: ZModalCustomEvent<any>) => void;
        /**
          * emitted on close button click, returns modalid
         */
        "onModalClose"?: (event: ZModalCustomEvent<any>) => void;
        /**
          * emitted on modal header click, returns modalid
         */
        "onModalHeaderActive"?: (event: ZModalCustomEvent<any>) => void;
    }
    interface ZMyzCard {
        /**
          * graphic variant (optional)
         */
        "cardtype"?: LicenseType;
        /**
          * faded status
         */
        "faded"?: boolean;
        /**
          * highlighted status
         */
        "ishighlighted"?: boolean;
        /**
          * pressed status
         */
        "ispressed"?: boolean;
    }
    interface ZMyzCardAlert {
        /**
          * action button text
         */
        "actiontext"?: string;
        /**
          * content text
         */
        "contenttext"?: string;
        /**
          * icon name
         */
        "iconname"?: string;
        /**
          * undo action click/keyboard event, returns actionType
         */
        "onUndoAction"?: (event: ZMyzCardAlertCustomEvent<any>) => void;
        /**
          * alert variant type
         */
        "type"?: string;
    }
    interface ZMyzCardBody {
    }
    interface ZMyzCardCover {
        /**
          * default error image source
         */
        "defaultimg"?: string;
        /**
          * faded status
         */
        "faded"?: boolean;
        /**
          * image source
         */
        "img"?: string;
        /**
          * cover alt title
         */
        "titolo"?: string;
    }
    interface ZMyzCardDictionary {
        /**
          * card cover
         */
        "cover"?: string;
        /**
          * card is disabled
         */
        "disabled"?: boolean;
        /**
          * flip button label
         */
        "flipbuttonlabel"?: string;
        /**
          * card is flipped
         */
        "flipped"?: boolean;
        /**
          * hide info button
         */
        "hideinfobtn"?: boolean;
        /**
          * card title
         */
        "name"?: string;
        /**
          * when card is flipped
         */
        "onCardFlipped"?: (event: ZMyzCardDictionaryCustomEvent<any>) => void;
    }
    interface ZMyzCardFooter {
        /**
          * authors name text
         */
        "autori"?: string;
        /**
          * card graphic variant (optional)
         */
        "cardtype"?: LicenseType;
        /**
          * display footer custom slotted content
         */
        "customContent"?: boolean;
        /**
          * faded status
         */
        "faded"?: boolean;
        /**
          * volume isbn
         */
        "isbn"?: string;
        /**
          * footer opened by default (optional)
         */
        "opened"?: boolean;
        /**
          * volume title
         */
        "titolo"?: string;
    }
    interface ZMyzCardFooterSections {
    }
    interface ZMyzCardHeader {
        /**
          * card graphic variant (optional)
         */
        "cardtype"?: LicenseType;
        /**
          * faded status
         */
        "faded"?: boolean;
        /**
          * volume title
         */
        "titolo"?: string;
    }
    interface ZMyzCardIcon {
        /**
          * description of the icon
         */
        "ariaLabel"?: string;
        /**
          * icon name
         */
        "icon"?: string;
        /**
          * disabled status flag
         */
        "isdisabled"?: boolean;
    }
    interface ZMyzCardInfo {
        /**
          * dictionary info
         */
        "data"?: string | DictionaryData;
        /**
          * tabindex link attribute (optional)
         */
        "htmltabindex"?: number;
        /**
          * flip card to front
         */
        "onFlipCard"?: (event: ZMyzCardInfoCustomEvent<any>) => void;
    }
    interface ZMyzCardList {
        /**
          * list data stringified array
         */
        "listdata"?: string;
    }
    interface ZMyzList {
        /**
          * json stringified list data (mutable, optional)
         */
        "inputrawdata"?: string;
        /**
          * list item data (mutable, optional)
         */
        "list"?: ListItem[];
    }
    interface ZMyzListItem {
        /**
          * data-action attribute (optional)
         */
        "action"?: string;
        /**
          * icon name (optional)
         */
        "icon"?: string;
        /**
          * link url (optional)
         */
        "link"?: string;
        /**
          * link target (optional)
         */
        "linktarget"?: string;
        /**
          * id (optional)
         */
        "listitemid"?: string;
        /**
          * emitted on list item click, returns listitemid
         */
        "onZListItemClick"?: (event: ZMyzListItemCustomEvent<any>) => void;
        /**
          * emitted on list item link click, returns linkId
         */
        "onZListItemLinkClick"?: (event: ZMyzListItemCustomEvent<any>) => void;
        /**
          * content text
         */
        "text"?: string;
        /**
          * underlined style flag
         */
        "underlined"?: boolean;
    }
    interface ZNavigationTab {
        /**
          * Whether the tab is disabled.
         */
        "disabled"?: boolean;
        /**
          * Html `title` attribute for the button.
         */
        "htmlTitle"?: string;
        /**
          * Name of the icon to use. The `filled` version will be automatically used (if found) when the tab is `selected`.
         */
        "icon"?: string;
        /**
          * Label to show in the tab.
         */
        "label"?: string;
        /**
          * The tab has been selected.
         */
        "onSelected"?: (event: ZNavigationTabCustomEvent<any>) => void;
        /**
          * Tab orientation. Do not set this manually: `z-navigation-tabs` will handle this.
         */
        "orientation"?: NavigationTabsOrientation;
        /**
          * Whether the tab is selected.
         */
        "selected"?: boolean;
        /**
          * Tab size. Do not set this manually: `z-navigation-tabs` will handle this.
         */
        "size"?: NavigationTabsSize;
    }
    interface ZNavigationTabLink {
        /**
          * Whether the tab is disabled.
         */
        "disabled"?: boolean;
        /**
          * Url to set to the anchor element.
         */
        "href"?: string;
        /**
          * Html title attribute for the anchor element.
         */
        "htmlTitle"?: string;
        /**
          * Name of the icon to use. The `filled` version will be automatically used (if found) when the tab is `selected`.
         */
        "icon"?: string;
        /**
          * Label to show in the tab.
         */
        "label"?: string;
        /**
          * The tab has been selected.
         */
        "onSelected"?: (event: ZNavigationTabLinkCustomEvent<any>) => void;
        /**
          * Tab orientation. Do not set this manually: `z-navigation-tabs` will handle this.
         */
        "orientation"?: NavigationTabsOrientation;
        /**
          * Whether the tab is selected.
         */
        "selected"?: boolean;
        /**
          * Tab size. Do not set this manually: `z-navigation-tabs` will handle this.
         */
        "size"?: NavigationTabsSize;
        /**
          * Html `target` attribute for the anchor element.
         */
        "target"?: string;
    }
    interface ZNavigationTabs {
        /**
          * Navigation tabs orientation.
         */
        "orientation"?: NavigationTabsOrientation;
        /**
          * Navigation tabs size.
         */
        "size"?: NavigationTabsSize;
    }
    interface ZNotification {
        /**
          * Action button text
         */
        "actiontext"?: string;
        /**
          * Name of the icon on the left of the content
         */
        "contenticonname"?: string;
        /**
          * Call to action clicked
         */
        "onNotificationAction"?: (event: ZNotificationCustomEvent<any>) => void;
        /**
          * Close button clicked
         */
        "onNotificationClose"?: (event: ZNotificationCustomEvent<any>) => void;
        /**
          * Enable close icon
         */
        "showclose"?: boolean;
        /**
          * Enable shadow.
          * @deprecated shadow is available only for the `sticky` version of the notification.
         */
        "showshadow"?: boolean;
        /**
          * Enable sticky notification bar.
         */
        "sticky"?: boolean;
        /**
          * Alert variant type
         */
        "type"?: NotificationType;
    }
    interface ZOffcanvas {
        /**
          * emitted when open prop changes
         */
        "onCanvasOpenStatusChanged"?: (event: ZOffcanvasCustomEvent<any>) => void;
        /**
          * open component. Default: false
         */
        "open"?: boolean;
        /**
          * open content transitioning in a specified direction left | right. Default: left
         */
        "transitiondirection"?: TransitionDirection;
        /**
          * Offcanvas variant. Can be one of "overlay", "pushcontent" Default variant: pushcontent
         */
        "variant"?: OffCanvasVariant;
    }
    interface ZOtp {
        /**
          * Input number
         */
        "inputNum"?: number;
        /**
          * Input message
         */
        "message"?: string;
        /**
          * Otp change event
         */
        "onOtpChange"?: (event: ZOtpCustomEvent<any>) => void;
        /**
          * Input status
         */
        "status"?: InputStatus;
    }
    interface ZPagination {
        /**
          * Current page.
         */
        "currentPage"?: number;
        /**
          * Enable buttons to go to the first and last pages.
         */
        "edges"?: boolean;
        /**
          * Whether to show "go to page" feature.
         */
        "goToPage"?: boolean;
        /**
          * Pagination label placed before the bar.
         */
        "label"?: string;
        /**
          * Enable navigation arrows.
         */
        "navArrows"?: boolean;
        /**
          * Event emitted when the current page has changed.
         */
        "onPageChanged"?: (event: ZPaginationCustomEvent<any>) => void;
        /**
          * Number of pages to skip.
         */
        "skip"?: number;
        /**
          * Number of pages to show left/right of the current, before showing "load more" symbol (…).
         */
        "split"?: number;
        /**
          * Total number of pages. Required.
         */
        "totalPages": number;
        /**
          * Number of pages to show at a time. If not set, all pages will be shown.
         */
        "visiblePages"?: number;
    }
    interface ZPanelElem {
        /**
          * name of slot container (optional)
         */
        "descrSlotName"?: string;
        /**
          * html element id (optional)
         */
        "elemid"?: string;
        /**
          * alternative image text (optional)
         */
        "imgalt"?: string;
        /**
          * image url source (optional)
         */
        "imgurl"?: string;
        /**
          * disabled status flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * icon link name (optional)
         */
        "linkicon"?: string;
        /**
          * link label text
         */
        "linklabel"?: string;
        /**
          * link target (optional)
         */
        "target"?: string;
        /**
          * link url
         */
        "url"?: string;
    }
    interface ZPocket {
        /**
          * Emitted on pocket toggle, returns pocket id and status
         */
        "onPocketToggle"?: (event: ZPocketCustomEvent<any>) => void;
        /**
          * pocket id
         */
        "pocketid"?: string;
        /**
          * pocket status
         */
        "status"?: PocketStatus;
    }
    interface ZPocketBody {
        /**
          * pocket id
         */
        "pocketid"?: string;
        /**
          * pocket status
         */
        "status"?: PocketStatus;
    }
    interface ZPocketHeader {
        /**
          * Emitted on pocket header click
         */
        "onPocketHeaderClick"?: (event: ZPocketHeaderCustomEvent<any>) => void;
        /**
          * Emitted on pocket header pan
         */
        "onPocketHeaderPan"?: (event: ZPocketHeaderCustomEvent<any>) => void;
        /**
          * pocket id
         */
        "pocketid"?: string;
    }
    interface ZPocketMessage {
    }
    interface ZPopover {
        /**
          * The selector or the element bound with the popover.
         */
        "bindTo"?: string | HTMLElement;
        /**
          * Whether to center the popup on the main side (according to "position").
         */
        "center"?: boolean;
        /**
          * Whether the popover should be closed when the user clicks outside of it or hit "ESC".
         */
        "closable"?: boolean;
        /**
          * Open change event.
         */
        "onOpenChange"?: (event: ZPopoverCustomEvent<any>) => void;
        /**
          * Position change event.
         */
        "onPositionChange"?: (event: ZPopoverCustomEvent<any>) => void;
        /**
          * The open state of the popover.
         */
        "open"?: boolean;
        /**
          * Popover position.
         */
        "position"?: PopoverPosition;
        /**
          * Whether to show popover's arrow.
         */
        "showArrow"?: boolean;
    }
    interface ZRangePicker {
        /**
          * first z-input aria label
         */
        "firstAriaLabel"?: string;
        /**
          * first z-input label
         */
        "firstLabel"?: string;
        /**
          * [Optional] datepicker mode: date or datetime
         */
        "mode"?: ZRangePickerMode;
        /**
          * emitted when date changes, returns an array with the two selected dates
         */
        "onDateSelect"?: (event: ZRangePickerCustomEvent<any>) => void;
        /**
          * unique id
         */
        "rangePickerId"?: string;
        /**
          * second z-input aria label
         */
        "secondAriaLabel"?: string;
        /**
          * second z-input label
         */
        "secondLabel"?: string;
    }
    interface ZSearchbar {
        /**
          * Show autocomplete results
         */
        "autocomplete"?: boolean;
        /**
          * Minimun number of characters to dispatch typing event
         */
        "autocompleteMinChars"?: number;
        /**
          * the id of the searchbar element
         */
        "htmlid"?: string;
        /**
          * Emitted on search result click, return item
         */
        "onSearchItemClick"?: (event: ZSearchbarCustomEvent<SearchbarItem>) => void;
        /**
          * Emitted on search submit, return search string
         */
        "onSearchSubmit"?: (event: ZSearchbarCustomEvent<string>) => void;
        /**
          * Emitted on search typing, return search string
         */
        "onSearchTyping"?: (event: ZSearchbarCustomEvent<string>) => void;
        /**
          * Search input placeholder
         */
        "placeholder"?: string;
        /**
          * Prevent submit action
         */
        "preventSubmit"?: boolean;
        /**
          * Number of results shown - default all
         */
        "resultsCount"?: number;
        /**
          * Truncate results to single row
         */
        "resultsEllipsis"?: boolean;
        /**
          * Autocomplete results items
         */
        "resultsItems"?: SearchbarItem[] | string;
        /**
          * Search helper text
         */
        "searchHelperLabel"?: string;
        /**
          * Show submit button
         */
        "showSearchButton"?: boolean;
        /**
          * Sort autocomplete results items
         */
        "sortResultsItems"?: boolean;
        /**
          * Input search string
         */
        "value"?: string;
    }
    interface ZSectionTitle {
        /**
          * Divider position for the primary title. This prop only works if the secondary title is not set.
         */
        "dividerPosition"?: ZSectionTitleDividerPosition;
        /**
          * Whether the primary title text is uppercase.
         */
        "uppercase"?: boolean;
    }
    interface ZSelect {
        /**
          * the input aria-label
         */
        "ariaLabel"?: string;
        /**
          * the input has autocomplete option
         */
        "autocomplete"?: boolean;
        /**
          * the input is disabled
         */
        "disabled"?: boolean;
        "hasGroupItems"?: boolean;
        /**
          * the id of the input element
         */
        "htmlid"?: string;
        /**
          * the input html title (optional)
         */
        "htmltitle"?: string;
        /**
          * When fixed, it occupies space and pushes down next elements.
         */
        "isfixed"?: boolean;
        /**
          * the input select options
         */
        "items"?: SelectItem[] | string;
        /**
          * the input label
         */
        "label"?: string;
        /**
          * input helper message (optional) - if set to `false` message won't be displayed
         */
        "message"?: string | boolean;
        /**
          * the input name
         */
        "name"?: string;
        /**
          * no result text message
         */
        "noresultslabel"?: string;
        /**
          * Emitted on select option selection, returns select id, selected item id
         */
        "onOptionSelect"?: (event: ZSelectCustomEvent<any>) => void;
        /**
          * Emitted on reset selected item, returns select id, selected item id
         */
        "onResetSelect"?: (event: ZSelectCustomEvent<any>) => void;
        /**
          * the input placeholder (optional)
         */
        "placeholder"?: string;
        /**
          * the input is readonly
         */
        "readonly"?: boolean;
        "resetItem"?: string;
        /**
          * Available sizes: `big`, `small` and `x-small`. Defaults to `big`.
         */
        "size"?: ControlSize;
        /**
          * the input status (optional)
         */
        "status"?: InputStatus;
    }
    interface ZSkipToContent {
        /**
          * Array to fill link into skip-content
         */
        "links"?: string | SkipToContentLink[];
        /**
          * Graphical variant: `dark`, `light`.
         */
        "variant"?: ThemeVariant;
    }
    interface ZSlideshow {
        /**
          * array or JSON stringified images urls
         */
        "data"?: string[] | string;
        /**
          * slideshow id
         */
        "slideshowid"?: string;
    }
    interface ZStepper {
    }
    interface ZStepperItem {
        /**
          * The disabled state of the item.
         */
        "disabled"?: boolean;
        /**
          * The href to navigate on click.
         */
        "href"?: string;
        /**
          * The number of the step item.
         */
        "index"?: number;
        /**
          * The pressed state of the item.
         */
        "pressed"?: boolean;
    }
    interface ZTable {
        /**
          * Sets table with border
         */
        "bordered"?: boolean;
        /**
          * Sets call to action label
         */
        "callToActionLabel"?: string;
        /**
          * Sets call to action label
         */
        "callToActionTwoLabel"?: string;
        /**
          * Sets first column sticky
         */
        "columnSticky"?: boolean;
        /**
          * Sets empty table
         */
        "empty"?: boolean;
        /**
          * Set error status
         */
        "error"?: boolean;
        /**
          * Set error status
         */
        "errorLink"?: string;
        /**
          * Error message
         */
        "errorMessage"?: string;
        /**
          * Sets header sticky
         */
        "headerSticky"?: boolean;
        /**
          * Number of lines of element
         */
        "lines"?: number;
        /**
          * Set message
         */
        "message"?: string;
        /**
          * remove call to action event
         */
        "onCallToAction"?: (event: ZTableCustomEvent<any>) => void;
        /**
          * remove call to action event
         */
        "onCallToActionTwo"?: (event: ZTableCustomEvent<any>) => void;
        /**
          * Set subtitle
         */
        "subtitle"?: string;
    }
    interface ZTableBody {
    }
    interface ZTableCell {
        /**
          * Set padding size of cell, if special 0px padding will be set
         */
        "padding"?: Size;
        /**
          * [Optional] Show contextual menu button
         */
        "showButton"?: boolean;
    }
    interface ZTableEmptyBox {
        /**
          * Sets main title message
         */
        "message"?: string;
        /**
          * Sets message
         */
        "subtitle"?: string;
    }
    interface ZTableExpandedRow {
        /**
          * Number table column plus 1 for the expand button
         */
        "colSpan"?: number;
    }
    interface ZTableFooter {
    }
    interface ZTableHead {
    }
    interface ZTableHeader {
        /**
          * Column ID
         */
        "columnId"?: string;
        /**
          * [Optional] Default sort order
         */
        "defaultSortDirection"?: SortDirection;
        /**
          * [Optional] callback for sorting
         */
        "onSort"?: (event: ZTableHeaderCustomEvent<any>) => void;
        /**
          * Set padding size of cell, if special 0px padding will be set
         */
        "padding"?: Size;
        /**
          * [Optional] Show contextual menu button
         */
        "showButton"?: boolean;
        /**
          * Sort direction
         */
        "sortDirection"?: SortDirection;
        /**
          * [Optional] Make the header sortable
         */
        "sortable"?: boolean;
    }
    interface ZTableHeaderRow {
        /**
          * Row expandable flag
         */
        "expandable"?: boolean;
    }
    interface ZTableRow {
        /**
          * Table row expanded type
         */
        "expandedType"?: ZTableRowExpandedType;
        /**
          * Row has been expanded
         */
        "onExpand"?: (event: ZTableRowCustomEvent<any>) => void;
    }
    interface ZTableStickyFooter {
    }
    interface ZTag {
        /**
          * [optional] Hide the text and show it on hover
         */
        "expandable"?: boolean;
        /**
          * [optional] Tag icon
         */
        "icon"?: string;
    }
    interface ZToastNotification {
        /**
          * toast notification closing timeout (ms)
         */
        "autoclose"?: number;
        /**
          * toggles closing button rendering
         */
        "closebutton"?: boolean;
        /**
          * toast notification draggable percentage
         */
        "draggablepercentage"?: number;
        /**
          * toast notification's title
         */
        "heading"?: string;
        /**
          * toast notification can be draggable
         */
        "isdraggable"?: boolean;
        /**
          * toast notification's message
         */
        "message"?: string;
        /**
          * notification close event
         */
        "onToastClose"?: (event: ZToastNotificationCustomEvent<any>) => void;
        /**
          * toast notification autoclose can be paused
         */
        "pauseonfocusloss"?: boolean;
        /**
          * toast notification animation type: slide-in-left, slide-in-right, slide-in-down, slide-in-up
         */
        "transition"?: ToastNotificationTransition;
        /**
          * toast notification type:  dark, light, accent, error, success, warning
         */
        "type"?: ToastNotification;
    }
    interface ZToastNotificationList {
        /**
          * Set the entry position of new notification in the list
         */
        "newestontop"?: boolean;
        /**
          * Set the position of toast notification list - top-left, top-centre, top-right, bottom-left, bottom-centre, bottom-right
         */
        "position"?: ToastNotificationPosition;
    }
    interface ZToggleButton {
        /**
          * avoidclick status flag
         */
        "avoidclick"?: boolean;
        /**
          * disabled status flag (optional)
         */
        "isdisabled"?: boolean;
        /**
          * label text
         */
        "label"?: string;
        /**
          * emitted on toggle button click, returns isOpen
         */
        "onToggleClick"?: (event: ZToggleButtonCustomEvent<any>) => void;
        /**
          * open by default (optional)
         */
        "opened"?: boolean;
    }
    interface ZToggleSwitch {
        /**
          * Checked state
         */
        "checked"?: boolean;
        /**
          * Disabled flag
         */
        "disabled"?: boolean;
        /**
          * HTML id attribute to set to the internal checkbox
         */
        "htmlid"?: string;
        /**
          * Label position
         */
        "labelPosition"?: LabelPosition;
        /**
          * Toggle click event
         */
        "onToggleClick"?: (event: ZToggleSwitchCustomEvent<any>) => void;
    }
    interface ZTooltip {
        /**
          * The selector or the element bound with the tooltip.
         */
        "bindTo"?: string | HTMLElement;
        /**
          * Enable tooltip dark mode.
         */
        "dark"?: boolean;
        /**
          * The open state of the tooltip.
         */
        "open"?: boolean;
        /**
          * Tooltip position.
         */
        "position"?: PopoverPosition;
    }
    interface ZTypography {
        /**
          * HTML tag to use to wrap slotted content
         */
        "component"?: string;
        /**
          * Typography level
         */
        "level"?: ZTypographyLevels;
        /**
          * Font weight variant
         */
        "variant"?: "regular" | "semibold" | "light";
    }
    interface ZVisuallyHidden {
    }
    interface IntrinsicElements {
        "z-alert": ZAlert;
        "z-anchor-navigation": ZAnchorNavigation;
        "z-app-header": ZAppHeader;
        "z-app-switcher": ZAppSwitcher;
        "z-aria-alert": ZAriaAlert;
        "z-avatar": ZAvatar;
        "z-body": ZBody;
        "z-button": ZButton;
        "z-button-sort": ZButtonSort;
        "z-card": ZCard;
        "z-carousel": ZCarousel;
        "z-chip": ZChip;
        "z-combobox": ZCombobox;
        "z-contextual-menu": ZContextualMenu;
        "z-cover-hero": ZCoverHero;
        "z-date-picker": ZDatePicker;
        "z-divider": ZDivider;
        "z-dragdrop-area": ZDragdropArea;
        "z-file": ZFile;
        "z-file-upload": ZFileUpload;
        "z-ghost-loading": ZGhostLoading;
        "z-heading": ZHeading;
        "z-icon": ZIcon;
        "z-info-box": ZInfoBox;
        "z-info-reveal": ZInfoReveal;
        "z-input": ZInput;
        "z-input-message": ZInputMessage;
        "z-link": ZLink;
        "z-list": ZList;
        "z-list-element": ZListElement;
        "z-list-group": ZListGroup;
        "z-logo": ZLogo;
        "z-menu": ZMenu;
        "z-menu-section": ZMenuSection;
        "z-messages-pocket": ZMessagesPocket;
        "z-modal": ZModal;
        "z-myz-card": ZMyzCard;
        "z-myz-card-alert": ZMyzCardAlert;
        "z-myz-card-body": ZMyzCardBody;
        "z-myz-card-cover": ZMyzCardCover;
        "z-myz-card-dictionary": ZMyzCardDictionary;
        "z-myz-card-footer": ZMyzCardFooter;
        "z-myz-card-footer-sections": ZMyzCardFooterSections;
        "z-myz-card-header": ZMyzCardHeader;
        "z-myz-card-icon": ZMyzCardIcon;
        "z-myz-card-info": ZMyzCardInfo;
        "z-myz-card-list": ZMyzCardList;
        "z-myz-list": ZMyzList;
        "z-myz-list-item": ZMyzListItem;
        "z-navigation-tab": ZNavigationTab;
        "z-navigation-tab-link": ZNavigationTabLink;
        "z-navigation-tabs": ZNavigationTabs;
        "z-notification": ZNotification;
        "z-offcanvas": ZOffcanvas;
        "z-otp": ZOtp;
        "z-pagination": ZPagination;
        "z-panel-elem": ZPanelElem;
        "z-pocket": ZPocket;
        "z-pocket-body": ZPocketBody;
        "z-pocket-header": ZPocketHeader;
        "z-pocket-message": ZPocketMessage;
        "z-popover": ZPopover;
        "z-range-picker": ZRangePicker;
        "z-searchbar": ZSearchbar;
        "z-section-title": ZSectionTitle;
        "z-select": ZSelect;
        "z-skip-to-content": ZSkipToContent;
        "z-slideshow": ZSlideshow;
        "z-stepper": ZStepper;
        "z-stepper-item": ZStepperItem;
        "z-table": ZTable;
        "z-table-body": ZTableBody;
        "z-table-cell": ZTableCell;
        "z-table-empty-box": ZTableEmptyBox;
        "z-table-expanded-row": ZTableExpandedRow;
        "z-table-footer": ZTableFooter;
        "z-table-head": ZTableHead;
        "z-table-header": ZTableHeader;
        "z-table-header-row": ZTableHeaderRow;
        "z-table-row": ZTableRow;
        "z-table-sticky-footer": ZTableStickyFooter;
        "z-tag": ZTag;
        "z-toast-notification": ZToastNotification;
        "z-toast-notification-list": ZToastNotificationList;
        "z-toggle-button": ZToggleButton;
        "z-toggle-switch": ZToggleSwitch;
        "z-tooltip": ZTooltip;
        "z-typography": ZTypography;
        "z-visually-hidden": ZVisuallyHidden;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "z-alert": LocalJSX.ZAlert & JSXBase.HTMLAttributes<HTMLZAlertElement>;
            "z-anchor-navigation": LocalJSX.ZAnchorNavigation & JSXBase.HTMLAttributes<HTMLZAnchorNavigationElement>;
            "z-app-header": LocalJSX.ZAppHeader & JSXBase.HTMLAttributes<HTMLZAppHeaderElement>;
            "z-app-switcher": LocalJSX.ZAppSwitcher & JSXBase.HTMLAttributes<HTMLZAppSwitcherElement>;
            "z-aria-alert": LocalJSX.ZAriaAlert & JSXBase.HTMLAttributes<HTMLZAriaAlertElement>;
            "z-avatar": LocalJSX.ZAvatar & JSXBase.HTMLAttributes<HTMLZAvatarElement>;
            "z-body": LocalJSX.ZBody & JSXBase.HTMLAttributes<HTMLZBodyElement>;
            "z-button": LocalJSX.ZButton & JSXBase.HTMLAttributes<HTMLZButtonElement>;
            "z-button-sort": LocalJSX.ZButtonSort & JSXBase.HTMLAttributes<HTMLZButtonSortElement>;
            "z-card": LocalJSX.ZCard & JSXBase.HTMLAttributes<HTMLZCardElement>;
            "z-carousel": LocalJSX.ZCarousel & JSXBase.HTMLAttributes<HTMLZCarouselElement>;
            "z-chip": LocalJSX.ZChip & JSXBase.HTMLAttributes<HTMLZChipElement>;
            "z-combobox": LocalJSX.ZCombobox & JSXBase.HTMLAttributes<HTMLZComboboxElement>;
            "z-contextual-menu": LocalJSX.ZContextualMenu & JSXBase.HTMLAttributes<HTMLZContextualMenuElement>;
            "z-cover-hero": LocalJSX.ZCoverHero & JSXBase.HTMLAttributes<HTMLZCoverHeroElement>;
            "z-date-picker": LocalJSX.ZDatePicker & JSXBase.HTMLAttributes<HTMLZDatePickerElement>;
            "z-divider": LocalJSX.ZDivider & JSXBase.HTMLAttributes<HTMLZDividerElement>;
            "z-dragdrop-area": LocalJSX.ZDragdropArea & JSXBase.HTMLAttributes<HTMLZDragdropAreaElement>;
            "z-file": LocalJSX.ZFile & JSXBase.HTMLAttributes<HTMLZFileElement>;
            "z-file-upload": LocalJSX.ZFileUpload & JSXBase.HTMLAttributes<HTMLZFileUploadElement>;
            "z-ghost-loading": LocalJSX.ZGhostLoading & JSXBase.HTMLAttributes<HTMLZGhostLoadingElement>;
            "z-heading": LocalJSX.ZHeading & JSXBase.HTMLAttributes<HTMLZHeadingElement>;
            "z-icon": LocalJSX.ZIcon & JSXBase.HTMLAttributes<HTMLZIconElement>;
            "z-info-box": LocalJSX.ZInfoBox & JSXBase.HTMLAttributes<HTMLZInfoBoxElement>;
            "z-info-reveal": LocalJSX.ZInfoReveal & JSXBase.HTMLAttributes<HTMLZInfoRevealElement>;
            "z-input": LocalJSX.ZInput & JSXBase.HTMLAttributes<HTMLZInputElement>;
            "z-input-message": LocalJSX.ZInputMessage & JSXBase.HTMLAttributes<HTMLZInputMessageElement>;
            "z-link": LocalJSX.ZLink & JSXBase.HTMLAttributes<HTMLZLinkElement>;
            "z-list": LocalJSX.ZList & JSXBase.HTMLAttributes<HTMLZListElement>;
            "z-list-element": LocalJSX.ZListElement & JSXBase.HTMLAttributes<HTMLZListElementElement>;
            "z-list-group": LocalJSX.ZListGroup & JSXBase.HTMLAttributes<HTMLZListGroupElement>;
            "z-logo": LocalJSX.ZLogo & JSXBase.HTMLAttributes<HTMLZLogoElement>;
            "z-menu": LocalJSX.ZMenu & JSXBase.HTMLAttributes<HTMLZMenuElement>;
            "z-menu-section": LocalJSX.ZMenuSection & JSXBase.HTMLAttributes<HTMLZMenuSectionElement>;
            "z-messages-pocket": LocalJSX.ZMessagesPocket & JSXBase.HTMLAttributes<HTMLZMessagesPocketElement>;
            "z-modal": LocalJSX.ZModal & JSXBase.HTMLAttributes<HTMLZModalElement>;
            "z-myz-card": LocalJSX.ZMyzCard & JSXBase.HTMLAttributes<HTMLZMyzCardElement>;
            "z-myz-card-alert": LocalJSX.ZMyzCardAlert & JSXBase.HTMLAttributes<HTMLZMyzCardAlertElement>;
            "z-myz-card-body": LocalJSX.ZMyzCardBody & JSXBase.HTMLAttributes<HTMLZMyzCardBodyElement>;
            "z-myz-card-cover": LocalJSX.ZMyzCardCover & JSXBase.HTMLAttributes<HTMLZMyzCardCoverElement>;
            "z-myz-card-dictionary": LocalJSX.ZMyzCardDictionary & JSXBase.HTMLAttributes<HTMLZMyzCardDictionaryElement>;
            "z-myz-card-footer": LocalJSX.ZMyzCardFooter & JSXBase.HTMLAttributes<HTMLZMyzCardFooterElement>;
            "z-myz-card-footer-sections": LocalJSX.ZMyzCardFooterSections & JSXBase.HTMLAttributes<HTMLZMyzCardFooterSectionsElement>;
            "z-myz-card-header": LocalJSX.ZMyzCardHeader & JSXBase.HTMLAttributes<HTMLZMyzCardHeaderElement>;
            "z-myz-card-icon": LocalJSX.ZMyzCardIcon & JSXBase.HTMLAttributes<HTMLZMyzCardIconElement>;
            "z-myz-card-info": LocalJSX.ZMyzCardInfo & JSXBase.HTMLAttributes<HTMLZMyzCardInfoElement>;
            "z-myz-card-list": LocalJSX.ZMyzCardList & JSXBase.HTMLAttributes<HTMLZMyzCardListElement>;
            "z-myz-list": LocalJSX.ZMyzList & JSXBase.HTMLAttributes<HTMLZMyzListElement>;
            "z-myz-list-item": LocalJSX.ZMyzListItem & JSXBase.HTMLAttributes<HTMLZMyzListItemElement>;
            "z-navigation-tab": LocalJSX.ZNavigationTab & JSXBase.HTMLAttributes<HTMLZNavigationTabElement>;
            "z-navigation-tab-link": LocalJSX.ZNavigationTabLink & JSXBase.HTMLAttributes<HTMLZNavigationTabLinkElement>;
            "z-navigation-tabs": LocalJSX.ZNavigationTabs & JSXBase.HTMLAttributes<HTMLZNavigationTabsElement>;
            "z-notification": LocalJSX.ZNotification & JSXBase.HTMLAttributes<HTMLZNotificationElement>;
            "z-offcanvas": LocalJSX.ZOffcanvas & JSXBase.HTMLAttributes<HTMLZOffcanvasElement>;
            "z-otp": LocalJSX.ZOtp & JSXBase.HTMLAttributes<HTMLZOtpElement>;
            "z-pagination": LocalJSX.ZPagination & JSXBase.HTMLAttributes<HTMLZPaginationElement>;
            "z-panel-elem": LocalJSX.ZPanelElem & JSXBase.HTMLAttributes<HTMLZPanelElemElement>;
            "z-pocket": LocalJSX.ZPocket & JSXBase.HTMLAttributes<HTMLZPocketElement>;
            "z-pocket-body": LocalJSX.ZPocketBody & JSXBase.HTMLAttributes<HTMLZPocketBodyElement>;
            "z-pocket-header": LocalJSX.ZPocketHeader & JSXBase.HTMLAttributes<HTMLZPocketHeaderElement>;
            "z-pocket-message": LocalJSX.ZPocketMessage & JSXBase.HTMLAttributes<HTMLZPocketMessageElement>;
            "z-popover": LocalJSX.ZPopover & JSXBase.HTMLAttributes<HTMLZPopoverElement>;
            "z-range-picker": LocalJSX.ZRangePicker & JSXBase.HTMLAttributes<HTMLZRangePickerElement>;
            "z-searchbar": LocalJSX.ZSearchbar & JSXBase.HTMLAttributes<HTMLZSearchbarElement>;
            "z-section-title": LocalJSX.ZSectionTitle & JSXBase.HTMLAttributes<HTMLZSectionTitleElement>;
            "z-select": LocalJSX.ZSelect & JSXBase.HTMLAttributes<HTMLZSelectElement>;
            "z-skip-to-content": LocalJSX.ZSkipToContent & JSXBase.HTMLAttributes<HTMLZSkipToContentElement>;
            "z-slideshow": LocalJSX.ZSlideshow & JSXBase.HTMLAttributes<HTMLZSlideshowElement>;
            "z-stepper": LocalJSX.ZStepper & JSXBase.HTMLAttributes<HTMLZStepperElement>;
            "z-stepper-item": LocalJSX.ZStepperItem & JSXBase.HTMLAttributes<HTMLZStepperItemElement>;
            "z-table": LocalJSX.ZTable & JSXBase.HTMLAttributes<HTMLZTableElement>;
            "z-table-body": LocalJSX.ZTableBody & JSXBase.HTMLAttributes<HTMLZTableBodyElement>;
            "z-table-cell": LocalJSX.ZTableCell & JSXBase.HTMLAttributes<HTMLZTableCellElement>;
            "z-table-empty-box": LocalJSX.ZTableEmptyBox & JSXBase.HTMLAttributes<HTMLZTableEmptyBoxElement>;
            "z-table-expanded-row": LocalJSX.ZTableExpandedRow & JSXBase.HTMLAttributes<HTMLZTableExpandedRowElement>;
            "z-table-footer": LocalJSX.ZTableFooter & JSXBase.HTMLAttributes<HTMLZTableFooterElement>;
            "z-table-head": LocalJSX.ZTableHead & JSXBase.HTMLAttributes<HTMLZTableHeadElement>;
            "z-table-header": LocalJSX.ZTableHeader & JSXBase.HTMLAttributes<HTMLZTableHeaderElement>;
            "z-table-header-row": LocalJSX.ZTableHeaderRow & JSXBase.HTMLAttributes<HTMLZTableHeaderRowElement>;
            "z-table-row": LocalJSX.ZTableRow & JSXBase.HTMLAttributes<HTMLZTableRowElement>;
            "z-table-sticky-footer": LocalJSX.ZTableStickyFooter & JSXBase.HTMLAttributes<HTMLZTableStickyFooterElement>;
            "z-tag": LocalJSX.ZTag & JSXBase.HTMLAttributes<HTMLZTagElement>;
            "z-toast-notification": LocalJSX.ZToastNotification & JSXBase.HTMLAttributes<HTMLZToastNotificationElement>;
            "z-toast-notification-list": LocalJSX.ZToastNotificationList & JSXBase.HTMLAttributes<HTMLZToastNotificationListElement>;
            "z-toggle-button": LocalJSX.ZToggleButton & JSXBase.HTMLAttributes<HTMLZToggleButtonElement>;
            "z-toggle-switch": LocalJSX.ZToggleSwitch & JSXBase.HTMLAttributes<HTMLZToggleSwitchElement>;
            "z-tooltip": LocalJSX.ZTooltip & JSXBase.HTMLAttributes<HTMLZTooltipElement>;
            "z-typography": LocalJSX.ZTypography & JSXBase.HTMLAttributes<HTMLZTypographyElement>;
            "z-visually-hidden": LocalJSX.ZVisuallyHidden & JSXBase.HTMLAttributes<HTMLZVisuallyHiddenElement>;
        }
    }
}
