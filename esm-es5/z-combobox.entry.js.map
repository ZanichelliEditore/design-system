{"version":3,"names":["stylesCss","ZComboboxStyle0","ZCombobox","hostRef","this","itemsList","inputType","InputType","TEXT","concat","randomId","ControlSize","BIG","toggleComboBox","bind","closeFilterItems","prototype","watchItems","items","JSON","parse","selectedCounter","filter","item","checked","length","updateRenderItemsList","watchSearchValue","filterItems","searchValue","watchCheckboxes","checkboxes","forEach","index","setAttribute","emitComboboxChange","comboboxChange","emit","id","inputid","componentWillLoad","componentWillRender","componentDidRender","getAllCheckboxes","stringify","getItemId","getCheckboxClass","Array","from","element","shadowRoot","querySelectorAll","getControlToListSize","size","X_SMALL","ListSize","SMALL","MEDIUM","LARGE","handleSelectArrowsNavigation","e","currId","KeyboardCode","ARROW_DOWN","ARROW_UP","includes","key","isopen","preventDefault","stopPropagation","currElem","querySelector","currElemIndex","indexOf","firstElemIndex","lastElemIndex","nextElem","focusComboboxItem","handleHeaderKeyboardEvent","ev","SPACE","handleCheckboxFocus","focusedItemId","elem","focus","resetRenderItemsList","renderItemsList","push","Object","assign","value","start","name","toUpperCase","end","newName","substring","checkAll","map","getComboboxA11yAttributes","role","label","renderHeader","_this","h","class","onClick","onKeyDown","onKeyUp","handleKeyboardSubmit","tabindex","renderContent","hassearch","renderSearchInput","join","hascheckall","renderCheckAll","renderItems","renderList","renderCloseButton","renderItem","htmlTabindex","dividerType","ListDividerType","ELEMENT","NONE","type","CHECKBOX","htmlid","disabled","maxcheckableitems","onInputCheck","i","detail","onInputFocus","renderNoSearchResults","hasgroupitems","renderGroups","newData","reduce","group","category","zListItem","_a","listGroups","entries","_b","slot","text","noresultslabel","listitemid","icon","closesearchtext","searchlabel","placeholder","searchplaceholder","htmltitle","searchtitle","message","ESC","onInputChange","checkAllId","allChecked","uncheckalltext","checkalltext","render","open","fixed","isfixed"],"sources":["src/components/z-combobox/styles.css?tag=z-combobox&encapsulation=shadow","src/components/z-combobox/index.tsx"],"sourcesContent":[":host {\n  display: block;\n  font-family: var(--font-family-sans);\n}\n\n:host > div.fixed {\n  position: relative;\n}\n\n:host > div > .header {\n  position: relative;\n  z-index: 10;\n  display: flex;\n  min-height: 42px;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 calc(var(--space-unit) * 1.5);\n  border: var(--border-size-small) solid var(--color-surface04);\n  margin: 0;\n  background-color: var(--color-input-field01);\n  border-radius: var(--border-radius-small);\n  cursor: pointer;\n}\n\n:host([size=\"small\"]) > div > .header {\n  min-height: 34px;\n  font-size: var(--font-size-2);\n}\n\n:host([size=\"x-small\"]) > div > .header {\n  min-height: 30px;\n  font-size: var(--font-size-2);\n}\n\n:host([size=\"x-small\"]) > div > .header p.body-3 {\n  padding: calc(var(--space-unit) * 0.5) 0;\n}\n\n:host > div > .header:hover {\n  outline: var(--border-size-medium) solid var(--color-surface04);\n  outline-offset: -2px;\n}\n\n:host > div.open > div.header:focus:focus-visible {\n  box-shadow: none;\n}\n\n:host > div > div.header:focus:focus-visible {\n  box-shadow: var(--shadow-focus-primary);\n  outline: none;\n}\n\n:host > div > .header > p.body-3 {\n  padding: var(--space-unit) 0;\n  margin: 0;\n  color: var(--color-default-text);\n}\n\n:host > div > .header > p.body-3 > span {\n  font-weight: var(--font-sb);\n}\n\n:host > div > .header > z-icon {\n  fill: var(--color-default-icon);\n  transform: rotate(360deg);\n  transition: all 200ms linear;\n}\n\n:host > div > .header > z-icon.small,\n:host > div > .header > z-icon.x-small {\n  --z-icon-width: 16px;\n  --z-icon-height: 16px;\n}\n\n:host > div.open > .header {\n  border: var(--border-size-small) solid var(--color-primary01);\n  border-radius: var(--border-radius-small) var(--border-radius-small) 0 0;\n}\n\n:host > div.disabled {\n  pointer-events: none;\n}\n\n:host > div.disabled .header {\n  border-color: var(--color-disabled01);\n  fill: var(--color-disabled01);\n}\n\n:host > div.disabled .header > p.body-3 {\n  color: var(--color-disabled03);\n}\n\n:host > div.disabled .header > z-icon:last-child {\n  fill: var(--color-disabled01);\n}\n\n:host > div.open > .header > z-icon {\n  fill: var(--color-default-icon);\n  transform: rotate(180deg);\n  transition: all 200ms linear;\n}\n\n:host > div.open > div.open-combo-data {\n  position: relative;\n  z-index: 12;\n  padding: var(--space-unit) calc(var(--space-unit) * 2);\n  border: var(--border-size-small) solid var(--gray200);\n  border-top: 0;\n  background-color: var(--color-input-field01);\n  border-radius: 0;\n}\n\n:host > div.open > div.open-combo-data > div > div {\n  overflow: auto;\n  max-height: 235px;\n  padding: 0;\n  scrollbar-color: var(--color-primary01) transparent;\n}\n\n:host > div.open > div.open-combo-data > z-input {\n  width: 100%;\n  margin-bottom: calc(var(--space-unit) * 2);\n}\n\n:host > div.open > div.open-combo-data > div > div > ul {\n  max-height: 235px;\n  padding: 0 3px; /* needed for checkbox focus shadow */\n  margin: 0;\n}\n\n::-webkit-scrollbar {\n  width: 10px;\n  background: linear-gradient(to right, transparent 0 3px, var(--gray200) 3px 7px, transparent 7px 10px);\n  border-radius: var(--border-radius);\n}\n\n::-webkit-scrollbar-thumb {\n  width: 10px;\n  background-color: var(--color-primary01);\n}\n\n:host > div.open > z-input {\n  position: relative;\n  z-index: 1;\n  width: 238px;\n  margin: 0 calc(var(--space-unit) * 2);\n  color: var(--color-primary01);\n}\n\n:host > div.open > div.open-combo-data > div > div.search {\n  overflow: hidden;\n  max-height: auto;\n  margin-top: 0;\n  box-shadow: 1px 1px 4px 2px rgb(217 222 227 / 50%);\n}\n\n:host > div.open > div.open-combo-data > div > div.search > ul {\n  overflow: auto;\n  max-height: 180px;\n  padding: var(--space-unit) calc(var(--space-unit) * 2);\n  scrollbar-color: var(--color-primary01) transparent;\n}\n\n:host > div.open > div.open-combo-data > div > div.search > div {\n  display: flex;\n  justify-content: center;\n}\n\n:host > div.open > div.open-combo-data > div > div.search > div > a {\n  display: inline-block;\n  height: 44px;\n  color: var(--color-primary01);\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: var(--font-sb);\n  line-height: 44px;\n  text-align: center;\n  text-transform: uppercase;\n}\n\n:host > div.open > div.open-combo-data > div > div.check-all-wrapper {\n  padding: calc(var(--space-unit) * 2) calc(var(--space-unit) * 0.5);\n  border-bottom: var(--border-size-small) solid var(--gray800);\n  margin-bottom: var(--space-unit);\n  text-align: left;\n}\n\n:host([size=\"small\"]) > div.open > div.open-combo-data > div > div.check-all-wrapper {\n  padding: calc(var(--space-unit) * 1.5) calc(var(--space-unit) * 0.5);\n}\n\n:host([size=\"x-small\"]) > div.open > div.open-combo-data > div > div.check-all-wrapper {\n  padding: var(--space-unit) calc(var(--space-unit) * 0.5);\n}\n","import {Component, Element, Event, EventEmitter, Prop, State, Watch, h} from \"@stencil/core\";\nimport {ComboItem, ControlSize, InputType, KeyboardCode, ListDividerType, ListSize} from \"../../beans\";\nimport {ZMyzListItem} from \"../../snowflakes/myz/list/z-myz-list-item\";\nimport {handleKeyboardSubmit, randomId} from \"../../utils/utils\";\nimport {ZInput} from \"../z-input\";\n\n@Component({\n  tag: \"z-combobox\",\n  styleUrl: \"styles.css\",\n  shadow: true,\n})\nexport class ZCombobox {\n  @Element() element: HTMLZComboboxElement;\n\n  /** input unique id */\n  @Prop()\n  inputid = `combo-${randomId()}`;\n\n  /** list items array */\n  @Prop()\n  items: ComboItem[] | string;\n\n  /** label text */\n  @Prop()\n  label: string;\n\n  /** the combobox is disabled */\n  @Prop({reflect: true})\n  disabled?: boolean = false;\n\n  /** show search input flag (optional) */\n  @Prop()\n  hassearch?: boolean = false;\n\n  /** search input label text (optional) */\n  @Prop()\n  searchlabel?: string;\n\n  /** search input placeholder text (optional) */\n  @Prop()\n  searchplaceholder?: string;\n\n  /** search input title text (optional) */\n  @Prop()\n  searchtitle?: string;\n\n  /** no result text message */\n  @Prop()\n  noresultslabel?: string = \"Nessun risultato\";\n\n  /** toggle combo list opening flag */\n  @Prop({mutable: true})\n  isopen = false;\n\n  /** fixed style flag */\n  @Prop()\n  isfixed = false;\n\n  /** close combobox list text */\n  @Prop()\n  closesearchtext?: string = \"Chiudi\";\n\n  /** show \"check all\" checkbox (optional) */\n  @Prop()\n  hascheckall?: boolean = false;\n\n  /** check all label (optional) */\n  @Prop()\n  checkalltext?: string = \"Seleziona tutti\";\n\n  /** uncheck all label (optional) */\n  @Prop()\n  uncheckalltext?: string = \"Deseleziona tutti\";\n\n  /** max number of checkable items (0 = unlimited) */\n  @Prop()\n  maxcheckableitems = 0;\n\n  /** group items by category */\n  @Prop()\n  hasgroupitems?: boolean;\n\n  /** Available sizes: `big`, `small` and `x-small`. Defaults to `big`. */\n  @Prop()\n  size?: ControlSize = ControlSize.BIG;\n\n  @State()\n  searchValue: string;\n\n  @State()\n  selectedCounter: number;\n\n  @State()\n  renderItemsList: ComboItem[] = []; // used for render only\n\n  @State()\n  focusedItemId: string;\n\n  @State()\n  checkboxes: HTMLInputElement[] = [];\n\n  private itemsList: ComboItem[] = [];\n\n  private inputType: InputType = InputType.TEXT;\n\n  @Watch(\"items\")\n  watchItems(): void {\n    this.itemsList = typeof this.items === \"string\" ? JSON.parse(this.items) : this.items;\n    this.selectedCounter = this.itemsList.filter((item) => item.checked).length;\n    this.updateRenderItemsList();\n  }\n\n  @Watch(\"searchValue\")\n  watchSearchValue(): void {\n    this.filterItems(this.searchValue);\n  }\n\n  @Watch(\"checkboxes\")\n  watchCheckboxes(): void {\n    this.checkboxes.forEach((item, index) => item.setAttribute(\"tabindex\", index === 0 ? \"0\" : \"-1\"));\n  }\n\n  /** Emitted when value is checked/unchecked. Returns id, items. */\n  @Event()\n  comboboxChange: EventEmitter;\n\n  private emitComboboxChange(): void {\n    this.comboboxChange.emit({id: this.inputid, items: this.itemsList});\n  }\n\n  constructor() {\n    this.toggleComboBox = this.toggleComboBox.bind(this);\n    this.closeFilterItems = this.closeFilterItems.bind(this);\n  }\n\n  componentWillLoad(): void {\n    this.watchItems();\n  }\n\n  componentWillRender(): void {\n    this.selectedCounter = this.itemsList.filter((item) => item.checked).length;\n  }\n\n  componentDidRender(): void {\n    const checkboxes = this.getAllCheckboxes();\n    if (JSON.stringify(checkboxes) !== JSON.stringify(this.checkboxes)) {\n      this.checkboxes = checkboxes;\n    }\n  }\n\n  private getItemId(item: ComboItem): string {\n    return `combo-checkbox-${this.inputid}-${item.id}`;\n  }\n\n  private getCheckboxClass(): string {\n    return `combo-item-checkbox-input-${this.inputid}`;\n  }\n\n  private getAllCheckboxes(): HTMLInputElement[] {\n    return Array.from(\n      this.element.shadowRoot.querySelectorAll(`.${this.getCheckboxClass()} input:not([disabled])`)\n    ) as HTMLInputElement[];\n  }\n\n  private getControlToListSize(): ListSize {\n    switch (this.size) {\n      case ControlSize.X_SMALL:\n        return ListSize.SMALL;\n      case ControlSize.SMALL:\n        return ListSize.MEDIUM;\n      default:\n        return ListSize.LARGE;\n    }\n  }\n\n  private handleSelectArrowsNavigation(e: KeyboardEvent, currId: string): void {\n    if (![KeyboardCode.ARROW_DOWN, KeyboardCode.ARROW_UP].includes(e.key as KeyboardCode) || !this.isopen) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    const currElem = this.element.shadowRoot.querySelector(`#${currId}`) as HTMLInputElement;\n    if (!currElem) {\n      return;\n    }\n\n    const checkboxes = this.checkboxes;\n    if (!checkboxes.length) {\n      return;\n    }\n\n    const currElemIndex = checkboxes.indexOf(currElem);\n    const firstElemIndex = 0;\n    const lastElemIndex = checkboxes.length - 1;\n\n    let nextElem = null;\n    if (e.key === KeyboardCode.ARROW_DOWN) {\n      nextElem = currElemIndex === lastElemIndex ? checkboxes[firstElemIndex] : checkboxes[currElemIndex + 1];\n    } else if (e.key === KeyboardCode.ARROW_UP) {\n      nextElem = currElemIndex === firstElemIndex ? checkboxes[lastElemIndex] : checkboxes[currElemIndex - 1];\n    }\n\n    this.focusComboboxItem(nextElem);\n  }\n\n  private handleHeaderKeyboardEvent(ev: KeyboardEvent): void {\n    if (ev.key === KeyboardCode.SPACE) {\n      ev.preventDefault();\n    }\n    if ((ev.key === KeyboardCode.ARROW_DOWN && !this.isopen) || (ev.key === KeyboardCode.ARROW_UP && this.isopen)) {\n      this.toggleComboBox();\n    }\n  }\n\n  private handleCheckboxFocus(id: string): void {\n    this.focusedItemId = id;\n  }\n\n  private focusComboboxItem(elem): void {\n    this.checkboxes.forEach(function (item) {\n      item.setAttribute(\"tabindex\", \"-1\");\n    });\n\n    elem.setAttribute(\"tabindex\", \"0\");\n    elem.focus();\n  }\n\n  private updateRenderItemsList(): void {\n    if (this.searchValue) {\n      this.filterItems(this.searchValue);\n    } else {\n      this.resetRenderItemsList();\n    }\n  }\n\n  private resetRenderItemsList(): void {\n    const renderItemsList = [];\n    this.itemsList.forEach((item: ComboItem) => {\n      renderItemsList.push({...item});\n    });\n    this.renderItemsList = renderItemsList;\n  }\n\n  private filterItems(value: string): void {\n    if (!value) {\n      return this.closeFilterItems();\n    }\n\n    this.resetRenderItemsList();\n    this.renderItemsList = this.renderItemsList.filter((item) => {\n      const start = item.name.toUpperCase().indexOf(value.toUpperCase());\n      const end = start + value.length;\n      const newName =\n        item.name.substring(0, start) +\n        \"<strong>\" +\n        item.name.substring(start, end) +\n        \"</strong>\" +\n        item.name.substring(end, item.name.length);\n\n      item.name = newName;\n\n      return start >= 0;\n    });\n  }\n\n  private checkAll(checked = true): void {\n    this.itemsList = this.itemsList.map((item: ComboItem) => ({\n      ...item,\n      checked: checked,\n    }));\n    this.resetRenderItemsList();\n    this.emitComboboxChange();\n  }\n\n  private closeFilterItems(): void {\n    this.searchValue = \"\";\n    this.resetRenderItemsList();\n  }\n\n  private toggleComboBox(): void {\n    this.isopen = !this.isopen;\n  }\n\n  private getComboboxA11yAttributes(): Record<string, unknown> {\n    return {\n      \"role\": \"combobox\",\n      \"aria-label\": this.label,\n      \"aria-expanded\": this.isopen ? \"true\" : \"false\",\n      \"aria-activedescendant\": this.isopen ? this.focusedItemId : \"\",\n      \"aria-controls\": `${this.inputid}_list`,\n    };\n  }\n\n  private renderHeader(): HTMLDivElement {\n    return (\n      <div\n        class=\"header\"\n        onClick={() => this.toggleComboBox()}\n        onKeyDown={(ev: KeyboardEvent) => {\n          this.handleHeaderKeyboardEvent(ev);\n        }}\n        onKeyUp={(ev: KeyboardEvent) => handleKeyboardSubmit(ev, this.toggleComboBox)}\n        role=\"button\"\n        tabindex={0}\n        aria-expanded={this.isopen ? \"true\" : \"false\"}\n      >\n        <p class=\"body-3\">\n          {this.label}\n          <span>{this.selectedCounter > 0 && ` (${this.selectedCounter})`}</span>\n        </p>\n        <z-icon\n          name=\"caret-down\"\n          class={this.size}\n        />\n      </div>\n    );\n  }\n\n  private renderContent(): HTMLDivElement {\n    if (!this.isopen) {\n      return;\n    }\n\n    return (\n      <div class=\"open-combo-data\">\n        {this.hassearch && this.renderSearchInput()}\n        {!this.hassearch ? <span {...this.getComboboxA11yAttributes()} /> : null}\n        <div\n          role=\"listbox\"\n          aria-label={this.label}\n          aria-multiselectable={true}\n          id={`${this.inputid}_list`}\n          aria-owns={`${this.checkboxes.map((item) => item.id).join(\" \")}`}\n        >\n          {this.hascheckall && this.renderCheckAll()}\n          {this.renderItems()}\n        </div>\n      </div>\n    );\n  }\n\n  private renderItems(): HTMLDivElement {\n    return (\n      <div class={this.searchValue && \"search\"}>\n        {this.renderList(this.renderItemsList)}\n        {this.searchValue && this.renderCloseButton()}\n      </div>\n    );\n  }\n\n  private renderItem(item: ComboItem, index: number, length: number): ZMyzListItem {\n    return (\n      <z-list-element\n        id={item.id}\n        htmlTabindex={null}\n        dividerType={index !== length - 1 ? ListDividerType.ELEMENT : ListDividerType.NONE}\n        size={this.getControlToListSize()}\n      >\n        <z-input\n          type={InputType.CHECKBOX}\n          checked={item.checked}\n          htmlid={this.getItemId(item)}\n          label={item.name}\n          class={this.getCheckboxClass()}\n          disabled={!item.checked && this.maxcheckableitems && this.selectedCounter >= this.maxcheckableitems}\n          size={this.size === ControlSize.X_SMALL ? ControlSize.SMALL : this.size}\n          role=\"option\"\n          aria-selected={item.checked ? \"true\" : \"false\"}\n          onKeyDown={(e: KeyboardEvent) => this.handleSelectArrowsNavigation(e, this.getItemId(item))}\n          onInputCheck={(e: CustomEvent) => {\n            this.itemsList = this.itemsList.map((i: ComboItem) => {\n              if (item.id === i.id) {\n                i.checked = e.detail.checked;\n              }\n\n              return i;\n            });\n            this.updateRenderItemsList();\n            this.emitComboboxChange();\n          }}\n          onInputFocus={(e: CustomEvent) => this.handleCheckboxFocus(e.detail.id)}\n        />\n      </z-list-element>\n    );\n  }\n\n  private renderList(items: ComboItem[]): HTMLUListElement {\n    if (!items) {\n      return;\n    }\n    if (!items.length && this.searchValue) {\n      return this.renderNoSearchResults();\n    }\n\n    if (this.hasgroupitems) {\n      return this.renderGroups(items);\n    }\n\n    return (\n      <ul role=\"none\">\n        {items.map((item, i) => {\n          return this.renderItem(item, i, items.length);\n        })}\n      </ul>\n    );\n  }\n\n  private renderGroups(items: ComboItem[]): HTMLUListElement {\n    const newData = items.reduce((group, item, index) => {\n      const {category} = item;\n      const zListItem = this.renderItem(item, index, items.length);\n\n      group[category] = group[category] ?? [];\n      group[category].push(zListItem);\n\n      return group;\n    }, {});\n\n    const listGroups = Object.entries(newData as {[key: string]: HTMLZListElementElement[]}).map(([key, value]) => {\n      return (\n        <z-list-group divider-type={ListDividerType.ELEMENT}>\n          <span\n            class=\"body-3-sb z-list-group-title\"\n            slot=\"header-title\"\n          >\n            {key}\n          </span>\n          {value.map((item) => item)}\n        </z-list-group>\n      );\n    });\n\n    return <ul role=\"none\">{listGroups}</ul>;\n  }\n\n  private renderNoSearchResults(): HTMLUListElement {\n    return (\n      <ul role=\"none\">\n        <z-myz-list-item\n          id=\"no-results\"\n          text={this.noresultslabel}\n          listitemid=\"no-results\"\n          icon=\"multiply-circle\"\n          class={this.size}\n        />\n      </ul>\n    );\n  }\n\n  private renderCloseButton(): HTMLDivElement {\n    return (\n      <div>\n        <a\n          onClick={() => this.closeFilterItems()}\n          onKeyUp={(e: KeyboardEvent) => handleKeyboardSubmit(e, this.closeFilterItems)}\n          role=\"button\"\n          tabindex={0}\n        >\n          {this.closesearchtext}\n        </a>\n      </div>\n    );\n  }\n\n  private renderSearchInput(): ZInput {\n    return (\n      <z-input\n        htmlid={`${this.inputid}_search`}\n        label={this.searchlabel}\n        placeholder={this.searchplaceholder}\n        htmltitle={this.searchtitle}\n        type={this.inputType}\n        value={this.searchValue}\n        message={false}\n        size={this.size}\n        aria-autocomplete=\"list\"\n        {...this.getComboboxA11yAttributes()}\n        onKeyUp={(e: KeyboardEvent) => {\n          if (e.key === KeyboardCode.ESC) {\n            this.closeFilterItems();\n          }\n        }}\n        onInputChange={(e: CustomEvent) => {\n          this.searchValue = e.detail.value;\n        }}\n      />\n    );\n  }\n\n  private renderCheckAll(): HTMLDivElement {\n    if (this.searchValue) {\n      return;\n    }\n\n    const checkAllId = `combo-checkbox-${this.inputid}-check-all`;\n    const allChecked = this.selectedCounter === this.itemsList.length;\n\n    return (\n      <div class=\"check-all-wrapper\">\n        <z-input\n          type={InputType.CHECKBOX}\n          checked={allChecked}\n          htmlid={checkAllId}\n          class={this.getCheckboxClass()}\n          label={allChecked ? this.uncheckalltext : this.checkalltext}\n          disabled={this.maxcheckableitems && this.maxcheckableitems < this.itemsList.length}\n          size={this.size === ControlSize.X_SMALL ? ControlSize.SMALL : this.size}\n          role=\"option\"\n          aria-selected={allChecked ? \"true\" : \"false\"}\n          onKeyDown={(e: KeyboardEvent) => this.handleSelectArrowsNavigation(e, checkAllId)}\n          onInputCheck={(e: CustomEvent) => this.checkAll(e.detail.checked)}\n          onInputFocus={(e: CustomEvent) => this.handleCheckboxFocus(e.detail.id)}\n        />\n      </div>\n    );\n  }\n\n  render(): HTMLDivElement {\n    return (\n      <div\n        data-action={`combo-${this.inputid}`}\n        class={{open: this.isopen, fixed: this.isfixed, disabled: this.disabled}}\n        id={this.inputid}\n      >\n        {this.renderHeader()}\n        {!this.disabled && this.renderContent()}\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}