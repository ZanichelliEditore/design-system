{"version":3,"names":["stylesCss","ZTrStyle0","ZTr","prototype","updateColumns","cells","Array","from","this","host","querySelectorAll","expandable","pop","columns","map","cell","colspan","reduce","a","b","style","setProperty","concat","expandableContent","id","randomId","expandableContentId","onRowClick","event","preventExpand","target","closest","expanded","expand","emit","componentWillLoad","render","h","Host","key","role","onClick","bind","class","type","name","onSlotchange"],"sources":["src/components/table/z-tr/styles.css?tag=z-tr&encapsulation=shadow","src/components/table/z-tr/index.tsx"],"sourcesContent":[":host {\n  /* number of columns of the row. will be set in component's ts code */\n  --columns: 1;\n\n  display: grid;\n  min-width: max-content;\n  box-sizing: border-box;\n  grid-auto-flow: column;\n  grid-template-columns: var(--z-table--expand-button-size, 0) repeat(var(--columns), minmax(128px, 1fr));\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.z-tr--expand-button-container,\n::slotted(*) {\n  border-bottom: var(--z-table--cells-bottom-border-size, var(--border-size-small)) solid var(--color-surface03);\n}\n\n::slotted(*:not(:last-child)) {\n  border-right: var(--z-table--cell-left-border, none);\n}\n\n:host([expandable]) {\n  --show-expandable-button: visible;\n\n  cursor: pointer;\n}\n\n:host([expandable]) ::slotted(*) {\n  grid-row: 1;\n}\n\n:host([expandable]) ::slotted(:nth-last-child(2)) {\n  border-right: none;\n}\n\n:host([expandable]) ::slotted(*:last-child) {\n  border-left: 0;\n  grid-column: 1 / span calc(var(--columns) + 1);\n  grid-row: 2;\n}\n\n:host([expandable]:not([expanded])) ::slotted(*:last-child) {\n  display: none;\n}\n\n:host([expanded]) {\n  margin-bottom: 4px; /* prevents shadow to be cut by the next element */\n  box-shadow: 0 4px 4px -2px var(--shadow-color-base);\n}\n\n:host([expanded]) .z-tr--expand-button-container,\n:host([expanded]) ::slotted(*) {\n  background-color: var(--color-surface02);\n}\n\n.z-tr--expand-button-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--z-table--cells-background, var(--color-surface01));\n}\n\n.z-tr--expand-button-container button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n  border: none;\n  margin: auto;\n  appearance: none;\n  background: transparent;\n  cursor: pointer;\n  visibility: var(--show-expandable-button, hidden);\n}\n\n.z-tr--expand-button-container button:focus {\n  box-shadow: var(--shadow-focus-primary);\n  outline: none;\n}\n\n.z-tr--expand-button-container button z-icon {\n  --z-icon-width: 16px;\n  --z-icon-height: 16px;\n}\n","import {Component, Element, Event, EventEmitter, Host, Listen, Prop, State, Watch, h} from \"@stencil/core\";\nimport {randomId} from \"../../../utils/utils\";\nimport \"../cells/z-td/index\";\nimport \"../cells/z-th/index\";\n\n/**\n * ZTr component.\n * When the row is `expandable`, you can set the `prevent-expand` css class on an interactive element inside the row\n * to prevent the row from expanding.\n * @slot - ZTr content (`z-td` or `z-th`).\n */\n@Component({\n  tag: \"z-tr\",\n  styleUrl: \"styles.css\",\n  shadow: true,\n})\nexport class ZTr {\n  @Element() host: HTMLZTrElement;\n\n  /**\n   * Whether the row is expandable.\n   * Use a `z-td` as the last cell of the row for the additional content.\n   * It will show a button to expand/collapse the row.\n   * The last cell will be hidden until the button or row is clicked.\n   *\n   * If some element inside the expandable row contains the `prevent-expand` css class,\n   * the row will not expand by clicking that element.\n   */\n  @Prop({reflect: true})\n  expandable = false;\n\n  /**\n   * Whether the row is currently expanded.\n   */\n  @State()\n  expanded = false;\n\n  /**\n   * HTML Id of the expandable content.\n   * It is used to link the button to the content through the `aria-controls` attribute.\n   */\n  @State()\n  expandableContentId: string;\n\n  /** Row has been expanded */\n  @Event()\n  expand: EventEmitter;\n\n  @Watch(\"expandable\")\n  @Listen(\"colspanchange\")\n  protected updateColumns(): void {\n    const cells = Array.from(this.host.querySelectorAll<HTMLZTdElement | HTMLZThElement>(\"z-td, z-th\"));\n    if (this.expandable) {\n      cells.pop();\n    }\n\n    const columns = cells.map((cell) => cell.colspan || 1).reduce((a, b) => a + b, 0);\n    this.host.style.setProperty(\"--columns\", `${columns}`);\n\n    if (this.expandable) {\n      const expandableContent = cells.pop();\n      expandableContent.id = expandableContent.id || `z-tr-expandable-content-${randomId()}`;\n      this.expandableContentId = expandableContent.id;\n    }\n  }\n\n  /**\n   * Handle click on row.\n   * Skip expansion if the click is on a element with `prevent-expand` css class.\n   */\n  private onRowClick(event: MouseEvent): void {\n    const preventExpand = (event.target as HTMLElement).closest(\".prevent-expand\");\n    if (!this.expandable || preventExpand) {\n      return;\n    }\n\n    this.expanded = !this.expanded;\n    this.expand.emit({expanded: this.expanded});\n  }\n\n  componentWillLoad(): void {\n    this.updateColumns();\n  }\n\n  render(): HTMLZTrElement {\n    return (\n      <Host\n        role=\"row\"\n        onClick={this.onRowClick.bind(this)}\n        expanded={this.expanded}\n      >\n        <div class=\"z-tr--expand-button-container\">\n          {this.expandable && (\n            <button\n              aria-expanded={this.expanded ? \"true\" : \"false\"}\n              aria-label={this.expanded ? \"Comprimi riga\" : \"Espandi riga\"}\n              aria-controls={this.expandableContentId}\n              type=\"button\"\n            >\n              <z-icon name={this.expanded ? \"minus-circled\" : \"plus-circled\"}></z-icon>\n            </button>\n          )}\n        </div>\n        <slot onSlotchange={this.updateColumns.bind(this)}></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"2MAAA,IAAMA,UAAY,o9DAClB,IAAAC,UAAeD,U,ICeFE,IAAG,W,gGAaD,M,cAMF,M,mCAeDA,EAAAC,UAAAC,cAAA,WACR,IAAMC,EAAQC,MAAMC,KAAKC,KAAKC,KAAKC,iBAAkD,eACrF,GAAIF,KAAKG,WAAY,CACnBN,EAAMO,K,CAGR,IAAMC,EAAUR,EAAMS,KAAI,SAACC,GAAS,OAAAA,EAAKC,SAAW,CAAhB,IAAmBC,QAAO,SAACC,EAAGC,GAAM,OAAAD,EAAIC,CAAJ,GAAO,GAC/EX,KAAKC,KAAKW,MAAMC,YAAY,YAAa,GAAAC,OAAGT,IAE5C,GAAIL,KAAKG,WAAY,CACnB,IAAMY,EAAoBlB,EAAMO,MAChCW,EAAkBC,GAAKD,EAAkBC,IAAM,2BAAAF,OAA2BG,YAC1EjB,KAAKkB,oBAAsBH,EAAkBC,E,GAQzCtB,EAAAC,UAAAwB,WAAA,SAAWC,GACjB,IAAMC,EAAiBD,EAAME,OAAuBC,QAAQ,mBAC5D,IAAKvB,KAAKG,YAAckB,EAAe,CACrC,M,CAGFrB,KAAKwB,UAAYxB,KAAKwB,SACtBxB,KAAKyB,OAAOC,KAAK,CAACF,SAAUxB,KAAKwB,U,EAGnC9B,EAAAC,UAAAgC,kBAAA,WACE3B,KAAKJ,e,EAGPF,EAAAC,UAAAiC,OAAA,WACE,OACEC,EAACC,KAAI,CAAAC,IAAA,2CACHC,KAAK,MACLC,QAASjC,KAAKmB,WAAWe,KAAKlC,MAC9BwB,SAAUxB,KAAKwB,UAEfK,EAAA,OAAAE,IAAA,2CAAKI,MAAM,iCACRnC,KAAKG,YACJ0B,EAAA,UAAAE,IAAA,2DACiB/B,KAAKwB,SAAW,OAAS,QAAO,aACnCxB,KAAKwB,SAAW,gBAAkB,eAAc,gBAC7CxB,KAAKkB,oBACpBkB,KAAK,UAELP,EAAA,UAAAE,IAAA,2CAAQM,KAAMrC,KAAKwB,SAAW,gBAAkB,mBAItDK,EAAA,QAAAE,IAAA,2CAAMO,aAActC,KAAKJ,cAAcsC,KAAKlC,Q,gQAvFpC,G","ignoreList":[]}