{"version":3,"names":["stylesCss","ZToastNotificationListStyle0","ZToastNotificationList","ToastNotificationPosition","TOP_RIGHT","prototype","watchPropNewestontop","newValue","_a","this","hostElement","append","apply","notificationArray","reverse","shadowRoot","addEventListener","slotChangeHandler","removeEventListener","componentWillLoad","newestontop","handleNewestOnTop","Array","from","children","bind","_this","difference","filter","elem","includes","forEach","push","newElem","remove","prepend","render","h","key","name"],"sources":["src/components/z-toast-notification-list/styles.css?tag=z-toast-notification-list&encapsulation=shadow","src/components/z-toast-notification-list/index.tsx"],"sourcesContent":[":host {\n  position: fixed;\n  z-index: 10000;\n  display: flex;\n  flex-flow: column nowrap;\n  margin-top: calc(var(--space-unit) * 2);\n  margin-bottom: calc(var(--space-unit) * 2);\n  font-family: var(--font-family-sans);\n  font-weight: var(--font-rg);\n}\n\n::slotted(z-toast-notification) {\n  width: 100vw;\n}\n\n::slotted(:not(:last-child)) {\n  margin-bottom: calc(var(--space-unit) * 1);\n}\n\n:host([position=\"bottom-centre\"]),\n:host([position=\"bottom-right\"]),\n:host([position=\"bottom-left\"]) {\n  bottom: 0;\n  align-items: flex-end;\n  justify-content: flex-end;\n}\n\n:host([position=\"top-left\"]),\n:host([position=\"top-right\"]),\n:host([position=\"top-centre\"]) {\n  top: 0;\n  align-items: flex-start;\n  justify-content: flex-start;\n}\n\n/* Tablet breakpoint */\n@media only screen and (min-width: 768px) {\n  :host {\n    margin: calc(var(--space-unit) * 3);\n  }\n\n  :host([position=\"top-centre\"]) {\n    top: 0;\n    left: 50%;\n    align-items: center;\n    justify-content: flex-start;\n    transform: translateX(-50%);\n  }\n\n  :host([position=\"top-left\"]) {\n    top: 0;\n    left: 0;\n    align-items: flex-start;\n    justify-content: flex-start;\n  }\n\n  :host([position=\"top-right\"]) {\n    top: 0;\n    right: 0;\n    align-items: flex-end;\n    justify-content: flex-start;\n  }\n\n  :host([position=\"bottom-centre\"]) {\n    bottom: 0;\n    left: 50%;\n    align-items: center;\n    justify-content: flex-end;\n    transform: translateX(-50%);\n  }\n\n  :host([position=\"bottom-right\"]) {\n    right: 0;\n    bottom: 0;\n    align-items: flex-end;\n    justify-content: flex-end;\n  }\n\n  :host([position=\"bottom-left\"]) {\n    bottom: 0;\n    left: 0;\n    align-items: flex-start;\n    justify-content: flex-end;\n  }\n\n  ::slotted(z-toast-notification) {\n    width: 50vw;\n  }\n}\n\n/* Wide breakpoint */\n@media only screen and (min-width: 1366px) {\n  :host {\n    margin: calc(var(--space-unit) * 4);\n  }\n\n  ::slotted(z-toast-notification) {\n    width: 33vw;\n  }\n}\n","import {Component, Element, Prop, Watch, h} from \"@stencil/core\";\nimport {ToastNotificationPosition} from \"../../beans\";\n\n@Component({\n  tag: \"z-toast-notification-list\",\n  styleUrl: \"styles.css\",\n  shadow: true,\n})\nexport class ZToastNotificationList {\n  @Element() hostElement: HTMLZToastNotificationListElement;\n\n  /**Set the position of toast notification list - top-left, top-centre, top-right, bottom-left, bottom-centre, bottom-right */\n  @Prop({reflect: true})\n  position: ToastNotificationPosition = ToastNotificationPosition.TOP_RIGHT;\n\n  /**Set the entry position of new notification in the list */\n  @Prop()\n  newestontop?: boolean = true;\n\n  private notificationArray: Element[];\n\n  @Watch(\"newestontop\")\n  watchPropNewestontop(newValue: boolean): void {\n    this.hostElement.append(...this.notificationArray.reverse());\n    if (newValue) {\n      this.hostElement.shadowRoot.addEventListener(\"slotchange\", this.slotChangeHandler);\n    } else {\n      this.hostElement.shadowRoot.removeEventListener(\"slotchange\", this.slotChangeHandler);\n    }\n  }\n\n  componentWillLoad(): void {\n    if (this.newestontop) {\n      this.handleNewestOnTop();\n    }\n  }\n\n  private handleNewestOnTop(): void {\n    this.notificationArray = Array.from(this.hostElement.children);\n    this.hostElement.append(...this.notificationArray.reverse());\n    this.hostElement.shadowRoot.addEventListener(\"slotchange\", this.slotChangeHandler.bind(this));\n  }\n\n  private slotChangeHandler(): void {\n    const difference = Array.from(this.hostElement.children).filter((elem) => !this.notificationArray.includes(elem));\n    if (difference) {\n      difference.forEach((elem) => {\n        this.notificationArray.push(elem);\n        const newElem = elem;\n        elem.remove();\n        this.hostElement.prepend(newElem);\n      });\n    }\n  }\n\n  render(): HTMLSlotElement {\n    return <slot name=\"toasts\"></slot>;\n  }\n}\n"],"mappings":"yIAAA,IAAMA,UAAY,q5DAClB,IAAAC,6BAAeD,U,ICOFE,uBAAsB,W,qDAKKC,0BAA0BC,U,iBAIxC,I,CAKxBF,EAAAG,UAAAC,qBAAA,SAAqBC,G,OACnBC,EAAAC,KAAKC,aAAYC,OAAMC,MAAAJ,EAAIC,KAAKI,kBAAkBC,WAClD,GAAIP,EAAU,CACZE,KAAKC,YAAYK,WAAWC,iBAAiB,aAAcP,KAAKQ,kB,KAC3D,CACLR,KAAKC,YAAYK,WAAWG,oBAAoB,aAAcT,KAAKQ,kB,GAIvEf,EAAAG,UAAAc,kBAAA,WACE,GAAIV,KAAKW,YAAa,CACpBX,KAAKY,mB,GAIDnB,EAAAG,UAAAgB,kBAAA,W,MACNZ,KAAKI,kBAAoBS,MAAMC,KAAKd,KAAKC,YAAYc,WACrDhB,EAAAC,KAAKC,aAAYC,OAAMC,MAAAJ,EAAIC,KAAKI,kBAAkBC,WAClDL,KAAKC,YAAYK,WAAWC,iBAAiB,aAAcP,KAAKQ,kBAAkBQ,KAAKhB,M,EAGjFP,EAAAG,UAAAY,kBAAA,eAAAS,EAAAjB,KACN,IAAMkB,EAAaL,MAAMC,KAAKd,KAAKC,YAAYc,UAAUI,QAAO,SAACC,GAAS,OAACH,EAAKb,kBAAkBiB,SAASD,EAAjC,IAC1E,GAAIF,EAAY,CACdA,EAAWI,SAAQ,SAACF,GAClBH,EAAKb,kBAAkBmB,KAAKH,GAC5B,IAAMI,EAAUJ,EAChBA,EAAKK,SACLR,EAAKhB,YAAYyB,QAAQF,E,MAK/B/B,EAAAG,UAAA+B,OAAA,WACE,OAAOC,EAAA,QAAAC,IAAA,2CAAMC,KAAK,U,+QAhDa,G","ignoreList":[]}