{"version":3,"file":"args-controls.js","sourceRoot":"","sources":["../../../.storybook/elements/args-controls.tsx"],"names":[],"mappings":"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","sourcesContent":["/** @jsx React.createElement */\n/** @jsxFrag React.Fragment */\n\nimport {PresetColor, PureArgsTable, SortType} from \"@storybook/blocks\";\nimport {Badge, Spaced} from \"@storybook/components\";\nimport {includeConditionalArg} from \"@storybook/csf\";\nimport {useArgTypes, useArgs, useGlobals, useParameter, useStorybookState} from \"@storybook/manager-api\";\nimport {styled} from \"@storybook/theming\";\nimport {type ArgTypes} from \"@storybook/web-components\";\nimport React, {useEffect, useState} from \"react\";\n\nexport const ADDON_ID = \"args-controls\";\nexport const PARAM_KEY = \"addon-args-controls\";\n\ninterface ControlsParameters {\n  sort?: SortType;\n  expanded?: boolean;\n  presetColors?: PresetColor[];\n}\n\n/**\n * Filter argTypes to only include those listed in the story args.\n */\nconst getFilteredArgTypes = () => {\n  const argTypes = useArgTypes();\n  const args = useArgs()[0];\n\n  return Object.entries(argTypes).reduce((acc, [key, argType]) => {\n    if (key in args) {\n      if (argType.table && !argType.table.category) {\n        // set a category for the \"auxiliary\" args that are not part of the component but are used for demo purposes\n        argType.table.category = \"Story controls\";\n      }\n\n      if (argType.table?.category === \"css custom properties\" && argType.control?.[\"type\"] === \"object\") {\n        // fix control type for css custom properties. set text instead of the `object` automatically inferred by storybook\n        argType.control = Object.assign(argType.control ?? {}, {type: \"text\"});\n      }\n      acc[key] = argType;\n    }\n\n    return acc;\n  }, {} as ArgTypes);\n};\n\n/**\n * Custom title for the panel. Include controls count badge.\n */\nexport const ArgsControlsTitle = (() => {\n  const args = getFilteredArgTypes();\n  // TODO: sometimes the controlsCount is not accurate, because the ArgsTable use different condition to filter the args, especially when the args are conditional\n  const controlsCount = Object.values(args).filter(\n    (arg) => arg?.control && !arg.table?.disable && includeConditionalArg(arg, args, {})\n  ).length;\n\n  return (\n    <div>\n      <Spaced col={1}>\n        <span style={{display: \"inline-block\", verticalAlign: \"middle\"}}>Controls</span>\n        {controlsCount === 0 ? \"\" : <Badge status=\"neutral\">{controlsCount}</Badge>}\n      </Spaced>\n    </div>\n  );\n}) satisfies React.FC;\n\nconst AddonWrapper = styled.div({\n  display: \"grid\",\n  gridTemplateRows: \"1fr 39px\",\n  height: \"100%\",\n  maxHeight: \"100vh\",\n  overflowY: \"auto\",\n});\n\n/**\n * Custom controls panel that only shows controls for the args of the current Story.\n */\nexport const ArgsControls = (() => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [args, updateArgs, resetArgs] = useArgs();\n  const [globals] = useGlobals();\n  const {expanded, sort, presetColors} = useParameter<ControlsParameters>(\"args-controls\", {});\n  const {path, previewInitialized} = useStorybookState();\n  const rows = getFilteredArgTypes();\n\n  // If the story is prepared, then show the controls table\n  // and reset the loading states\n  useEffect(() => {\n    if (previewInitialized) {\n      setIsLoading(false);\n    }\n  }, [previewInitialized]);\n\n  const hasControls = Object.values(rows).some((arg) => arg?.control);\n\n  const withPresetColors = Object.entries(rows).reduce((acc, [key, arg]) => {\n    const control = arg?.control;\n    if (typeof control !== \"object\" || control?.type !== \"color\" || control?.presetColors) {\n      acc[key] = arg;\n    } else acc[key] = {...arg, control: {...control, presetColors}};\n\n    return acc;\n  }, {} as ArgTypes);\n\n  return (\n    <AddonWrapper>\n      <PureArgsTable\n        key={path} // resets state when switching stories\n        compact={!expanded && hasControls}\n        rows={withPresetColors}\n        args={args}\n        globals={globals}\n        updateArgs={updateArgs}\n        resetArgs={resetArgs}\n        inAddonPanel\n        sort={sort}\n        isLoading={isLoading}\n      />\n    </AddonWrapper>\n  );\n}) satisfies React.FC;\n"]}