{"version":3,"names":["stylesCss","ZTooltipStyle0","ZTooltip","PopoverPosition","AUTO","onPopoverOpenChange","this","open","popoverEl","render","h","key","ref","el","bindTo","position","closable","center","showArrow"],"sources":["src/components/notification/z-tooltip/styles.css?tag=z-tooltip&encapsulation=shadow","src/components/notification/z-tooltip/index.tsx"],"sourcesContent":[":host {\n  --z-tooltip-theme--surface: var(--color-surface01);\n  --z-tooltip-theme--text: var(--color-default-text);\n  --z-tooltip-shadow-filter: drop-shadow(0 1px 2px var(--shadow-color-base));\n}\n\n:host([dark]) z-popover {\n  --z-popover-theme--surface: var(--color-surface05);\n  --z-popover-theme--text: var(--color-text-inverse);\n}\n\nz-popover {\n  --z-popover-padding: var(--space-unit);\n  --z-popover-theme--surface: var(--z-tooltip-theme--surface);\n  --z-popover-theme--text: var(--z-tooltip-theme--text);\n  --z-popover-shadow-filter: var(--z-tooltip-shadow-filter);\n}\n","import {Component, Prop, h, Listen} from \"@stencil/core\";\nimport {PopoverPosition} from \"../../../beans\";\n\n/**\n * Tooltip component.\n * It is basically a wrapper for the `<z-popover>` component with custom configuration.\n *\n * @cssprop --z-tooltip-theme--surface - background color of the popover.\n * @cssprop --z-tooltip-theme--text - foreground color of the popover.\n * @cssprop --z-tooltip-shadow-filter - drop-shadow filter of the popover.\n */\n@Component({\n  tag: \"z-tooltip\",\n  styleUrl: \"styles.css\",\n  shadow: true,\n})\nexport class ZTooltip {\n  /** Tooltip position. */\n  @Prop({reflect: true})\n  position: PopoverPosition = PopoverPosition.AUTO;\n\n  /** Enable tooltip dark mode. */\n  @Prop({reflect: true})\n  dark = false;\n\n  /**\n   * The open state of the tooltip.\n   */\n  @Prop({reflect: true, mutable: true})\n  open = false;\n\n  /**\n   * The selector or the element bound with the tooltip.\n   */\n  @Prop()\n  bindTo?: string | HTMLElement;\n\n  /**\n   * Reflects `closable` prop of the popover.\n   * \"If true, the popover can be closed by clicking outside of it or pressing the escape key.\n   * Otherwise, it will be closed only programmatically (by setting `open` to `false`).\"\n   */\n  @Prop()\n  closable = true;\n\n  private popoverEl: HTMLZPopoverElement;\n\n  @Listen(\"openChange\")\n  onPopoverOpenChange(): void {\n    this.open = this.popoverEl.open;\n  }\n\n  render(): HTMLZPopoverElement {\n    return (\n      <z-popover\n        ref={(el) => (this.popoverEl = el as HTMLZPopoverElement)}\n        bindTo={this.bindTo}\n        open={this.open}\n        position={this.position}\n        closable={this.closable}\n        center\n        showArrow\n      >\n        <slot></slot>\n      </z-popover>\n    );\n  }\n}\n"],"mappings":"+EAAA,MAAMA,EAAY,4gBAClB,MAAAC,EAAeD,E,MCeFE,EAAQ,M,uCAGSC,EAAgBC,K,UAIrC,M,UAMA,M,oCAcI,I,CAKX,mBAAAC,GACEC,KAAKC,KAAOD,KAAKE,UAAUD,I,CAG7B,MAAAE,GACE,OACEC,EAAA,aAAAC,IAAA,2CACEC,IAAMC,GAAQP,KAAKE,UAAYK,EAC/BC,OAAQR,KAAKQ,OACbP,KAAMD,KAAKC,KACXQ,SAAUT,KAAKS,SACfC,SAAUV,KAAKU,SACfC,OAAM,KACNC,UAAS,MAETR,EAAA,QAAAC,IAAA,6C"}