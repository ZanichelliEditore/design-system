{"file":"z-toggle-switch.entry.js","mappings":";;;;;AAAA,MAAM,SAAS,GAAG,25EAA25E,CAAC;AAC96E,4BAAe,SAAS;;MCSX,aAAa;;;;wBAGH,KAAK;6BAIT,aAAa,CAAC,IAAI;uBAIf,KAAK;sBAIhB,oBAAoB,QAAQ,EAAE,EAAE;;IAMjC,eAAe;QACrB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;YACpB,EAAE,EAAE,IAAI,CAAC,MAAM;YACf,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CAAC,CAAC;KACJ;IAEO,WAAW,CAAC,EAAE;QACpB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO;SACR;QAED,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC;QACjC,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;IAED,MAAM;QACJ,QACE,EAAC,IAAI,uDACH,8DACE,EAAE,EAAE,IAAI,CAAC,MAAM,EACf,IAAI,EAAC,UAAU,EACf,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,GACrC,EACF,8DACE,OAAO,EAAE,IAAI,CAAC,MAAM,EACpB,KAAK,EAAE;gBACL,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI;gBAC1B,QAAQ,EAAE,IAAI,CAAC,QAAQ;aACxB,IAED,+DACE,8DAAQ,CACH,EACP,6DACE,KAAK,EAAE;gBACL,SAAS,EAAE,IAAI;gBACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,OAAO,EAAE,IAAI,CAAC,OAAO;aACtB,IAED,6DAAM,KAAK,EAAC,QAAQ,IACjB,IAAI,CAAC,OAAO,KACX,+DACE,KAAK,EAAE,EAAE,EACT,MAAM,EAAE,EAAE,EACV,IAAI,EAAC,WAAW,GACR,CACX,CACI,CACF,CACD,CACH,EACP;KACH;;;;;;","names":[],"sources":["src/components/z-toggle-switch/styles.css?tag=z-toggle-switch&encapsulation=scoped","src/components/z-toggle-switch/index.tsx"],"sourcesContent":[":host {\n  position: relative;\n  display: inline-flex;\n  font-family: var(--font-family-sans);\n  font-weight: var(--font-rg);\n}\n\nlabel {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  cursor: pointer;\n}\n\nlabel.disabled {\n  cursor: default;\n}\n\nlabel.right {\n  flex-direction: row-reverse;\n}\n\nlabel > span:first-child {\n  color: var(--color-default-text);\n  letter-spacing: 0;\n}\n\nlabel.left > span:first-child {\n  margin-right: var(--space-unit);\n}\n\nlabel.right > span:first-child {\n  margin-left: var(--space-unit);\n}\n\nlabel > span.container {\n  position: relative;\n  top: 1px;\n  left: 1px;\n  display: flex;\n  width: calc(var(--space-unit) * 4);\n  height: 18px;\n  align-items: center;\n  background-color: var(--gray500);\n  border-radius: var(--space-unit);\n  color: var(--gray500);\n  cursor: pointer;\n}\n\nlabel > span.container.disabled,\nlabel > span.container.checked.disabled {\n  background-color: var(--color-disabled01);\n  cursor: default;\n}\n\nlabel > span.container.checked.disabled > span.circle > z-icon {\n  fill: var(--color-disabled01);\n}\n\nlabel > span.container.checked {\n  background-color: var(--color-primary01);\n  fill: var(--color-primary01);\n}\n\ninput:focus:focus-visible + label > span.container:not(.disabled) {\n  box-shadow: var(--shadow-focus-primary);\n  outline: none;\n}\n\ninput:focus:focus-visible + label > span.container.disabled {\n  outline: none;\n}\n\nlabel > span.container:not(.disabled):hover {\n  background-color: var(--color-hover-primary);\n  fill: var(--color-hover-primary);\n}\n\nlabel > span.container > span.circle {\n  position: absolute;\n  top: 1px;\n  left: 1px;\n  display: flex;\n  width: calc(var(--space-unit) * 2);\n  height: calc(var(--space-unit) * 2);\n  align-items: center;\n  justify-content: center;\n  margin: 0;\n  background-color: var(--color-white);\n  border-radius: 7px;\n  box-shadow: var(--shadow-1);\n  transition: transform 0.3s ease;\n}\n\nlabel > span.container.checked > span.circle {\n  transform: translateX(calc(100% - 2px));\n}\n\ninput[type=\"checkbox\"] {\n  position: absolute;\n  z-index: -1;\n  opacity: 0;\n  pointer-events: none;\n}\n","import {Component, Event, EventEmitter, Host, Prop, h} from \"@stencil/core\";\nimport {LabelPosition} from \"../../beans\";\nimport {randomId} from \"../../utils/utils\";\n\n@Component({\n  tag: \"z-toggle-switch\",\n  styleUrl: \"styles.css\",\n  shadow: false,\n  scoped: true,\n})\nexport class ZToggleSwitch {\n  /** Disabled flag */\n  @Prop({reflect: true})\n  disabled?: boolean = false;\n\n  /** Label position */\n  @Prop({reflect: true})\n  labelPosition? = LabelPosition.LEFT;\n\n  /** Checked state */\n  @Prop({mutable: true})\n  checked?: boolean = false;\n\n  /** HTML id attribute to set to the internal checkbox */\n  @Prop()\n  htmlid = `toggle-switch-id-${randomId()}`;\n\n  /** Toggle click event */\n  @Event()\n  toggleClick: EventEmitter;\n\n  private emitToggleClick(): void {\n    this.toggleClick.emit({\n      id: this.htmlid,\n      checked: this.checked,\n    });\n  }\n\n  private handleClick(ev): void {\n    if (this.disabled) {\n      return;\n    }\n\n    this.checked = ev.target.checked;\n    this.emitToggleClick();\n  }\n\n  render(): HTMLZToggleSwitchElement {\n    return (\n      <Host>\n        <input\n          id={this.htmlid}\n          type=\"checkbox\"\n          checked={this.checked}\n          disabled={this.disabled}\n          onChange={this.handleClick.bind(this)}\n        />\n        <label\n          htmlFor={this.htmlid}\n          class={{\n            [this.labelPosition]: true,\n            disabled: this.disabled,\n          }}\n        >\n          <span>\n            <slot />\n          </span>\n          <span\n            class={{\n              container: true,\n              disabled: this.disabled,\n              checked: this.checked,\n            }}\n          >\n            <span class=\"circle\">\n              {this.checked && (\n                <z-icon\n                  width={12}\n                  height={12}\n                  name=\"checkmark\"\n                ></z-icon>\n              )}\n            </span>\n          </span>\n        </label>\n      </Host>\n    );\n  }\n}\n"],"version":3}