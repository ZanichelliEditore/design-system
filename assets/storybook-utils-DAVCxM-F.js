var l=(e=>(e.RED="red",e.GREEN="green",e.BLUE="blue",e.YELLOW="yellow",e.GRAY="gray",e.AVATAR="avatar",e.SUBJECT="subject",e))(l||{});function a(){return Array.from(document.styleSheets).flatMap(e=>Array.from(e.cssRules)).filter(e=>{var t;return e instanceof CSSStyleRule&&((t=e.selectorText)==null?void 0:t.includes(":root"))}).flatMap(e=>Object.values(e.style||{})).filter(Boolean)}function u(){const e=[...Object.values(l),"color"],t=a().filter(o=>e.some(r=>o.startsWith(`--${r}`)));return[...new Set(t)].sort()}function f(){return Object.values(l).reduce((e,t)=>{const o=a().filter(r=>r.startsWith(`--${t}`));return{...e,[t]:o.sort((r,s)=>+r.replace(/\D/g,"")-+s.replace(/\D/g,""))}},{})}function c(){return u().map(e=>`var(${e})`)}function i(){return c().reduce((e,t)=>{const o=t.replace(/^var\(--(.*)\)/,"$1");return{...e,[t]:o}},{null:"default"})}function g(){const e=a().filter(t=>t.startsWith("--color"));return[...new Set(e)]}function y(e,t){var s;const r=(s=Array.from(document.styleSheets).flatMap(n=>Array.from(n.cssRules)).filter(n=>n instanceof CSSStyleRule).find(n=>n.selectorText.includes(e)).styleMap.get(t))==null?void 0:s[0];return r instanceof CSSVariableReferenceValue?getComputedStyle(document.documentElement).getPropertyValue(r.variable):(r==null?void 0:r.toString())??void 0}function m(e=!1){const t=c();return e&&t.unshift(null),{options:t,control:{type:"select",labels:i()}}}export{m as a,g as b,y as c,f as d,u as g};
