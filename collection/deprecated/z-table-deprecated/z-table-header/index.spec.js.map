{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../src/deprecated/z-table-deprecated/z-table-header/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZTableHeader} from \"./index\";\n\ndescribe(\"Suite test ZTableHeader\", () => {\n  it(\"Test render ZTableHeader con slot\", async () => {\n    const page = await newSpecPage({\n      components: [ZTableHeader],\n      html: `<z-table-header><span>Test</span></z-table-header>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-table-header padding=\"medium\" role=\"columnheader\">\n        <mock:shadow-root>\n          <div class=\"container\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n        <span>\n          Test\n        </span>\n      </z-table-header>\n    `);\n  });\n\n  it(\"Test render ZTableHeader con role columnheader\", async () => {\n    const page = await newSpecPage({\n      components: [ZTableHeader],\n      html: `<z-table-header></z-table-header>`,\n    });\n\n    expect(page.root.getAttribute(\"role\")).toEqual(\"columnheader\");\n  });\n\n  it(\"Test render without icon when sortable is true and sort-direction is not defined\", async () => {\n    const page = await newSpecPage({\n      components: [ZTableHeader],\n      html: `<z-table-header sortable=\"true\"></z-table-header>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-table-header class=\"sortable\" padding=\"medium\" role=\"columnheader\" sortable=\"true\">\n        <mock:shadow-root>\n          <div class=\"container\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </z-table-header>\n    `);\n  });\n\n  it(\"Test render z-popover icon when showButton is true\", async () => {\n    const page = await newSpecPage({\n      components: [ZTableHeader],\n      html: `<z-table-header show-button=\"true\"></z-table-header>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-table-header padding=\"medium\" role=\"columnheader\" show-button=\"true\">\n        <mock:shadow-root>\n          <div class=\"container\">\n            <slot></slot>\n          </div>\n          <div class=\"popover-container\">\n          <z-button class=\"contextual-popover-button\" icon=\"contextual-menu\" size=\"x-small\" variant=\"tertiary\"></z-button>\n          <z-popover center=\"\" position=\"bottom\">\n            <div>\n              <slot name=\"contextual-menu\"></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-table-header>\n    `);\n  });\n\n  it(\"Test render ZTableHeader with correct size when size is x-small\", async () => {\n    const page = await newSpecPage({\n      components: [ZTableHeader],\n      html: `<z-table-header padding=\"x-small\"></z-table-header>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-table-header padding=\"x-small\" role=\"columnheader\">\n        <mock:shadow-root>\n          <div class=\"container\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </z-table-header>\n    `);\n  });\n\n  it(\"Test render ZTableHeader with correct size when size is small\", async () => {\n    const page = await newSpecPage({\n      components: [ZTableHeader],\n      html: `<z-table-header padding=\"small\"></z-table-header>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-table-header padding=\"small\" role=\"columnheader\">\n        <mock:shadow-root>\n          <div class=\"container\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </z-table-header>\n    `);\n  });\n\n  it(\"Test render ZTableHeader with correct size when size is medium\", async () => {\n    const page = await newSpecPage({\n      components: [ZTableHeader],\n      html: `<z-table-header size=\"medium\"></z-table-header>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-table-header padding=\"medium\" role=\"columnheader\" size=\"medium\">\n        <mock:shadow-root>\n          <div class=\"container\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </z-table-header>\n    `);\n  });\n\n  it(\"Test render ZTableHeader with correct size when size is large\", async () => {\n    const page = await newSpecPage({\n      components: [ZTableHeader],\n      html: `<z-table-header padding=\"large\"></z-table-header>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-table-header padding=\"large\" role=\"columnheader\">\n        <mock:shadow-root>\n          <div class=\"container\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </z-table-header>\n    `);\n  });\n\n  it(\"Test render ZTableHeader with correct size when size is special\", async () => {\n    const page = await newSpecPage({\n      components: [ZTableHeader],\n      html: `<z-table-header padding=\"special\"></z-table-header>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-table-header padding=\"special\" role=\"columnheader\">\n        <mock:shadow-root>\n          <div class=\"container\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </z-table-header>\n    `);\n  });\n\n  it(\"Test render correct arrow after click on header\", async () => {\n    const page = await newSpecPage({\n      components: [ZTableHeader],\n      html: `<z-table-header sortable=\"true\" column-id=\"col-1\"></z-table-header>`,\n    });\n\n    page.root.click();\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <z-table-header class=\"sortable\" padding=\"medium\" role=\"columnheader\" sortable=\"true\"  column-id=\"col-1\">\n        <mock:shadow-root>\n          <div class=\"container\">\n            <slot></slot>\n            <z-icon class=\"arrow\" name=\"arrow-up\"></z-icon>\n          </div>\n        </mock:shadow-root>\n      </z-table-header>\n    `);\n  });\n\n  it(\"Test render correct arrow after click twice on header\", async () => {\n    const page = await newSpecPage({\n      components: [ZTableHeader],\n      html: `<z-table-header sortable=\"true\" column-id=\"col-1\"></z-table-header>`,\n    });\n\n    page.root.click();\n    await page.waitForChanges();\n    page.root.click();\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <z-table-header class=\"sortable\" padding=\"medium\" role=\"columnheader\" sortable=\"true\" column-id=\"col-1\">\n        <mock:shadow-root>\n          <div class=\"container\">\n            <slot></slot>\n            <z-icon class=\"arrow\" name=\"arrow-down\"></z-icon>\n          </div>\n        </mock:shadow-root>\n      </z-table-header>\n    `);\n  });\n\n  it(\"Test render without arrow when sort-direction is none\", async () => {\n    const page = await newSpecPage({\n      components: [ZTableHeader],\n      html: `<z-table-header sortable=\"true\" sort-direction=\"none\" column-id=\"col-1\"></z-table-header>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-table-header class=\"sortable\" padding=\"medium\" role=\"columnheader\" sortable=\"true\" sort-direction=\"none\"  column-id=\"col-1\">\n        <mock:shadow-root>\n          <div class=\"container\">\n            <slot></slot>\n          </div>\n        </mock:shadow-root>\n      </z-table-header>\n    `);\n  });\n\n  it(\"Test render correct arrow when sort-direction is asc\", async () => {\n    const page = await newSpecPage({\n      components: [ZTableHeader],\n      html: `<z-table-header sortable=\"true\" sort-direction=\"asc\" column-id=\"col-1\"></z-table-header>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-table-header class=\"sortable\" padding=\"medium\" role=\"columnheader\" sortable=\"true\" sort-direction=\"asc\" column-id=\"col-1\">\n        <mock:shadow-root>\n          <div class=\"container\">\n            <slot></slot>\n            <z-icon class=\"arrow\" name=\"arrow-up\"></z-icon>\n          </div>\n        </mock:shadow-root>\n      </z-table-header>\n    `);\n  });\n\n  it(\"Test render correct arrow when sort-direction is desc\", async () => {\n    const page = await newSpecPage({\n      components: [ZTableHeader],\n      html: `<z-table-header sortable=\"true\" sort-direction=\"desc\" column-id=\"col-1\"></z-table-header>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-table-header class=\"sortable\" padding=\"medium\" role=\"columnheader\" sortable=\"true\" sort-direction=\"desc\" column-id=\"col-1\">\n        <mock:shadow-root>\n          <div class=\"container\">\n            <slot></slot>\n            <z-icon class=\"arrow\" name=\"arrow-down\"></z-icon>\n          </div>\n        </mock:shadow-root>\n      </z-table-header>\n    `);\n  });\n});\n"]}