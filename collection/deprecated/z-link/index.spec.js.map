{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../src/deprecated/z-link/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZLink} from \"./index\";\n\ndescribe(\"Suite test ZLink\", () => {\n  it(\"Test render ZLink vuoto\", async () => {\n    const page = await newSpecPage({\n      components: [ZLink],\n      html: `<z-link></z-link>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-link>\n        <mock:shadow-root>\n          <a class=\"primary\" role=\"button\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n      </z-link>\n    `);\n  });\n\n  it(\"Test render ZLink con link\", async () => {\n    const page = await newSpecPage({\n      components: [ZLink],\n      html: `<z-link href=\"http://www.google.com/\"></z-link>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-link href=\"http://www.google.com/\">\n        <mock:shadow-root>\n          <a href=\"http://www.google.com/\" class=\"primary\" role=\"link\"  tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n      </z-link>\n    `);\n  });\n\n  it(\"Test render ZLink con label\", async () => {\n    const page = await newSpecPage({\n      components: [ZLink],\n      html: `<z-link>label</z-link>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-link>\n        <mock:shadow-root>\n          <a class=\"primary\" role=\"button\"  tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n        label\n      </z-link>\n    `);\n  });\n\n  it(\"Test render ZLink con icon\", async () => {\n    const page = await newSpecPage({\n      components: [ZLink],\n      html: `<z-link icon=\"icon\"></z-link>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-link icon=\"icon\">\n        <mock:shadow-root>\n          <a class=\"primary\" role=\"button\" tabindex=\"0\" target=\"_self\">\n            <z-icon name=\"icon\" style=\"--z-icon-width: 18px; --z-icon-height: 18px;\"></z-icon>\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n      </z-link>\n    `);\n  });\n\n  it(\"Test render ZLink disabled\", async () => {\n    const page = await newSpecPage({\n      components: [ZLink],\n      html: `<z-link isdisabled></z-link>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-link isdisabled>\n        <mock:shadow-root>\n          <a class=\"primary disabled\" role=\"button\"  tabindex=\"-1\" target=\"_self\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n      </z-link>\n    `);\n  });\n\n  it(\"Test render ZLink white\", async () => {\n    const page = await newSpecPage({\n      components: [ZLink],\n      html: `<z-link iswhite></z-link>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-link iswhite>\n        <mock:shadow-root>\n          <a class=\"primary white\" role=\"button\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n      </z-link>\n    `);\n  });\n\n  it(\"Test render ZLink target\", async () => {\n    const page = await newSpecPage({\n      components: [ZLink],\n      html: `<z-link target=\"_blank\"></z-link>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-link target=\"_blank\">\n        <mock:shadow-root>\n          <a class=\"primary\" role=\"button\" tabindex=\"0\" target=\"_blank\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n      </z-link>\n    `);\n  });\n\n  it(\"Test render ZLink active\", async () => {\n    const page = await newSpecPage({\n      components: [ZLink],\n      html: `<z-link isactive></z-link>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-link isactive>\n        <mock:shadow-root>\n          <a class=\"active primary\" role=\"button\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n      </z-link>\n    `);\n  });\n\n  it(\"Test render ZLink textcolor black\", async () => {\n    const page = await newSpecPage({\n      components: [ZLink],\n      html: `<z-link textcolor=\"black\"></z-link>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-link textcolor=\"black\">\n        <mock:shadow-root>\n          <a class=\"black\" role=\"button\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n      </z-link>\n    `);\n  });\n\n  it(\"Test render ZLink textcolor white\", async () => {\n    const page = await newSpecPage({\n      components: [ZLink],\n      html: `<z-link textcolor=\"white\"></z-link>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-link textcolor=\"white\">\n        <mock:shadow-root>\n          <a class=\"white\" role=\"button\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n      </z-link>\n    `);\n  });\n\n  it(\"Test render ZLink big\", async () => {\n    const page = await newSpecPage({\n      components: [ZLink],\n      html: `<z-link big></z-link>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-link big>\n        <mock:shadow-root>\n          <a class=\"primary\" role=\"button\" tabindex=\"0\" target=\"_self\">\n            <slot></slot>\n          </a>\n        </mock:shadow-root>\n      </z-link>\n    `);\n  });\n});\n"]}