{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../../src/snowflakes/myz/z-otp/index.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,IAAI,EAAC,MAAM,SAAS,CAAC;AAE7B,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,IAAI,EAAE,iBAAiB;SACxB,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;KAgB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QAClD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,IAAI,EAAE,8BAA8B;SACrC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;KAgB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACrD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,IAAI,EAAE,yDAAyD;SAChE,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;KAgB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZOtp} from \"./index\";\n\ndescribe(\"Suite test ZOtp\", () => {\n  it(\"Test render ZOtp senza prop\", async () => {\n    const page = await newSpecPage({\n      components: [ZOtp],\n      html: `<z-otp></z-otp>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-otp>\n        <mock:shadow-root>\n          <div class='otp-container'>\n            <div class=\"digits-container\">\n              <input type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n              <input type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n              <input type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n              <input type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n              <input type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n              <input type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n            </div>\n            <z-input-message></z-input-message>\n          </div>\n        </mock:shadow-root>\n      </z-otp>\n    `);\n  });\n\n  it(\"Test render ZOtp con prop inputNum\", async () => {\n    const page = await newSpecPage({\n      components: [ZOtp],\n      html: `<z-otp inputNum='3'></z-otp>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-otp inputNum='3'>\n        <mock:shadow-root>\n          <div class='otp-container'>\n            <div class=\"digits-container\">\n              <input type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n              <input type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n              <input type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n              <input type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n              <input type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n              <input type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n            </div>\n            <z-input-message></z-input-message>\n          </div>\n        </mock:shadow-root>\n      </z-otp>\n    `);\n  });\n\n  it(\"Test render ZOtp con messaggio errore\", async () => {\n    const page = await newSpecPage({\n      components: [ZOtp],\n      html: `<z-otp status='error' message='Otp non valido'></z-otp>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-otp status='error' message='Otp non valido'>\n        <mock:shadow-root>\n          <div class='otp-container'>\n            <div class=\"digits-container\">\n              <input class=\"error\" type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n              <input class=\"error\" type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n              <input class=\"error\" type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n              <input class=\"error\" type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n              <input class=\"error\" type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n              <input class=\"error\" type=\"text\" autocomplete=\"off\" minlength=\"1\" maxlength=\"1\">\n            </div>\n            <z-input-message status='error' message='Otp non valido'></z-input-message>\n          </div>\n        </mock:shadow-root>\n      </z-otp>\n    `);\n  });\n});\n"]}