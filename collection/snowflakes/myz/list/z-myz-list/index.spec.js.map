{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../../../src/snowflakes/myz/list/z-myz-list/index.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,YAAY,EAAC,MAAM,0BAA0B,CAAC;AAEtD,OAAO,EAAC,QAAQ,EAAC,MAAM,SAAS,CAAC;AAEjC,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC;YACpC,IAAI,EAAE,2BAA2B;SAClC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;KAO7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC1D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC;YACpC,IAAI,EAAE,2BAA2B;SAClC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,6BAA6B,CAAC;QACvD,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;KAiB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC;YACpC,IAAI,EAAE,oGAAoG;SAC3G,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;KAiB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC;YACpC,IAAI,EAAE,0HAA0H;SACjI,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA6B7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC;YACpC,IAAI,EAAE,2BAA2B;SAClC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;KAO7B,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,CAAC,YAAY,GAAG,+BAA+B,CAAC;QACjE,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;KAiB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZMyzListItem} from \"../z-myz-list-item/index\";\n\nimport {ZMyzList} from \"./index\";\n\ndescribe(\"Suite test z-myz-list\", () => {\n  it(\"Test render lista vuota\", async () => {\n    const page = await newSpecPage({\n      components: [ZMyzList, ZMyzListItem],\n      html: `<z-myz-list></z-myz-list>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <z-myz-list>\n        <mock:shadow-root>\n          <ul>\n          </ul>\n        </mock:shadow-root>\n      </z-myz-list>\n    `);\n  });\n\n  it(\"Test render lista con un elemento testuale\", async () => {\n    const page = await newSpecPage({\n      components: [ZMyzList, ZMyzListItem],\n      html: `<z-myz-list></z-myz-list>`,\n    });\n\n    page.root.inputrawdata = '[{\"text\":\"elemento lista\"}]';\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n    <z-myz-list>\n        <mock:shadow-root>\n          <ul>\n            <z-myz-list-item>\n              <mock:shadow-root>\n                <li role=\"button\">\n                  <span>\n                      <span>elemento lista</span>\n                      <slot></slot>\n                  </span>\n                </li>\n              </mock:shadow-root>\n            </z-myz-list-item>\n          </ul>\n        </mock:shadow-root>\n      </z-myz-list>\n    `);\n  });\n\n  it(\"Test render lista con un elemento link\", async () => {\n    const page = await newSpecPage({\n      components: [ZMyzList, ZMyzListItem],\n      html: `<z-myz-list inputrawdata='[{\"text\":\"elemento lista\",\"link\":\"http://www.google.it\"}]'></z-myz-list>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <z-myz-list inputrawdata='[{\"text\":\"elemento lista\",\"link\":\"http://www.google.it\"}]'>\n        <mock:shadow-root>\n          <ul>\n            <z-myz-list-item>\n              <mock:shadow-root>\n                <li role=\"button\">\n                  <span>\n                    <a href=\"http://www.google.it\" target=\"_self\" role=\"link\" tabindex=\"0\"> elemento lista</a>\n                    <slot></slot>\n                  </span>\n                </li>\n              </mock:shadow-root>\n            </z-myz-list-item>\n          </ul>\n        </mock:shadow-root>\n      </z-myz-list>\n    `);\n  });\n\n  it(\"Test render lista 2 un elemento, testo e link\", async () => {\n    const page = await newSpecPage({\n      components: [ZMyzList, ZMyzListItem],\n      html: `<z-myz-list inputrawdata='[{\"text\":\"elemento lista\"},{\"text\":\"link lista\",\"link\":\"http://www.google.it\"}]'></z-myz-list>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <z-myz-list inputrawdata=\"[{&quot;text&quot;:&quot;elemento lista&quot;},{&quot;text&quot;:&quot;link lista&quot;,&quot;link&quot;:&quot;http://www.google.it&quot;}]\">\n      <mock:shadow-root>\n        <ul>\n          <z-myz-list-item>\n            <mock:shadow-root>\n              <li role=\"button\">\n                <span class=\"border\">\n                  <span>elemento lista</span>\n                  <slot></slot>\n                </span>\n              </li>\n            </mock:shadow-root>\n          </z-myz-list-item>\n          <z-myz-list-item>\n            <mock:shadow-root>\n              <li role=\"button\">\n                <span>\n                  <a href=\"http://www.google.it\" tabindex=\"0\" target=\"_self\" role=\"link\">\n                    link lista\n                  </a>\n                  <slot></slot>\n                </span>\n              </li>\n            </mock:shadow-root>\n          </z-myz-list-item>\n        </ul>\n      </mock:shadow-root>\n    </z-myz-list>\n    `);\n  });\n\n  it(\"Test aggiornamento lista da proprietÃ  raw\", async () => {\n    const page = await newSpecPage({\n      components: [ZMyzList, ZMyzListItem],\n      html: `<z-myz-list></z-myz-list>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <z-myz-list>\n        <mock:shadow-root>\n          <ul>\n          </ul>\n        </mock:shadow-root>\n      </z-myz-list>\n    `);\n\n    page.rootInstance.inputrawdata = '[{\"text\":\"testo di esempio\"}]';\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n    <z-myz-list>\n        <mock:shadow-root>\n          <ul>\n            <z-myz-list-item>\n              <mock:shadow-root>\n                <li role=\"button\">\n                  <span>\n                      <span>testo di esempio</span>\n                      <slot></slot>\n                  </span>\n                </li>\n              </mock:shadow-root>\n            </z-myz-list-item>\n          </ul>\n        </mock:shadow-root>\n      </z-myz-list>\n    `);\n  });\n});\n"]}