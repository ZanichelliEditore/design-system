{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../../src/snowflakes/myz/list/z-myz-list-item/index.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,YAAY,EAAC,MAAM,SAAS,CAAC;AAErC,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;IAC1C,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,qCAAqC;SAC5C,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;KAW7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;QAC5B,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,kDAAkD;SACzD,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;KAW7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;QAC5B,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,gFAAgF;SACvF,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;KAa7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;QAC5B,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,yDAAyD;SAChE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;KAY7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZMyzListItem} from \"./index\";\n\ndescribe(\"Suite test z-myz-list-item\", () => {\n  it(\"Empty list item with shadow dom\", async () => {\n    const page = await newSpecPage({\n      components: [ZMyzListItem],\n      html: `<z-myz-list-item></z-myz-list-item>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-myz-list-item>\n        <mock:shadow-root>\n          <li role=\"button\">\n            <span class=\"border\">\n              <span></span>\n              <slot></slot>\n            </span>\n          </li>\n        </mock:shadow-root>\n      </z-myz-list-item>\n    `);\n  });\n\n  it(\"Text element\", async () => {\n    const page = await newSpecPage({\n      components: [ZMyzListItem],\n      html: `<z-myz-list-item text='testo'></z-myz-list-item>`,\n    });\n    expect(page.root).toEqualHtml(`\n     <z-myz-list-item text=\"testo\">\n      <mock:shadow-root>\n        <li role=\"button\">\n          <span class=\"border\">\n            <span>testo</span>\n            <slot></slot>\n          </span>\n        </li>\n      </mock:shadow-root>\n    </z-myz-list-item>\n    `);\n  });\n\n  it(\"Link element\", async () => {\n    const page = await newSpecPage({\n      components: [ZMyzListItem],\n      html: `<z-myz-list-item text='testo' link =='http://www.google.it'></z-myz-list-item>`,\n    });\n    expect(page.root).toEqualHtml(`\n     <z-myz-list-item link=\"='http://www.google.it'\" text=\"testo\">\n      <mock:shadow-root>\n        <li role=\"button\">\n          <span class=\"border\">\n            <a href=\"='http://www.google.it'\" target=\"_self\" tabindex=\"0\" role=\"link\">\n              testo\n            </a>\n            <slot></slot>\n          </span>\n        </li>\n      </mock:shadow-root>\n    </z-myz-list-item>\n    `);\n  });\n\n  it(\"Slot element\", async () => {\n    const page = await newSpecPage({\n      components: [ZMyzListItem],\n      html: `<z-myz-list-item>z list inner content</z-myz-list-item>`,\n    });\n    expect(page.root).toEqualHtml(`\n     <z-myz-list-item>\n      <mock:shadow-root>\n        <li role=\"button\">\n          <span class=\"border\">\n            <span></span>\n            <slot></slot>\n          </span>\n        </li>\n      </mock:shadow-root>\n      z list inner content\n    </z-myz-list-item>\n    `);\n  });\n});\n"]}