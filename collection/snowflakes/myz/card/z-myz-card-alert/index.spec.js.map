{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../../../src/snowflakes/myz/card/z-myz-card-alert/index.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,aAAa,EAAC,MAAM,SAAS,CAAC;AAEtC,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,aAAa,CAAC;YAC3B,IAAI,EAAE,uJAAuJ;SAC9J,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;KAkB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,aAAa,CAAC;YAC3B,IAAI,EAAE,sIAAsI;SAC7I,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;KAmB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACrD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,aAAa,CAAC;YAC3B,IAAI,EAAE,kIAAkI;SACzI,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;KAgB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,aAAa,CAAC;YAC3B,IAAI,EAAE,0JAA0J;SACjK,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;KAmB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,aAAa,CAAC;YAC3B,IAAI,EAAE,qIAAqI;SAC5I,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;KAgB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZMyzCardAlert} from \"./index\";\n\ndescribe(\"Suite test ZMyzCardAlert\", () => {\n  it(\"Test render ZMyzCardAlert add\", async () => {\n    const page = await newSpecPage({\n      components: [ZMyzCardAlert],\n      html: `<z-myz-card-alert slot=\"alert\" iconName=\"circle-check\" contenttext=\"Libro aggiunto ai miei libri\" actiontext=\"Annulla\" type=\"add\"></z-myz-card-alert>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <z-myz-card-alert actiontext=\"Annulla\" contenttext=\"Libro aggiunto ai miei libri\" iconname=\"circle-check\" slot=\"alert\" type=\"add\">\n      <mock:shadow-root>\n        <div class=\"add-alert alert-external-wrapper\">\n            <z-alert type=\"success\">\n              <div class=\"relative-container\">\n                <z-icon class=\"add-alert\" height=\"18\" name=\"circle-check\" width=\"18\"></z-icon>\n                  <span class=\"content-text\">\n                    Libro aggiunto ai miei libri\n                  </span>\n                  <span class=\"content-action\" role=\"button\" tabindex=\"0\">\n                    Annulla\n                  </span>\n              </div>\n            </z-alert>\n        </mock:shadow-root>\n      </div>\n    </z-card-alert>\n    `);\n  });\n\n  it(\"Test render ZMyzCardAlert (type add)\", async () => {\n    const page = await newSpecPage({\n      components: [ZMyzCardAlert],\n      html: `<z-myz-card-alert iconName=\"circle-check\" contenttext=\"Libro aggiunto ai miei libri\" actiontext=\"Annulla\" type=\"add\"></z-card-alert>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <z-myz-card-alert iconName=\"circle-check\" contenttext=\"Libro aggiunto ai miei libri\" actiontext=\"Annulla\" type=\"add\">\n      <mock:shadow-root>\n        <div class=\"add-alert alert-external-wrapper\">\n            <z-alert type=\"success\">\n              <div class=\"relative-container\">\n                <z-icon class=\"add-alert\" name=\"circle-check\" height=\"18\" width=\"18\"></z-icon>\n                <span class=\"content-text\">\n                  Libro aggiunto ai miei libri\n                </span>\n                <span class=\"content-action\" role=\"button\" tabindex=\"0\">\n                  Annulla\n                </span>\n              </div>\n            </z-alert>\n          </mock:shadow-root>\n        </div>\n      </mock:shadow-root>\n    </z-myz-card-alert>\n    `);\n  });\n\n  it(\"Test render ZMyzCardAlert add no undo\", async () => {\n    const page = await newSpecPage({\n      components: [ZMyzCardAlert],\n      html: `<z-myz-card-alert slot=\"alert\" iconName=\"circle-check\" contenttext=\"Libro aggiunto ai miei libri\" type=\"add\"></z-myz-card-alert>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <z-myz-card-alert contenttext=\"Libro aggiunto ai miei libri\" iconname=\"circle-check\" slot=\"alert\" type=\"add\">\n      <mock:shadow-root>\n        <div class=\"add-alert alert-external-wrapper\">\n            <z-alert type=\"success\">\n              <div class=\"relative-container\">\n                <z-icon class=\"add-alert\" name=\"circle-check\" height=\"18\" width=\"18\"></z-icon>\n                <span class=\"content-text\">\n                  Libro aggiunto ai miei libri\n                </span>\n              </div>\n            </z-alert>\n          </mock:shadow-root>\n        </div>\n      </mock:shadow-root>\n    </z-myz-card-alert>\n    `);\n  });\n\n  it(\"Test render ZMyzCardAlert remove\", async () => {\n    const page = await newSpecPage({\n      components: [ZMyzCardAlert],\n      html: `<z-myz-card-alert slot=\"alert\" iconName=\"circle-check\" contenttext=\"Libro rimosso dai miei libri\" actiontext=\"Annulla\" type=\"remove\"></z-myz-card-alert>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <z-myz-card-alert actiontext=\"Annulla\" contenttext=\"Libro rimosso dai miei libri\" iconname=\"circle-check\" slot=\"alert\" type=\"remove\">\n      <mock:shadow-root>\n        <div class=\"remove-alert alert-external-wrapper\">\n            <z-alert type=\"warning\">\n              <div class=\"relative-container\">\n                <z-icon class=\"remove-alert\" name=\"circle-check\" height=\"18\" width=\"18\"></z-icon>\n                <span class=\"content-text\">\n                  Libro rimosso dai miei libri\n                </span>\n                <span class=\"content-action\" role=\"button\" tabindex=\"0\">\n                  Annulla\n                </span>\n              </div>\n            </z-alert>\n          </mock:shadow-root>\n        </div>\n      </mock:shadow-root>\n    </z-myz-card-alert>\n    `);\n  });\n\n  it(\"Test render ZMyzCardAlert remove no undo\", async () => {\n    const page = await newSpecPage({\n      components: [ZMyzCardAlert],\n      html: `<z-myz-card-alert slot=\"alert\" iconName=\"circle-check\" contenttext=\"Libro rimosso dai miei libri\" type=\"remove\"></z-myz-card-alert>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <z-myz-card-alert contenttext=\"Libro rimosso dai miei libri\" iconname=\"circle-check\" slot=\"alert\" type=\"remove\">\n      <mock:shadow-root>\n        <div class=\"remove-alert alert-external-wrapper\">\n            <z-alert type=\"warning\">\n              <div class=\"relative-container\">\n                <z-icon class=\"remove-alert\" name=\"circle-check\" height=\"18\" width=\"18\"></z-icon>\n                <span class=\"content-text\">\n                  Libro rimosso dai miei libri\n                </span>\n              </div>\n            </z-alert>\n          </mock:shadow-root>\n        </div>\n      </mock:shadow-root>\n    </z-myz-card-alert>\n    `);\n  });\n});\n"]}