{"version":3,"file":"index.stories.js","sourceRoot":"","sources":["../../../../../src/components/table/z-table/index.stories.ts"],"names":[],"mappings":"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","sourcesContent":["import {Meta} from \"@storybook/web-components\";\nimport {html, type TemplateResult} from \"lit\";\nimport {repeat} from \"lit/directives/repeat.js\";\nimport {styleMap} from \"lit/directives/style-map.js\";\nimport {type ZTable} from \".\";\nimport {PopoverPosition, SortDirection, VisibilityCondition} from \"../../../beans\";\nimport {CSSVarsArguments} from \"../../../utils/storybook-utils\";\nimport \"../../z-button/index\";\nimport \"./index\";\nimport \"./index.stories.css\";\n\ntype ZTableStoriesArgs = ZTable & CSSVarsArguments<\"z-table--cells-padding\">;\n\n/**\n * ## Accessibility\n *\n * The `ZTable` and its related components comes with a set of roles and ARIA attributes to help screen readers to understand the table structure and its content.\n * The roles are mainly used to identify the table parts, since they are not the native HTML table elements.\n * The ARIA attributes used are the following:\n * - [`aria-sort`](https://www.w3.org/TR/wai-aria-1.1/#aria-sort) to identify the sorting direction of a column when sorting is enabled\n * - [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.1/#aria-expanded) to identify if a row is expanded or not when expandable rows are enabled. The attribute is set on the button that expands the row, as explained in the [docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)\n * - [`aria-controls`](https://www.w3.org/TR/wai-aria-1.1/#aria-controls) is used on the expandable row button to identify the content that is controlled by the button itself, as explained in the [docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls). Maybe the `aria-owns` attribute were more appropriate, but it is not supported on MacOS and iOS with VoiceOver, so we used `aria-controls` instead.\n * - [`aria-label`](https://www.w3.org/TR/wai-aria-1.1/#aria-label) is used on the expandable row button to provide a label for the button, since the button doesn't have any text content.\n */\nconst StoryMeta = {\n  title: \"ZTable\",\n  component: \"z-table\",\n  args: {\n    \"bordered\": true,\n    \"--z-table--cells-padding\": \"16px\",\n  },\n} satisfies Meta<ZTableStoriesArgs>;\n\nexport default StoryMeta;\n\nconst cellsTemplate = (count = 1): TemplateResult =>\n  html`${repeat([...new Array(count)], () => html`<z-td>Contenuto cella</z-td>`)}`;\n\nexport const Default = {\n  render: (args) =>\n    html`<z-table\n      class=\"z-table-demo\"\n      .bordered=${args.bordered}\n      style=${styleMap({\n        \"--z-table--cells-padding\": args[\"--z-table--cells-padding\"],\n      })}\n    >\n      <z-thead>\n        <z-tr>${repeat([...new Array(8)], () => html`<z-th>Titolo colonna</z-th>`)}</z-tr>\n      </z-thead>\n      <z-tbody>${repeat([...new Array(5)], () => html`<z-tr>${cellsTemplate(8)}</z-tr>`)}</z-tbody>\n      <z-tfoot>\n        <z-tr>\n          <z-td colspan=\"8\">Table footer</z-td>\n        </z-tr>\n      </z-tfoot>\n    </z-table>`,\n};\n\n/**\n * Just set `expandable` prop on the `z-tr` element to make it expandable, then put an additional `z-td` as extended content.\n * If you put a clickable item as a child cell of a z-tr with `expandable` set to `true`, you need to set a \"prevent-expand\" class on that item, in order to prevent unwanted row expansions.\n */\nexport const ExpandableRows = {\n  render: (args) =>\n    html`<z-table\n      class=\"z-table-demo\"\n      .bordered=${args.bordered}\n      style=${styleMap({\n        \"--z-table--cells-padding\": args[\"--z-table--cells-padding\"],\n      })}\n    >\n      <z-thead>\n        <z-tr>${repeat([...new Array(8)], (_, index) => html`<z-th>Colonna ${index + 1}</z-th>`)}</z-tr>\n      </z-thead>\n      <z-tbody>\n        <z-tr>\n          <z-td>Contenuto cella</z-td>\n          <z-td>Contenuto cella</z-td>\n          <z-td show-menu>\n            <span>Contenuto cella con menu</span>\n            <div slot=\"contextual-menu\">Contenuto del popover</div></z-td\n          >\n          ${cellsTemplate(5)}\n        </z-tr>\n        <z-tr>${repeat([...new Array(8)], () => html`<z-td>Contenuto cella</z-td>`)}</z-tr>\n        <z-tr expandable>\n          <z-td>Contenuto cella</z-td>\n          <z-td>Contenuto cella</z-td>\n          <z-td>\n            <span>Contenuto cella</span>\n            <z-button\n              class=\"prevent-expand\"\n              onclick=\"alert('button clicked without expanding the row')\"\n              icon=\"plus\"\n              size=\"x-small\"\n            ></z-button\n          ></z-td>\n          ${cellsTemplate(5)}\n          <z-td>Contenuto espanso</z-td>\n        </z-tr>\n        <z-tr>${cellsTemplate(8)}</z-tr>\n        <z-tr expandable>\n          <z-td>Contenuto cella</z-td>\n          <z-td show-menu=\"always\">\n            <span>Contenuto cella con menu</span>\n            <div slot=\"contextual-menu\">Contenuto del popover</div></z-td\n          >\n          ${cellsTemplate(6)}\n          <z-td>Contenuto espanso</z-td>\n        </z-tr>\n      </z-tbody>\n      <z-tfoot>\n        <z-tr>\n          <z-td colspan=\"8\">Table footer</z-td>\n        </z-tr>\n      </z-tfoot>\n    </z-table>`,\n};\n\n/**\n * To make a column sticky, you need to set the `sticky` prop on the `z-th` and/or `z-td` elements of the same column.\n * For the header or footer, just set the `sticky` prop on the `z-thead` or `z-tfoot` element.\n */\nexport const Sticky = {\n  args: {\n    stickyHeader: true,\n    stickyFooter: true,\n    stickFirstColumn: true,\n  },\n  render: (args) =>\n    html`<z-table\n      class=\"z-table-demo\"\n      .bordered=${args.bordered}\n      style=${styleMap({\n        \"--z-table--cells-padding\": args[\"--z-table--cells-padding\"],\n        \"height\": \"400px\",\n      })}\n    >\n      <z-thead .sticky=${args.stickyHeader}>\n        <z-tr>\n          <z-th .sticky=${args.stickFirstColumn}>Colonna 1</z-th>\n          ${repeat([...new Array(7)], (_, index) => html`<z-th>Colonna ${index + 2}</z-th>`)}\n        </z-tr>\n      </z-thead>\n      <z-tbody>\n        <z-tr>\n          <z-td .sticky=${args.stickFirstColumn}>Contenuto cella 1</z-td>\n          <z-td>Contenuto cella</z-td>\n          <z-td>Contenuto cella</z-td>\n          <z-td show-menu>\n            <span>Contenuto cella con menu</span>\n            <div slot=\"contextual-menu\">Contenuto del popover</div></z-td\n          >\n          ${cellsTemplate(4)}\n        </z-tr>\n        ${repeat(\n          [...new Array(5)],\n          () =>\n            html`<z-tr>\n              <z-td .sticky=${args.stickFirstColumn}>Contenuto cella 1</z-td>\n              ${cellsTemplate(7)}\n            </z-tr>`\n        )}\n        <z-tr expandable>\n          <z-td .sticky=${args.stickFirstColumn}>Contenuto cella 1</z-td>\n          ${cellsTemplate(6)}\n          <z-td>\n            <span>Contenuto cella</span>\n            <z-button\n              class=\"prevent-expand\"\n              onclick=\"alert('button clicked')\"\n              icon=\"plus\"\n              size=\"x-small\"\n            ></z-button\n          ></z-td>\n          <z-td>Contenuto espanso</z-td>\n        </z-tr>\n        <z-tr expandable>\n          <z-td .sticky=${args.stickFirstColumn}>Contenuto cella 1</z-td>\n          ${cellsTemplate(7)}\n          <z-td>Contenuto espanso</z-td>\n        </z-tr>\n      </z-tbody>\n      <z-tfoot .sticky=${args.stickyFooter}>\n        <z-tr>\n          <z-td colspan=\"8\">Table footer</z-td>\n        </z-tr>\n      </z-tfoot>\n    </z-table>`,\n};\n\n/**\n * Use the `showMenu` prop on `z-td` or `z-th`, setting a value of the enum `VisibilityCondition` (`HOVER` or `ALWAYS`), to show a contextual menu button on the cell. The content of the menu must be placed using the slot `contextual-menu`.\n * Use `popoverPosition` prop on `z-th` to set the position of contextual menu, default is `auto`.\n */\nexport const CellsWithContextualMenu = {\n  argTypes: {\n    showMenu: {\n      control: {\n        type: \"inline-radio\",\n        labels: {\n          null: \"hidden\",\n        },\n      },\n      popoverPosition: {\n        options: Object.values(PopoverPosition),\n        control: {\n          type: \"select\",\n        },\n      },\n      options: [null, ...Object.values(VisibilityCondition)],\n    },\n  },\n  args: {\n    showMenu: VisibilityCondition.HOVER,\n    popoverPosition: PopoverPosition.AUTO,\n  },\n  render: (args) =>\n    html`<z-table\n      class=\"z-table-demo\"\n      .bordered=${args.bordered}\n      style=${styleMap({\n        \"--z-table--cells-padding\": args[\"--z-table--cells-padding\"],\n      })}\n    >\n      <z-thead>\n        <z-tr>\n          <z-th>Colonna 1</z-th>\n          <z-th\n            .showMenu=${args.showMenu}\n            .popoverPosition=${args.popoverPosition}\n          >\n            Heading con menu\n            <div slot=\"contextual-menu\">Contenuto del popover</div>\n          </z-th>\n          <z-th>Colonna 2</z-th>\n        </z-tr>\n      </z-thead>\n      <z-tbody>\n        ${repeat(\n          [...new Array(3)],\n          () =>\n            html`<z-tr>\n              <z-td .showMenu=${args.showMenu}>\n                <span>Contenuto cella con menu</span>\n                <div slot=\"contextual-menu\">Contenuto del popover</div>\n              </z-td>\n              <z-td>Contenuto cella</z-td>\n              <z-td .showMenu=${args.showMenu}>\n                <span>Contenuto cella con menu</span>\n                <div slot=\"contextual-menu\">Contenuto del popover</div>\n              </z-td>\n            </z-tr>`\n        )}\n      </z-tbody>\n    </z-table>`,\n};\n\n/**\n * Set the `sortDirection` prop to `SortDirection.ASC` or `SortDirection.DESC` to enable sorting and show the sort button.\n * Clicking the button will fire the `sort` event with the `sortDirection` as detail.\n */\nexport const SortAction = {\n  render: (args) =>\n    html`<z-table\n      class=\"z-table-demo\"\n      .bordered=${args.bordered}\n      style=${styleMap({\n        \"--z-table--cells-padding\": args[\"--z-table--cells-padding\"],\n      })}\n    >\n      <z-thead>\n        <z-tr>\n          <z-th>Colonna 1</z-th>\n          <z-th\n            .sortDirection=${SortDirection.ASC}\n            .showMenu=${VisibilityCondition.HOVER}\n          >\n            Colonna 2 con menu e sorting\n            <div slot=\"contextual-menu\">Contenuto del popover</div>\n          </z-th>\n          <z-th .sortDirection=${SortDirection.DESC}>Colonna 3 con sorting</z-th>\n        </z-tr>\n      </z-thead>\n      <z-tbody>${repeat([...new Array(3)], () => html`<z-tr>${cellsTemplate(3)}</z-tr>`)}</z-tbody>\n    </z-table>`,\n};\n"]}