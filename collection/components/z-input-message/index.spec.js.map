{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../src/components/z-input-message/index.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,aAAa,EAAC,MAAM,SAAS,CAAC;AAEtC,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,aAAa,CAAC;YAC3B,IAAI,EAAE,mDAAmD;SAC1D,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,aAAa,CAAC;YAC3B,IAAI,EAAE,yFAAyF;SAChG,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,aAAa,CAAC;YAC3B,IAAI,EAAE,0GAA0G;SACjH,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;KAO7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZInputMessage} from \"./index\";\n\ndescribe(\"Suite test ZInputMessage\", () => {\n  it(\"Test render ZInputMessage - empty\", async () => {\n    const page = await newSpecPage({\n      components: [ZInputMessage],\n      html: `<z-input-message aria-label=\"\"></z-input-message>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-input-message aria-label=\"\">\n        <mock:shadow-root>\n          <span></span>\n        </mock:shadow-root>\n      </z-input-message>\n    `);\n  });\n\n  it(\"Test render ZInputMessage - with message\", async () => {\n    const page = await newSpecPage({\n      components: [ZInputMessage],\n      html: `<z-input-message tabindex=\"0\" aria-label=\"message\" message=\"message\"></z-input-message>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-input-message tabindex=\"0\" aria-label=\"message\" message=\"message\">\n        <mock:shadow-root>\n          <span>message</span>\n        </mock:shadow-root>\n      </z-input-message>\n    `);\n  });\n\n  it(\"Test render ZInputMessage - with status/message\", async () => {\n    const page = await newSpecPage({\n      components: [ZInputMessage],\n      html: `<z-input-message tabindex=\"0\" aria-label=\"message\" message=\"message\" status=\"success\"></z-input-message>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-input-message tabindex=\"0\" aria-label=\"message\" message=\"message\" status=\"success\" role=\"alert\">\n        <mock:shadow-root>\n          <z-icon name=\"checkmark-circle\"></z-icon>\n          <span>message</span>\n        </mock:shadow-root>\n      </z-input-message>\n    `);\n  });\n});\n"]}