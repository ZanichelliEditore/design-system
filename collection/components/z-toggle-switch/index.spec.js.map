{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../src/components/z-toggle-switch/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZToggleSwitch} from \"./index\";\n\ndescribe(\"Suite test ZToggleSwitch\", () => {\n  it(\"Test render ZToggleSwitch label position left\", async () => {\n    const page = await newSpecPage({\n      components: [ZToggleSwitch],\n      html: `<z-toggle-switch htmlid=\"toggle-id\" label-position=\"left\"></z-toggle-switch>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-toggle-switch htmlid=\"toggle-id\" label-position=\"left\">\n        <input id=\"toggle-id\" type=\"checkbox\">\n        <label class=\"left\" htmlfor=\"toggle-id\">\n          <span></span>\n          <span class=\"container\">\n            <span class=\"circle\"></span>\n          </span>\n        </label>\n      </z-toggle-switch>\n    `);\n  });\n\n  it(\"Test render ZToggleSwitch label position right\", async () => {\n    const page = await newSpecPage({\n      components: [ZToggleSwitch],\n      html: `<z-toggle-switch htmlid=\"toggle-id\" label-position=\"right\"></z-toggle-switch>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-toggle-switch htmlid=\"toggle-id\" label-position=\"right\">\n          <input id=\"toggle-id\" type=\"checkbox\">\n          <label class=\"right\" htmlfor=\"toggle-id\">\n            <span></span>\n            <span class=\"container\">\n              <span class=\"circle\"></span>\n            </span>\n          </label>\n      </z-toggle-switch>\n    `);\n  });\n\n  it(\"Test render ZToggleSwitch label position left disabled\", async () => {\n    const page = await newSpecPage({\n      components: [ZToggleSwitch],\n      html: `<z-toggle-switch htmlid=\"toggle-id\" label-position=\"left\" disabled></z-toggle-switch>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-toggle-switch htmlid=\"toggle-id\" label-position=\"left\" disabled=\"\">\n          <input disabled id=\"toggle-id\" type=\"checkbox\">\n          <label class=\"disabled left\" htmlfor=\"toggle-id\">\n            <span></span>\n            <span class=\"container disabled\">\n              <span class=\"circle\"></span>\n            </span>\n          </label>\n      </z-toggle-switch>\n    `);\n  });\n\n  it(\"Test render ZToggleSwitch label position right disabled\", async () => {\n    const page = await newSpecPage({\n      components: [ZToggleSwitch],\n      html: `<z-toggle-switch htmlid=\"toggle-id\" label-position=\"right\" disabled></z-toggle-switch>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-toggle-switch htmlid=\"toggle-id\" label-position=\"right\" disabled=\"\">\n        <input disabled id=\"toggle-id\" type=\"checkbox\">\n        <label class=\"disabled right\" htmlfor=\"toggle-id\">\n          <span></span>\n          <span class=\"container disabled\">\n            <span class=\"circle\"></span>\n          </span>\n        </label>\n      </z-toggle-switch>\n    `);\n  });\n\n  it(\"Test render ZToggleSwitch label position left active\", async () => {\n    const page = await newSpecPage({\n      components: [ZToggleSwitch],\n      html: `<z-toggle-switch htmlid=\"toggle-id\" label-position=\"left\" checked></z-toggle-switch>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-toggle-switch htmlid=\"toggle-id\" label-position=\"left\" checked=\"\">\n          <input checked=\"\" id=\"toggle-id\" type=\"checkbox\">\n          <label class=\"left\" htmlfor=\"toggle-id\">\n            <span></span>\n            <span class=\"container checked\">\n              <span class=\"circle\">\n                <z-icon height=\"12\" name=\"checkmark\" width=\"12\"></z-icon>\n              </span>\n            </span>\n          </label>\n      </z-toggle-switch>\n    `);\n  });\n\n  it(\"Test render ZToggleSwitch label position right active\", async () => {\n    const page = await newSpecPage({\n      components: [ZToggleSwitch],\n      html: `<z-toggle-switch htmlid=\"toggle-id\" label-position=\"right\" checked></z-toggle-switch>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-toggle-switch htmlid=\"toggle-id\" label-position=\"right\" checked=\"\">\n        <input checked=\"\" id=\"toggle-id\" type=\"checkbox\">\n        <label class=\"right\" htmlfor=\"toggle-id\">\n          <span></span>\n          <span class=\"container checked\">\n            <span class=\"circle\">\n              <z-icon height=\"12\" name=\"checkmark\" width=\"12\"></z-icon>\n            </span>\n          </span>\n        </label>\n      </z-toggle-switch>\n    `);\n  });\n\n  it(\"Test render ZToggleSwitch label position left active disabled\", async () => {\n    const page = await newSpecPage({\n      components: [ZToggleSwitch],\n      html: `<z-toggle-switch htmlid=\"toggle-id\" label-position=\"left\" disabled checked></z-toggle-switch>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-toggle-switch htmlid=\"toggle-id\" label-position=\"left\" disabled=\"\" checked=\"\">\n        <input disabled=\"\" checked=\"\" id=\"toggle-id\" type=\"checkbox\">\n        <label class=\"disabled left\" htmlfor=\"toggle-id\">\n          <span></span>\n          <span class=\"container disabled checked\">\n            <span class=\"circle\">\n              <z-icon height=\"12\" name=\"checkmark\" width=\"12\"></z-icon>\n            </span>\n          </span>\n        </label>\n      </z-toggle-switch>\n    `);\n  });\n\n  it(\"Test render ZToggleSwitch label position right active disabled\", async () => {\n    const page = await newSpecPage({\n      components: [ZToggleSwitch],\n      html: `<z-toggle-switch htmlid=\"toggle-id\" label-position=\"right\" disabled checked></z-toggle-switch>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-toggle-switch htmlid=\"toggle-id\" disabled=\"\" label-position=\"right\" checked=\"\">\n        <input disabled=\"\" checked=\"\" id=\"toggle-id\" type=\"checkbox\">\n        <label class=\"disabled right\" htmlfor=\"toggle-id\">\n          <span></span>\n          <span class=\"container checked disabled\">\n            <span class=\"circle\">\n              <z-icon height=\"12\" name=\"checkmark\" width=\"12\"></z-icon>\n            </span>\n          </span>\n        </label>\n      </z-toggle-switch>\n    `);\n  });\n});\n"]}