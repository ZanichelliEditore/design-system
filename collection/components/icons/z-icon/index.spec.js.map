{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../src/components/icons/z-icon/index.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,KAAK,EAAC,MAAM,UAAU,CAAC;AAC/B,OAAO,EAAC,KAAK,EAAC,MAAM,SAAS,CAAC;AAE9B,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,mBAAmB;SAC1B,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQ7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC1C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,kDAAkD;SACzD,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;uBAIX,KAAK,CAAC,UAAU,CAAC;;;;KAInC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,yEAAyE;SAChF,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;uBAIX,KAAK,CAAC,UAAU,CAAC;;;;KAInC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,sDAAsD;SAC7D,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;uBAIX,KAAK,CAAC,cAAc,CAAC;;;;KAIvC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;QAC5D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,6EAA6E;SACpF,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;uBAIX,KAAK,CAAC,cAAc,CAAC;;;;KAIvC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC1C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,0CAA0C;SACjD,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQ7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ICONS} from \"../icons\";\nimport {ZIcon} from \"./index\";\n\ndescribe(\"Suite test ZIcon\", () => {\n  it(\"Test render ZIcon vuoto\", async () => {\n    const page = await newSpecPage({\n      components: [ZIcon],\n      html: `<z-icon></z-icon>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-icon aria-hidden=\"true\">\n        <mock:shadow-root>\n          <svg fill=\"\" viewBox=\"0 0 1000 1000\" id=\"\">\n            <polygon></polygon>\n          </svg>\n        </mock:shadow-root>\n      </z-icon>\n    `);\n  });\n\n  it(\"Test render ZIcon con path\", async () => {\n    const page = await newSpecPage({\n      components: [ZIcon],\n      html: `<z-icon name=\"download\" iconid=\"zicon\"></z-icon>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-icon name=\"download\" iconid=\"zicon\" aria-hidden=\"true\">\n        <mock:shadow-root>\n          <svg fill=\"\" viewBox=\"0 0 1000 1000\" id=\"zicon\">\n            <path d=\"${ICONS[\"download\"]}\"></path>\n          </svg>\n        </mock:shadow-root>\n      </z-icon>\n    `);\n  });\n\n  it(\"Test render ZIcon con path con dimensioni\", async () => {\n    const page = await newSpecPage({\n      components: [ZIcon],\n      html: `<z-icon name=\"download\" iconid=\"zicon\" width=\"10\" height=\"10\"></z-icon>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-icon name=\"download\" iconid=\"zicon\" width=\"10\" height=\"10\"  aria-hidden=\"true\">\n        <mock:shadow-root>\n          <svg fill=\"\" viewBox=\"0 0 1000 1000\" width='10' height='10' id=\"zicon\">\n            <path d=\"${ICONS[\"download\"]}\"></path>\n          </svg>\n        </mock:shadow-root>\n      </z-icon>\n    `);\n  });\n\n  it(\"Test render ZIcon con polygon\", async () => {\n    const page = await newSpecPage({\n      components: [ZIcon],\n      html: `<z-icon name=\"chevron-down\" iconid=\"zicon\"></z-icon>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-icon name=\"chevron-down\" iconid=\"zicon\" aria-hidden=\"true\">\n        <mock:shadow-root>\n          <svg fill=\"\" viewBox=\"0 0 1000 1000\" id=\"zicon\">\n            <path d=\"${ICONS[\"chevron-down\"]}\"></path>\n          </svg>\n        </mock:shadow-root>\n      </z-icon>\n    `);\n  });\n\n  it(\"Test render ZIcon con polygon con dimensioni\", async () => {\n    const page = await newSpecPage({\n      components: [ZIcon],\n      html: `<z-icon name=\"chevron-down\" iconid=\"zicon\" width=\"10\" height=\"10\"></z-icon>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-icon name=\"chevron-down\" iconid=\"zicon\" width=\"10\" height=\"10\" aria-hidden=\"true\">\n        <mock:shadow-root>\n          <svg fill=\"\" viewBox=\"0 0 1000 1000\" width='10' height='10' id=\"zicon\">\n            <path d=\"${ICONS[\"chevron-down\"]}\"></path>\n          </svg>\n        </mock:shadow-root>\n      </z-icon>\n    `);\n  });\n\n  it(\"Test render ZIcon con fill\", async () => {\n    const page = await newSpecPage({\n      components: [ZIcon],\n      html: `<z-icon fill=\"color-primary01\"></z-icon>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-icon fill=\"color-primary01\" aria-hidden=\"true\">\n        <mock:shadow-root>\n          <svg  fill=\"var(--color-primary01)\" viewBox=\"0 0 1000 1000\" id=\"\">\n            <polygon></polygon>\n          </svg>\n        </mock:shadow-root>\n      </z-icon>\n    `);\n  });\n});\n"]}