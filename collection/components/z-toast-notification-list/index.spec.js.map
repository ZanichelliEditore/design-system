{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../src/components/z-toast-notification-list/index.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,sBAAsB,EAAC,MAAM,SAAS,CAAC;AAE/C,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;IACjD,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;QACpE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,sBAAsB,CAAC;YACpC,IAAI,EAAE,yDAAyD;SAChE,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;QAClE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,sBAAsB,CAAC;YACpC,IAAI,EAAE,mGAAmG;SAC1G,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;QAChF,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,sBAAsB,CAAC;YACpC,IAAI,EAAE;;;;;;;mCAOuB;SAC9B,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;KAY7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZToastNotificationList} from \"./index\";\n\ndescribe(\"Suite test ZToastNotificationList\", () => {\n  it(\"Test render ZToastNotificationList vuoto senza props\", async () => {\n    const page = await newSpecPage({\n      components: [ZToastNotificationList],\n      html: `<z-toast-notification-list></z-toast-notification-list>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-toast-notification-list position=\"top-right\">\n        <mock:shadow-root>\n            <slot name=\"toasts\"></slot>\n        </mock:shadow-root>\n      </z-toast-notification-list>\n    `);\n  });\n\n  it(\"Test render ZToastNotificationList vuoto con props\", async () => {\n    const page = await newSpecPage({\n      components: [ZToastNotificationList],\n      html: `<z-toast-notification-list newestontop=\"false\" position=\"top-centre\"></z-toast-notification-list>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-toast-notification-list newestontop=\"false\" position=\"top-centre\">\n        <mock:shadow-root>\n            <slot name=\"toasts\"></slot>\n        </mock:shadow-root>\n      </z-toast-notification-list>\n    `);\n  });\n\n  it(\"Test render ZToastNotificationList con elementi slottati e props\", async () => {\n    const page = await newSpecPage({\n      components: [ZToastNotificationList],\n      html: `<z-toast-notification-list position=\"top-centre\">\n        <z-toast-notification type=\"error\" heading=\"Notification\" message=\"Senza pulsante.\"\n            transition=\"slide-in-up\" draggablepercentage=\"50\" closebutton>\n        </z-toast-notification>\n        <z-toast-notification type=\"error\" heading=\"Notification\" message=\"Senza pulsante.\"\n            transition=\"slide-in-up\" draggablepercentage=\"50\" closebutton>\n        </z-toast-notification>\n      </z-toast-notification-list>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-toast-notification-list position=\"top-centre\">\n        <mock:shadow-root>\n            <slot name=\"toasts\"></slot>\n        </mock:shadow-root>\n        <z-toast-notification type=\"error\" heading=\"Notification\" message=\"Senza pulsante.\"\n          transition=\"slide-in-up\" draggablepercentage=\"50\" closebutton>\n        </z-toast-notification>\n        <z-toast-notification type=\"error\" heading=\"Notification\" message=\"Senza pulsante.\"\n          transition=\"slide-in-up\" draggablepercentage=\"50\" closebutton>\n        </z-toast-notification>\n      </z-toast-notification-list>\n    `);\n  });\n});\n"]}