{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../src/components/z-divider/index.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,QAAQ,EAAC,MAAM,SAAS,CAAC;AAEjC,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE,yBAAyB;SAChC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;KAI7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE,kDAAkD;SACzD,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;KAI7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE,gDAAgD;SACvD,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;KAI7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE,sCAAsC;SAC7C,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;KAI7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE,uCAAuC;SAC9C,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;KAI7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE,sCAAsC;SAC7C,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;KAI7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE,yCAAyC;SAChD,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;KAI7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZDivider} from \"./index\";\n\ndescribe(\"Suite test ZDivider\", () => {\n  it(\"Test render ZDivider default properties\", async () => {\n    const page = await newSpecPage({\n      components: [ZDivider],\n      html: `<z-divider></z-divider>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-divider class=\"divider-horizontal divider-small\" style=\"background-color: var(--gray200);\">\n    \n      </z-divider>\n    `);\n  });\n\n  it(\"Test render ZDivider orientation horizontal\", async () => {\n    const page = await newSpecPage({\n      components: [ZDivider],\n      html: `<z-divider orientation=\"horizontal\"></z-divider>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-divider orientation=\"horizontal\" class=\"divider-horizontal divider-small\" style=\"background-color: var(--gray200);\">\n    \n      </z-divider>\n    `);\n  });\n\n  it(\"Test render ZDivider orientation vertical\", async () => {\n    const page = await newSpecPage({\n      components: [ZDivider],\n      html: `<z-divider orientation=\"vertical\"></z-divider>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-divider orientation=\"vertical\" class=\"divider-vertical divider-small\" style=\"background-color: var(--gray200);\">\n    \n      </z-divider>\n    `);\n  });\n\n  it(\"Test render ZDivider size small\", async () => {\n    const page = await newSpecPage({\n      components: [ZDivider],\n      html: `<z-divider size=\"small\"></z-divider>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-divider size=\"small\" class=\"divider-horizontal divider-small\" style=\"background-color: var(--gray200);\">\n    \n      </z-divider>\n    `);\n  });\n\n  it(\"Test render ZDivider size medium\", async () => {\n    const page = await newSpecPage({\n      components: [ZDivider],\n      html: `<z-divider size=\"medium\"></z-divider>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-divider size=\"medium\" class=\"divider-horizontal divider-medium\" style=\"background-color: var(--gray200);\">\n    \n      </z-divider>\n    `);\n  });\n\n  it(\"Test render ZDivider size large\", async () => {\n    const page = await newSpecPage({\n      components: [ZDivider],\n      html: `<z-divider size=\"large\"></z-divider>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-divider size=\"large\" class=\"divider-horizontal divider-large\" style=\"background-color: var(--gray200);\">\n    \n      </z-divider>\n    `);\n  });\n\n  it(\"Test render ZDivider color token\", async () => {\n    const page = await newSpecPage({\n      components: [ZDivider],\n      html: `<z-divider color=\"blue900\"></z-divider>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-divider color=\"blue900\" class=\"divider-horizontal divider-small\" style=\"background-color: var(--blue900);\">\n    \n      </z-divider>\n    `);\n  });\n});\n"]}