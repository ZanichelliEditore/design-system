{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../src/components/logo/z-logo/index.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,KAAK,EAAC,MAAM,SAAS,CAAC;AAE9B,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,EAAE,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;QACjC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,mBAAmB;SAC1B,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,yDAAyD;SAChE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,oDAAoD;SAC3D,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQ7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;QACjE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,yFAAyF;SAChG,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQ7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,KAAK,CAAC;YACnB,IAAI,EAAE,+BAA+B;SACtC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;KAM7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZLogo} from \"./index\";\n\ndescribe(\"Suite test ZLogo\", () => {\n  it(\"Test render ZLogo\", async () => {\n    const page = await newSpecPage({\n      components: [ZLogo],\n      html: `<z-logo></z-logo>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-logo>\n        <mock:shadow-root>\n          <img></img>\n        </mock:shadow-root>\n      </z-logo>\n    `);\n  });\n\n  it(\"Test render ZLogo with img alt and size\", async () => {\n    const page = await newSpecPage({\n      components: [ZLogo],\n      html: `<z-logo image-alt=\"zlogo\" width=128 height=32></z-logo>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-logo width=\"128\" height=\"32\" image-alt=\"zlogo\" style=\"max-width: 128px; width: 128px; max-height: 32px; height: 32px;\">\n        <mock:shadow-root>\n          <img alt=\"zlogo\">\n        </mock:shadow-root>\n      </z-logo>\n    `);\n  });\n\n  it(\"Test render ZLogo with link\", async () => {\n    const page = await newSpecPage({\n      components: [ZLogo],\n      html: `<z-logo link=\"http://www.zanichelli.it/\"></z-logo>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-logo link=\"http://www.zanichelli.it/\">\n        <mock:shadow-root>\n          <a href=\"http://www.zanichelli.it/\" target=\"_self\">\n            <img>\n          </a>\n        </mock:shadow-root>\n      </z-logo>\n    `);\n  });\n\n  it(\"Test render ZLogo with link, targetblank and size\", async () => {\n    const page = await newSpecPage({\n      components: [ZLogo],\n      html: `<z-logo link=\"http://www.zanichelli.it/\" target-blank width=\"128\" height=\"32\"></z-logo>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-logo width=\"128\" height=\"32\" link=\"http://www.zanichelli.it/\" target-blank style=\"max-width: 128px; width: 128px; max-height: 32px; height: 32px;\">\n        <mock:shadow-root>\n          <a href=\"http://www.zanichelli.it/\" target=\"_blank\">\n            <img>\n          </a>\n        </mock:shadow-root>\n      </z-logo>\n    `);\n  });\n\n  it(\"Test render mobile ZLogo\", async () => {\n    const page = await newSpecPage({\n      components: [ZLogo],\n      html: `<z-logo mobile-logo></z-logo>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-logo mobile-logo class=\"mobile\">\n        <mock:shadow-root>\n            <img></img>\n        </mock:shadow-root>\n      </z-logo>\n    `);\n  });\n});\n"]}