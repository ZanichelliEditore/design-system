{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../src/components/z-searchbar/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZSearchbar} from \"./index\";\n\nglobal.ResizeObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}));\n\ndescribe(\"Suite test ZSearchbar\", () => {\n  it(\"Simple searchbar\", async () => {\n    const page = await newSpecPage({\n      components: [ZSearchbar],\n      html: `<z-searchbar htmlid=\"my-id\" show-search-button=\"true\"></z-searchbar>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-searchbar class=\"has-submit\" htmlid=\"my-id\" show-search-button=\"true\">\n        <mock:shadow-root>\n          <div class=\"input-container\">\n            <z-input tabindex=\"0\" size=\"big\"></z-input>\n          </div>\n          <z-button size=\"big\" variant=\"primary\">CERCA</z-button>\n        </mock:shadow-root>\n      </z-searchbar>\n    `);\n  });\n\n  it(\"Autocomplete searchbar without search\", async () => {\n    const page = await newSpecPage({\n      components: [ZSearchbar],\n      html: `<z-searchbar htmlid=\"my-id\" autocomplete=\"true\" prevent-submit=\"true\"></z-searchbar>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-searchbar class=\"has-results\" htmlid=\"my-id\" autocomplete=\"true\" prevent-submit=\"true\">\n        <mock:shadow-root>\n          <div class=\"input-container\">\n            <z-input tabindex=\"0\" size=\"big\"></z-input>\n          </div>\n        </mock:shadow-root>\n      </z-searchbar>\n    `);\n  });\n\n  it(\"Autocomplete searchbar with search and results - no input search\", async () => {\n    const page = await newSpecPage({\n      components: [ZSearchbar],\n      html: `<z-searchbar\n        htmlid=\"my-id\"\n        autocomplete=\"true\"\n        results-items='${JSON.stringify(getItems())}'\n        show-search-button=\"true\"\n      ></z-searchbar>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-searchbar\n        class=\"has-submit has-results\"\n        htmlid=\"my-id\"\n        autocomplete=\"true\"\n        results-items='${JSON.stringify(getItems())}'\n        show-search-button=\"true\"\n      >\n        <mock:shadow-root>\n          <div class=\"input-container\">\n            <z-input tabindex=\"0\" size=\"big\"></z-input>\n          </div>\n          <z-button size=\"big\" variant=\"primary\">CERCA</z-button>\n        </mock:shadow-root>\n      </z-searchbar>\n    `);\n  });\n\n  it(\"Autocomplete searchbar with search and results - with input search\", async () => {\n    const page = await newSpecPage({\n      components: [ZSearchbar],\n      html: `<z-searchbar\n        htmlid=\"my-id\"\n        autocomplete=\"true\"\n        results-items='${JSON.stringify(getItems())}'\n        show-search-button=\"true\"\n      ></z-searchbar>`,\n    });\n    page.rootInstance.searchString = \"item\";\n    page.rootInstance.showResults = true;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-searchbar\n        class=\"has-submit has-results\"\n        htmlid=\"my-id\"\n        autocomplete=\"true\"\n        results-items='${JSON.stringify(getItems())}'\n        show-search-button=\"true\"\n      >\n        <mock:shadow-root>\n          <div class=\"input-container\">\n            <z-input tabindex=\"0\" size=\"big\"></z-input>\n            <div class=\"results-wrapper\">\n              <div class=\"results\">\n                <z-list role=\"listbox\" id=\"list-my-id\">\n                  ${searchHelper()}\n                  ${resultsItems()}\n                </z-list>\n              </div>\n            </div>\n          </div>\n          <z-button size=\"big\" variant=\"primary\">CERCA</z-button>\n        </mock:shadow-root>\n      </z-searchbar>\n    `);\n  });\n\n  it(\"Autocomplete searchbar with search and limited results - with input search\", async () => {\n    const page = await newSpecPage({\n      components: [ZSearchbar],\n      html: `<z-searchbar\n        htmlid=\"my-id\"\n        autocomplete=\"true\"\n        results-items='${JSON.stringify(getItems())}'\n        results-count=\"1\"\n        show-search-button=\"true\"\n      ></z-searchbar>`,\n    });\n    page.rootInstance.searchString = \"item\";\n    page.rootInstance.showResults = true;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-searchbar\n        class=\"has-submit has-results\"\n        htmlid=\"my-id\"\n        autocomplete=\"true\"\n        results-items='${JSON.stringify(getItems())}'\n        results-count=\"1\"\n        show-search-button=\"true\"\n      >\n        <mock:shadow-root>\n          <div class=\"input-container\">\n            <z-input tabindex=\"0\" size=\"big\"></z-input>\n            <div class=\"results-wrapper\">\n              <div class=\"results\">\n                <z-list role=\"listbox\" id=\"list-my-id\">\n                  ${searchHelper()}\n                  <z-list-group divider-type=\"element\">\n                    <z-list-element\n                      id=\"list-item-my-id-0\"\n                      role=\"option\"\n                      dividerType=\"element\"\n                      tabindex=\"0\"\n                    >\n                    <div class=\"list-element\" tabindex=\"0\">\n                      <span class=\"item ellipsis\">\n                        <z-icon class=\"item-icon\" name=\"download\"></z-icon>\n                        <span class=\"item-label\" title=\"item 1\"><mark>item</mark> 1</span>\n                      </span>\n                    </div>\n                    </z-list-element>\n                  </z-list-group>\n                  ${showAllResults()}\n                </z-list>\n              </div>\n            </div>\n          </div>\n          <z-button size=\"big\" variant=\"primary\">CERCA</z-button>\n        </mock:shadow-root>\n      </z-searchbar>\n    `);\n  });\n\n  it(\"Autocomplete searchbar with search and limited results (show all) - with input search\", async () => {\n    const page = await newSpecPage({\n      components: [ZSearchbar],\n      html: `<z-searchbar\n        htmlid=\"my-id\"\n        autocomplete=\"true\"\n        results-items='${JSON.stringify(getItems())}'\n        show-search-button=\"true\"\n      ></z-searchbar>`,\n    });\n    page.rootInstance.searchString = \"item\";\n    page.rootInstance.showResults = true;\n    page.rootInstance.currResultsCount = 0;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-searchbar\n        class=\"has-submit has-results\"\n        htmlid=\"my-id\"\n        autocomplete=\"true\"\n        results-items='${JSON.stringify(getItems())}'\n        show-search-button=\"true\"\n      >\n        <mock:shadow-root>\n          <div class=\"input-container\">\n            <z-input tabindex=\"0\" size=\"big\"></z-input>\n            <div class=\"results-wrapper\">\n              <div class=\"results\">\n                <z-list role=\"listbox\" id=\"list-my-id\">\n                  ${searchHelper()}\n                  ${resultsItems()}\n                </z-list>\n              </div>\n            </div>\n          </div>\n          <z-button size=\"big\" variant=\"primary\">CERCA</z-button>\n        </mock:shadow-root>\n      </z-searchbar>\n    `);\n  });\n\n  it(\"Autocomplete searchbar without search and no results - with input search\", async () => {\n    const page = await newSpecPage({\n      components: [ZSearchbar],\n      html: `<z-searchbar\n        htmlid=\"my-id\"\n        autocomplete=\"true\"\n        prevent-submit=\"true\"\n        results-items='[]'\n      ></z-searchbar>`,\n    });\n    page.rootInstance.searchString = \"item\";\n    page.rootInstance.showResults = true;\n    page.rootInstance.currResultsCount = 0;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-searchbar\n        class=\"has-results\"\n        htmlid=\"my-id\"\n        autocomplete=\"true\"\n        prevent-submit=\"true\"\n        results-items=\"[]\"\n      >\n        <mock:shadow-root>\n          <div class=\"input-container\">\n            <z-input tabindex=\"0\" size=\"big\"></z-input>\n            <div class=\"results-wrapper\">\n              <div class=\"results\">\n                <span class=\"item item-no-results\">\n                  Non abbiamo trovato risultati per <b>item</b>\n                  <br /><br />\n                  Cosa puoi fare?\n                  <ul>\n                    <li>Verificare di aver scritto bene</li>\n                    <li>Provare a cercare un'altra parola</li>\n                    <li>Provare a cercare qualcosa di più generico</li>\n                  </ul>\n                </span>\n              </div>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-searchbar>\n    `);\n  });\n\n  it(\"Autocomplete searchbar with search and no results - with input search\", async () => {\n    const page = await newSpecPage({\n      components: [ZSearchbar],\n      html: `<z-searchbar\n        htmlid=\"my-id\"\n        autocomplete=\"true\"\n        results-items='[]'\n        show-search-button=\"true\"\n      ></z-searchbar>`,\n    });\n    page.rootInstance.searchString = \"item\";\n    page.rootInstance.showResults = true;\n    page.rootInstance.currResultsCount = 0;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-searchbar\n        class=\"has-submit has-results\"\n        htmlid=\"my-id\"\n        autocomplete=\"true\"\n        results-items='[]'\n        show-search-button=\"true\"\n      >\n        <mock:shadow-root>\n          <div class=\"input-container\">\n            <z-input tabindex=\"0\" size=\"big\"></z-input>\n            <div class=\"results-wrapper\">\n              <div class=\"results\">\n                <z-list role=\"listbox\" id=\"list-my-id\">\n                  ${searchHelper(false)}\n                </z-list>\n              </div>\n            </div>\n          </div>\n          <z-button size=\"big\" variant=\"primary\">CERCA</z-button>\n        </mock:shadow-root>\n      </z-searchbar>\n    `);\n  });\n\n  it(\"Simple searchbar change size\", async () => {\n    const page = await newSpecPage({\n      components: [ZSearchbar],\n      html: `<z-searchbar htmlid=\"my-id\" show-search-button=\"true\" size=\"small\"></z-searchbar>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-searchbar class=\"has-submit\" htmlid=\"my-id\" show-search-button=\"true\" size=\"small\">\n        <mock:shadow-root>\n          <div class=\"input-container\">\n            <z-input tabindex=\"0\" size=\"small\"></z-input>\n          </div>\n          <z-button size=\"small\" variant=\"primary\">CERCA</z-button>\n        </mock:shadow-root>\n      </z-searchbar>\n    `);\n  });\n\n  it(\"Simple searchbar change button variant\", async () => {\n    const page = await newSpecPage({\n      components: [ZSearchbar],\n      html: `<z-searchbar htmlid=\"my-id\" show-search-button=\"true\" variant=\"secondary\"></z-searchbar>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-searchbar class=\"has-submit\" htmlid=\"my-id\" show-search-button=\"true\" variant=\"secondary\">\n        <mock:shadow-root>\n          <div class=\"input-container\">\n            <z-input tabindex=\"0\" size=\"big\"></z-input>\n          </div>\n          <z-button size=\"big\" variant=\"secondary\">CERCA</z-button>\n        </mock:shadow-root>\n      </z-searchbar>\n    `);\n  });\n\n  it(\"Simple searchbar only icon button\", async () => {\n    const page = await newSpecPage({\n      components: [ZSearchbar],\n      html: `<z-searchbar htmlid=\"my-id\" show-search-button=\"true\" search-button-icon-only=\"true\"></z-searchbar>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-searchbar class=\"has-submit\" htmlid=\"my-id\" show-search-button=\"true\" search-button-icon-only=\"true\">\n        <mock:shadow-root>\n          <div class=\"input-container\">\n            <z-input tabindex=\"0\" size=\"big\"></z-input>\n          </div>\n          <z-button icon=\"search\" size=\"big\" variant=\"primary\"></z-button>\n        </mock:shadow-root>\n      </z-searchbar>\n    `);\n  });\n});\n\nconst getItems = () => [{label: \"item 1\", icon: \"download\"}, {label: \"item 2\"}, {label: \"item 3\"}];\n\nconst resultsItems = () => `\n  <z-list-group divider-type=\"element\">\n    <z-list-element\n      id=\"list-item-my-id-0\"\n      role=\"option\"\n      tabindex=\"0\"\n      dividerType=\"element\"\n    >\n    <div class=\"list-element\" tabindex=\"0\">\n      <span class=\"item ellipsis\">\n        <z-icon class=\"item-icon\" name=\"download\"></z-icon>\n        <span class=\"item-label\" title=\"item 1\"><mark>item</mark> 1</span>\n      </span>\n    </div>\n    </z-list-element>\n    <z-list-element\n      id=\"list-item-my-id-1\"\n      role=\"option\"\n      tabindex=\"0\"\n      dividerType=\"element\"\n    >\n    <div class=\"list-element\" tabindex=\"0\">\n      <span class=\"item ellipsis\">\n        <span class=\"item-label\" title=\"item 2\"><mark>item</mark> 2</span>\n      </span>\n    </div>\n    </z-list-element>\n    <z-list-element\n      id=\"list-item-my-id-2\"\n      role=\"option\"\n      tabindex=\"0\"\n    >\n    <div class=\"list-element\" tabindex=\"0\">\n      <span class=\"item ellipsis\">\n        <span class=\"item-label\" title=\"item 3\"><mark>item</mark> 3</span>\n      </span>\n    </div>\n    </z-list-element>\n  </z-list-group>`;\n\nconst searchHelper = (divider: boolean = true) => `\n  <z-list-element\n    role=\"option\"\n    ${divider ? `dividerType=\"element\"` : ``}\n    id=\"list-item-my-id-search\"\n  >\n    <div class=\"list-element\" tabindex=\"0\">\n    <span class=\"item item-search\">\n      <z-icon class=\"search-icon\" name=\"left-magnifying-glass\"></z-icon>\n      <span class=\"item-label\">Cerca <mark>item</mark></span>\n    </span>\n    </div>\n  </z-list-element>\n`;\n\nconst showAllResults = () => `\n  <z-list-element\n    role=\"option\"\n    id=\"list-item-my-id-show-all\"\n    color=\"color-primary01\"\n    tabindex=\"0\"\n    clickable\n  >\n    <div class=\"item-show-all\">Vedi tutti i risultati</div>\n  </z-list-element>\n`;\n"]}