{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../src/components/notification/z-notification/index.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,aAAa,EAAC,MAAM,SAAS,CAAC;AAEtC,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,EAAE,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;QAC5E,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,aAAa,CAAC;YAC3B,IAAI,EAAE;;;;;6CAKiC;SACxC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;KAuB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EAAE,KAAK,IAAI,EAAE;QAC/E,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,aAAa,CAAC;YAC3B,IAAI,EAAE,sEAAsE;SAC7E,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;KAS7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,aAAa,CAAC;YAC3B,IAAI,EAAE;;;;;6CAKiC;SACxC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;KAgB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZNotification} from \"./index\";\n\ndescribe(\"Suite test ZNotification\", () => {\n  it(\"Test render ZNotification with icon, action and close button\", async () => {\n    const page = await newSpecPage({\n      components: [ZNotification],\n      html: `<z-notification\n        contenticonname=\"gear\"\n        actiontext=\"Annulla\"\n        type=\"success\"\n        showclose=\"true\"\n      >Testo della notifica</z-notification>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-notification actiontext=\"Annulla\" contenticonname=\"gear\" showclose=\"true\" type=\"success\">\n        <mock:shadow-root>\n          <z-icon\n            class=\"status-icon\"\n            name=\"gear\"\n            width=\"16\"\n            height=\"16\"\n          ></z-icon>\n          <div class=\"content-container\">\n            <div class=\"content-text\"><slot></slot></div>\n            <button class=\"action-button\" type=\"button\">Annulla</button>\n          </div>\n          <button class=\"close-button\" type=\"button\">\n            <z-icon\n              name=\"multiply-circle\"\n              width=\"16\"\n              height=\"16\"\n            />\n          </button>\n        </mock:shadow-root>\n        Testo della notifica\n      </z-notification>\n    `);\n  });\n\n  it(\"Test render ZNotification without icon, action and close button\", async () => {\n    const page = await newSpecPage({\n      components: [ZNotification],\n      html: `<z-notification type=\"success\">Testo della notifica</z-notification>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-notification type=\"success\">\n        <mock:shadow-root>\n          <div class=\"content-container\">\n            <div class=\"content-text\"><slot></slot></div>\n          </div>\n        </mock:shadow-root>\n        Testo della notifica\n      </z-notification>\n    `);\n  });\n\n  it(\"Test render ZNotification with icon, action\", async () => {\n    const page = await newSpecPage({\n      components: [ZNotification],\n      html: `<z-notification\n        contenticonname=\"gear\"\n        actiontext=\"Annulla\"\n        type=\"success\"\n        showclose=\"false\"\n      >Testo della notifica</z-notification>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-notification actiontext=\"Annulla\" contenticonname=\"gear\" showclose=\"false\" type=\"success\">\n        <mock:shadow-root>\n          <z-icon\n            class=\"status-icon\"\n            name=\"gear\"\n            width=\"16\"\n            height=\"16\"\n          ></z-icon>\n          <div class=\"content-container\">\n            <div class=\"content-text\"><slot></slot></div>\n            <button class=\"action-button\" type=\"button\">Annulla</button>\n          </div>\n        </mock:shadow-root>\n        Testo della notifica\n      </z-notification>\n    `);\n  });\n});\n"]}