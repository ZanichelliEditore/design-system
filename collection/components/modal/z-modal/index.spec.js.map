{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../src/components/modal/z-modal/index.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAClD,OAAO,EAAC,MAAM,EAAC,MAAM,SAAS,CAAC;AAE/B,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,qBAAqB;SAC5B,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;KAsB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,oHAAoH;SAC3H,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;KAwB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;QACnE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,yIAAyI;SAChJ,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BjC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;QACpE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,0IAA0I;SACjJ,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BjC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,+EAA+E;SACtF,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;KAuB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,4IAA4I;SACnJ,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;KAwB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\nimport {ZModal} from \"./index\";\n\ndescribe(\"Suite test ZModal\", () => {\n  it(\"Test render empty ZModal\", async () => {\n    const page = await newSpecPage({\n      components: [ZModal],\n      html: `<z-modal></z-modal>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-modal>\n        <mock:shadow-root>\n        <dialog role=\"dialog\" aria-describedby=\"modal-content\" aria-labelledby=\"modal-title\" open=\"true\">\n          <div class=\"modal-container modal-container-scroll-inside\">\n            <header>\n              <div>\n                <slot name=\"modalCloseButton\">\n                  <button aria-label=\"chiudi modale\">\n                    <z-icon name=\"multiply-circle-filled\"></z-icon>\n                  </button>\n                </slot>\n              </div>\n            </header>\n            <div class=\"modal-content-scroll-inside\" id=\"modal-content\">\n              <slot name=\"modalContent\"></slot>\n            </div>\n          </div>\n          <div class=\"modal-background\" data-action=\"modalBackground\"></div>\n        </dialog>\n        </mock:shadow-root>\n      </z-modal>\n    `);\n  });\n\n  it(\"Test render ZModal with props\", async () => {\n    const page = await newSpecPage({\n      components: [ZModal],\n      html: `<z-modal modalid=\"modal\" modaltitle=\"title\" modalsubtitle=\"subtitle\" close-button-label=\"chiudi modale\"></z-modal>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-modal modalid=\"modal\" modaltitle=\"title\" modalsubtitle=\"subtitle\" close-button-label=\"chiudi modale\">\n        <mock:shadow-root>\n        <dialog role=\"dialog\" aria-describedby=\"modal-content\" aria-labelledby=\"modal-title\" open=\"true\">\n          <div class=\"modal-container modal-container-scroll-inside\" id=\"modal\">\n            <header>\n              <div>\n                <h1 id=\"modal-title\">title</h1>\n                <slot name=\"modalCloseButton\">\n                  <button aria-label=\"chiudi modale\">\n                    <z-icon name=\"multiply-circle-filled\"></z-icon>\n                  </button>\n                </slot>\n              </div>\n              <div class=\"subtitle\" id=\"modal-subtitle\">subtitle</div>\n            </header>\n            <div class=\"modal-content-scroll-inside\" id=\"modal-content\">\n              <slot name=\"modalContent\"></slot>\n            </div>\n          </div>\n          <div class=\"modal-background\" data-action=\"modalBackground\" data-modal=\"modal\"></div>\n        </dialog>\n        </mock:shadow-root>\n      </z-modal>\n    `);\n  });\n\n  it(\"Test render ZModal with prop scrollable set to true\", async () => {\n    const page = await newSpecPage({\n      components: [ZModal],\n      html: `<z-modal modalid=\"modal\" modaltitle=\"title\" modalsubtitle=\"subtitle\" close-button-label=\"chiudi modale\" scroll-inside=\"true\"></z-modal>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-modal modalid=\"modal\" modaltitle=\"title\" modalsubtitle=\"subtitle\" close-button-label=\"chiudi modale\" scroll-inside=\"true\">\n        <mock:shadow-root>\n        <dialog role=\"dialog\" aria-describedby=\"modal-content\" aria-labelledby=\"modal-title\" open=\"true\">\n          <div class=\"modal-container modal-container-scroll-inside\" id=\"modal\">\n            <header>\n              <div>\n                <h1 id=\"modal-title\">title</h1>\n                <slot name=\"modalCloseButton\">\n                  <button aria-label=\"chiudi modale\">\n                    <z-icon name=\"multiply-circle-filled\"></z-icon>\n                  </button>\n                </slot>\n              </div>\n               <div class=\"subtitle\" id=\"modal-subtitle\">subtitle</div>\n            </header>\n            <div class=\"modal-content-scroll-inside\" id=\"modal-content\">\n              <slot name=\"modalContent\"></slot>\n            </div>\n          </div>\n          <div class=\"modal-background\" data-action=\"modalBackground\" data-modal=\"modal\"></div>\n        </div>\n      </div>\n    </dialog>\n  </mock:shadow-root>\n</z-modal>\n`);\n  });\n\n  it(\"Test render ZModal with prop scrollable set to false\", async () => {\n    const page = await newSpecPage({\n      components: [ZModal],\n      html: `<z-modal modalid=\"modal\" modaltitle=\"title\" modalsubtitle=\"subtitle\" close-button-label=\"chiudi modale\" scroll-inside=\"false\"></z-modal>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-modal modalid=\"modal\" modaltitle=\"title\" modalsubtitle=\"subtitle\" close-button-label=\"chiudi modale\" scroll-inside=\"false\">\n        <mock:shadow-root>\n        <dialog role=\"dialog\" aria-describedby=\"modal-content\" aria-labelledby=\"modal-title\" class=\"modal-dialog\" open=\"true\">\n          <div class=\"modal-container modal-container-scroll-outside\" id=\"modal\">\n            <header>\n              <div>\n                <h1 id=\"modal-title\">title</h1>\n                <slot name=\"modalCloseButton\">\n                  <button aria-label=\"chiudi modale\">\n                    <z-icon name=\"multiply-circle-filled\"></z-icon>\n                  </button>\n                </slot>\n              </div>\n               <div class=\"subtitle\" id=\"modal-subtitle\">subtitle</div>\n            </header>\n            <div class=\"modal-content-scroll-outside\" id=\"modal-content\">\n              <slot name=\"modalContent\"></slot>\n            </div>\n          </div>\n              <div class=\"modal-background modal-background-scroll-outside\" data-action=\"modalBackground\" data-modal=\"modal\"></div>\n        </div>\n      </div>\n    </dialog>\n  </mock:shadow-root>\n</z-modal>\n`);\n  });\n\n  it(\"Test render ZModal with slotted content\", async () => {\n    const page = await newSpecPage({\n      components: [ZModal],\n      html: `<z-modal><div slot=\"modalContent\">Contenuto dello <b>slot</b></div></z-modal>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-modal>\n        <mock:shadow-root>\n        <dialog role=\"dialog\" aria-describedby=\"modal-content\" aria-labelledby=\"modal-title\" open=\"true\">\n          <div class=\"modal-container modal-container-scroll-inside\">\n            <header>\n              <div>\n                <slot name=\"modalCloseButton\">\n                  <button aria-label=\"chiudi modale\">\n                    <z-icon name=\"multiply-circle-filled\"></z-icon>\n                  </button>\n                </slot>\n              </div>\n            </header>\n            <div class=\"modal-content-scroll-inside\" id=\"modal-content\">\n              <slot name=\"modalContent\"></slot>\n            </div>\n          </div>\n          <div class=\"modal-background\" data-action=\"modalBackground\"></div>\n        </dialog>\n        </mock:shadow-root>\n        <div slot=\"modalContent\">Contenuto dello <b>slot</b></div>\n      </z-modal>\n    `);\n  });\n  it(\"Test render ZModal with slotted content and close button\", async () => {\n    const page = await newSpecPage({\n      components: [ZModal],\n      html: `<z-modal><div slot=\"modalContent\">Contenuto dello <b>slot</b></div><button slot=\"modalCloseButton\" aria-label=\"close\">X</button></z-modal>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-modal>\n        <mock:shadow-root>\n        <dialog role=\"dialog\" aria-describedby=\"modal-content\" aria-labelledby=\"modal-title\" open=\"true\">\n          <div class=\"modal-container modal-container-scroll-inside\">\n            <header>\n              <div>\n                <slot name=\"modalCloseButton\">\n                  <button aria-label=\"chiudi modale\">\n                    <z-icon name=\"multiply-circle-filled\"></z-icon>\n                  </button>\n                </slot>\n              </div>\n            </header>\n            <div class=\"modal-content-scroll-inside\" id=\"modal-content\">\n              <slot name=\"modalContent\"></slot>\n            </div>\n          </div>\n          <div class=\"modal-background\" data-action=\"modalBackground\"></div>\n        </dialog>\n        </mock:shadow-root>\n        <div slot=\"modalContent\">Contenuto dello <b>slot</b></div>\n        <button aria-label=\"close\" slot=\"modalCloseButton\">X</button>\n      </z-modal>\n    `);\n  });\n});\n"]}