{"version":3,"file":"index.stories.js","sourceRoot":"","sources":["../../../../src/components/z-visually-hidden/index.stories.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,IAAI,EAAC,MAAM,KAAK,CAAC;AACzB,OAAO,SAAS,CAAC;AAEjB,eAAe;IACb,KAAK,EAAE,iBAAiB;IACxB,SAAS,EAAE,mBAAmB;CAC/B,CAAC;AAEF,MAAM,CAAC,MAAM,OAAO,GAAG;IACrB,MAAM,EAAE,GAAG,EAAE,CACX,IAAI,CAAA;;;;;;;;;;;;;;;;;;8DAkBsD;CAC7D,CAAC","sourcesContent":["import {html} from \"lit\";\nimport \"./index\";\n\nexport default {\n  title: \"ZVisuallyHidden\",\n  component: \"z-visually-hidden\",\n};\n\nexport const Default = {\n  render: () =>\n    html`<h2 class=\"heading-2\">ZVisuallyHidden</h2>\n      <span\n        >This component visually hide an element while still allowing it to be exposed to assistive technologies (such\n        as screen readers).</span\n      ><span>\n        There are real world situations where visually hiding content may be appropriate:\n        <ul>\n          <li>Hide visually the text of <code>ZAriaAlert</code></li>\n          <li>\n            Take advantage of the behavior and semantics of a native element like a checkbox or radio button, but\n            replace it with a custom styled element visually.\n          </li>\n          <li>\n            Hide visually an <code>h1</code> because could be redundant for a sighted user but could be usefull for\n            navigation through ScreenReader rotor\n          </li>\n        </ul>\n      </span>\n      <z-visually-hidden><div>Hello</div></z-visually-hidden>`,\n};\n"]}