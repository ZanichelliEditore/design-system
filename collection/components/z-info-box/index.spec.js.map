{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../src/components/z-info-box/index.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,QAAQ,EAAC,MAAM,SAAS,CAAC;AAEjC,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC1C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE,2BAA2B;SAClC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;KAS7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE,yDAAyD;SAChE,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;KAS7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE,0DAA0D;SACjE,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQ7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,IAAI,EAAE;;sBAEU;SACjB,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;KAU7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZInfoBox} from \"./index\";\n\ndescribe(\"Suite test ZInfoBox\", () => {\n  it(\"Test render ZInfoBox vuoto\", async () => {\n    const page = await newSpecPage({\n      components: [ZInfoBox],\n      html: `<z-info-box></z-info-box>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-info-box>\n        <mock:shadow-root>\n          <div>\n            <slot name=\"content\"></slot>\n            <z-icon data-action=\"infoBoxClose\" name=\"multiply\"></z-icon>\n          </div>\n        </mock:shadow-root>\n      </z-info-box>\n    `);\n  });\n\n  it(\"Test render ZInfoBox con props\", async () => {\n    const page = await newSpecPage({\n      components: [ZInfoBox],\n      html: `<z-info-box boxid=\"box\" isclosable=\"true\"></z-info-box>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-info-box boxid=\"box\" isclosable=\"true\">\n        <mock:shadow-root>\n          <div id=\"box\">\n            <slot name=\"content\"></slot>\n            <z-icon data-action=\"infoBoxClose\" name=\"multiply\"></z-icon>\n          </div>\n        </mock:shadow-root>\n      </z-info-box>\n    `);\n  });\n\n  it(\"Test render ZInfoBox non closable\", async () => {\n    const page = await newSpecPage({\n      components: [ZInfoBox],\n      html: `<z-info-box boxid=\"box\" isclosable=\"false\"></z-info-box>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-info-box boxid=\"box\" isclosable=\"false\">\n        <mock:shadow-root>\n          <div id=\"box\">\n            <slot name=\"content\"></slot>\n          </div>\n        </mock:shadow-root>\n      </z-info-box>\n    `);\n  });\n\n  it(\"Test render ZInfoBox con content\", async () => {\n    const page = await newSpecPage({\n      components: [ZInfoBox],\n      html: `<z-info-box boxid=\"box\">\n          <span slot=\"content\">info box content</span>\n        </z-info-box>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-info-box boxid=\"box\">\n        <mock:shadow-root>\n          <div id=\"box\">\n            <slot name=\"content\"></slot>\n            <z-icon data-action=\"infoBoxClose\" name=\"multiply\"></z-icon>\n          </div>\n        </mock:shadow-root>\n            <span slot=\"content\">info box content</span>\n      </z-info-box>\n    `);\n  });\n});\n"]}