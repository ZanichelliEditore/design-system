{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../src/components/z-card/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZCard} from \"./index\";\n\ndescribe(\"Suite test ZCard\", () => {\n  it(\"Test render ZCard with cover\", async () => {\n    const page = await newSpecPage({\n      components: [ZCard],\n      html: `<z-card>\n        <img slot=\"cover\" src=\"https://i.pinimg.com/originals/b9/fc/7e/b9fc7e6b2dd2ca128bcc3412e68994f0.jpg\" />\n        <h2 class=\"body-5\" slot=\"metadata\">metadata</h2>\n        <h3 slot=\"title\">Card title</h3>\n        <p class=\"body-3\" slot=\"text\">Description</p>\n        <z-icon name=\"share\" slot=\"action\"></z-icon>\n        <z-icon name=\"delete\" slot=\"action\"></z-icon>\n      </z-card>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-card>\n        <mock:shadow-root>\n          <div class=\"cover-container\">\n            <slot name=\"cover\"></slot>\n          </div>\n          <div class=\"content\">\n            <slot name=\"metadata\"></slot>\n            <slot name=\"title\"></slot>\n            <slot name=\"text\"></slot>\n            <div class=\"actions\">\n              <slot name=\"action\"></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n        <img slot=\"cover\" src=\"https://i.pinimg.com/originals/b9/fc/7e/b9fc7e6b2dd2ca128bcc3412e68994f0.jpg\" />\n        <h2 class=\"body-5\" slot=\"metadata\">metadata</h2>\n        <h3 slot=\"title\">Card title</h3>\n        <p class=\"body-3\" slot=\"text\">Description</p>\n        <z-icon name=\"share\" slot=\"action\"></z-icon>\n        <z-icon name=\"delete\" slot=\"action\"></z-icon>\n      </z-card>\n    `);\n  });\n\n  it(\"Test render ZCard with cover and icon\", async () => {\n    const page = await newSpecPage({\n      components: [ZCard],\n      html: `<z-card cover-icon=\"play-filled\">\n        <img slot=\"cover\" src=\"https://i.pinimg.com/originals/b9/fc/7e/b9fc7e6b2dd2ca128bcc3412e68994f0.jpg\" />\n        <h2 class=\"body-5\" slot=\"metadata\">metadata</h2>\n        <h3 slot=\"title\">Card title</h3>\n        <p class=\"body-3\" slot=\"text\">Description</p>\n        <z-icon name=\"share\" slot=\"action\"></z-icon>\n        <z-icon name=\"delete\" slot=\"action\"></z-icon>\n      </z-card>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-card cover-icon=\"play-filled\">\n        <mock:shadow-root>\n          <div class=\"cover-container\">\n            <slot name=\"cover\"></slot>\n            <z-icon name=\"play-filled\"></z-icon>\n          </div>\n          <div class=\"content\">\n            <slot name=\"metadata\"></slot>\n            <slot name=\"title\"></slot>\n            <slot name=\"text\"></slot>\n            <div class=\"actions\">\n              <slot name=\"action\"></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n        <img slot=\"cover\" src=\"https://i.pinimg.com/originals/b9/fc/7e/b9fc7e6b2dd2ca128bcc3412e68994f0.jpg\" />\n        <h2 class=\"body-5\" slot=\"metadata\">metadata</h2>\n        <h3 slot=\"title\">Card title</h3>\n        <p class=\"body-3\" slot=\"text\">Description</p>\n        <z-icon name=\"share\" slot=\"action\"></z-icon>\n        <z-icon name=\"delete\" slot=\"action\"></z-icon>\n      </z-card>\n    `);\n  });\n\n  it(\"Test render ZCard with color cover\", async () => {\n    const page = await newSpecPage({\n      components: [ZCard],\n      html: `<z-card>\n        <h2 class=\"body-5\" slot=\"metadata\">metadata</h2>\n        <h3 slot=\"title\">Card title</h3>\n        <p class=\"body-3\" slot=\"text\">Description</p>\n      </z-card>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-card>\n        <mock:shadow-root>\n          <div class=\"cover-container\">\n            <div class=\"color-cover\">\n              <div class=\"cover-content\">\n                <slot name=\"metadata\"></slot>\n                <slot name=\"title\"></slot>\n              </div>\n            </div>\n          </div>\n          <div class=\"content\">\n            <slot name=\"text\"></slot>\n            <div class=\"actions\">\n              <slot name=\"action\"></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n        <h2 class=\"body-5\" slot=\"metadata\">metadata</h2>\n        <h3 slot=\"title\">Card title</h3>\n        <p class=\"body-3\" slot=\"text\">Description</p>\n      </z-card>\n    `);\n  });\n\n  it(\"Test render ZCard text variant\", async () => {\n    const page = await newSpecPage({\n      components: [ZCard],\n      html: `\n        <z-card clickable variant=\"text\" showshadow style=\"border: 1px solid black;\">\n          <h2 class=\"body-5\" slot=\"metadata\">metadata</h2>\n          <h3 slot=\"title\">Card title</h3>\n          <p class=\"body-3\" slot=\"text\">Some description for the content of the card.</p>\n          <z-icon name=\"share\" slot=\"action\" fill=\"color-primary01\"></z-icon>\n          <z-icon name=\"delete\" slot=\"action\" fill=\"color-primary01\"></z-icon>\n        </z-card>\n      `,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-card clickable variant=\"text\" showshadow style=\"border: 1px solid black;\">\n        <mock:shadow-root>\n          <div class=\"content\">\n            <slot name=\"metadata\"></slot>\n            <slot name=\"title\"></slot>\n            <slot name=\"text\"></slot>\n            <div class=\"actions\">\n              <slot name=\"action\"></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n        <h2 class=\"body-5\" slot=\"metadata\">metadata</h2>\n        <h3 slot=\"title\">Card title</h3>\n        <p class=\"body-3\" slot=\"text\">Some description for the content of the card.</p>\n        <z-icon name=\"share\" slot=\"action\" fill=\"color-primary01\"></z-icon>\n        <z-icon name=\"delete\" slot=\"action\" fill=\"color-primary01\"></z-icon>\n      </z-card>\n    `);\n  });\n\n  it(\"Test ZCard click\", async () => {\n    const page = await newSpecPage({\n      components: [ZCard],\n      html: `<z-card clickable>\n        <h2 class=\"body-5\" slot=\"metadata\">metadata</h2>\n        <button id=\"btn\" slot=\"title\">Card title</button>\n        <p class=\"body-3\" slot=\"text\">Description</p>\n      </z-card>`,\n    });\n\n    const btn = page.body.querySelector(\"#btn\") as HTMLButtonElement;\n    const buttonClickedCallback = jest.fn();\n    btn.addEventListener(\"click\", buttonClickedCallback);\n    btn.click();\n\n    expect(buttonClickedCallback).toHaveBeenCalled();\n  });\n\n  it(\"Should trigger the slotted action listener but not the one for ZCard\", async () => {\n    const page = await newSpecPage({\n      components: [ZCard],\n      html: `<z-card>\n        <h2 class=\"body-5\" slot=\"metadata\">metadata</h2>\n        <button id=\"btn\" slot=\"title\">Card title</button>\n        <p class=\"body-3\" slot=\"text\">Description</p>\n        <button id=\"action-btn\" slot=\"action\"><z-icon name=\"gear\" /></button>\n      </z-card>`,\n    });\n\n    const btn = page.body.querySelector(\"#btn\") as HTMLButtonElement;\n    const onCardClick = jest.fn();\n    const action = page.body.querySelector(\"#action-btn\") as HTMLButtonElement;\n    const onActionClick = jest.fn();\n    btn.addEventListener(\"click\", onCardClick);\n    action.addEventListener(\"click\", onActionClick);\n    action.click();\n\n    expect(onActionClick).toHaveBeenCalled();\n    expect(onCardClick).not.toHaveBeenCalled();\n  });\n});\n"]}