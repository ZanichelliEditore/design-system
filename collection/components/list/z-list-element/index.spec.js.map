{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../src/components/list/z-list-element/index.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,YAAY,EAAC,MAAM,SAAS,CAAC;AAErC,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,oDAAoD;SAC3D,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;KAa7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,0GAA0G;SACjH,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;KAoB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,0GAA0G;SACjH,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QAClB,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;KAoB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,kIAAkI;SACzI,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;KAoB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,IAAI,EAAE,+HAA+H;SACtI,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;KAoB7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZListElement} from \"./index\";\n\ndescribe(\"Suite test ZListElement\", () => {\n  it(\"Test render ZListElement\", async () => {\n    const page = await newSpecPage({\n      components: [ZListElement],\n      html: `<z-list-element><span>Test</span></z-list-element>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n    <z-list-element align-button=\"left\" color=\"none\" list-element-position=\"0\" list-type=\"none\" role=\"listitem\" size=\"medium\" tabindex=\"0\">\n        <mock:shadow-root>\n          <div class=\"container\" id=\"z-list-element-id-undefined\" part=\"list-item-container\"  tabindex=\"-1\" style=\"color: var(--none);\">\n            <div class=\"z-list-element-container\">\n              <slot></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n        <span>\n          Test\n        </span>\n      </z-list-element>\n    `);\n  });\n\n  it(\"Test render ZListElement expandable\", async () => {\n    const page = await newSpecPage({\n      components: [ZListElement],\n      html: `<z-list-element expandable=\"true\"><span>Test</span><div slot=\"inner-content\">Test</div></z-list-element>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-list-element align-button=\"left\" color=\"none\" list-element-position=\"0\" list-type=\"none\" expandable=\"\" role=\"listitem\" size=\"medium\" tabindex=\"0\">\n        <mock:shadow-root>\n          <div class=\"container\" id=\"z-list-element-id-undefined\" part=\"list-item-container\" tabindex=\"-1\" style=\"color: var(--none);\">\n            <div class=\"z-list-element-container\">\n              <z-icon name=\"plus-circled\"></z-icon>\n              <slot></slot>\n            </div>\n            <div class=\"z-list-element-inner-container\">\n              <slot name=\"inner-content\"></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n        <span>\n          Test\n        </span>\n        <div slot=\"inner-content\">\n          Test\n        </div>\n      </z-list-element>\n    `);\n  });\n\n  it(\"Test render ZListElement expanded content\", async () => {\n    const page = await newSpecPage({\n      components: [ZListElement],\n      html: `<z-list-element expandable=\"true\"><span>Test</span><div slot=\"inner-content\">Test</div></z-list-element>`,\n    });\n\n    page.root.click();\n    await page.waitForChanges();\n\n    expect(page.root).toEqualHtml(`\n      <z-list-element align-button=\"left\" color=\"none\" list-element-position=\"0\" list-type=\"none\" aria-expanded=\"\" expandable=\"\" role=\"listitem\" size=\"medium\" tabindex=\"0\">\n        <mock:shadow-root>\n          <div class=\"container\" id=\"z-list-element-id-undefined\" part=\"list-item-container\"  tabindex=\"-1\" style=\"color: var(--none);\">\n            <div class=\"z-list-element-container\">\n              <z-icon name=\"minus-circled\"></z-icon>\n              <slot></slot>\n            </div>\n            <div class=\"expanded z-list-element-inner-container\">\n              <slot name=\"inner-content\"></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n        <span>\n          Test\n        </span>\n        <div slot=\"inner-content\">\n          Test\n        </div>\n      </z-list-element>\n    `);\n  });\n\n  it(\"Test render ZListElement expandable style\", async () => {\n    const page = await newSpecPage({\n      components: [ZListElement],\n      html: `<z-list-element expandable-style=\"menu\" expandable=\"true\"><span>Test</span><div slot=\"inner-content\">Test</div></z-list-element>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-list-element align-button=\"left\" color=\"none\" list-element-position=\"0\" list-type=\"none\" expandable=\"\" expandable-style=\"menu\" role=\"listitem\" size=\"medium\" tabindex=\"0\">\n        <mock:shadow-root>\n          <div class=\"container\" id=\"z-list-element-id-undefined\" part=\"list-item-container\" tabindex=\"-1\" style=\"color: var(--none);\">\n            <div class=\"z-list-element-container\">\n              <z-icon name=\"chevron-down\"></z-icon>\n              <slot></slot>\n            </div>\n            <div class=\"z-list-element-inner-container\">\n              <slot name=\"inner-content\"></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n        <span>\n          Test\n        </span>\n        <div slot=\"inner-content\">\n          Test\n        </div>\n      </z-list-element>\n    `);\n  });\n\n  it(\"Test render ZListElement align button right\", async () => {\n    const page = await newSpecPage({\n      components: [ZListElement],\n      html: `<z-list-element expandable=\"true\" align-button=\"right\"><span>Test</span><div slot=\"inner-content\">Test</div></z-list-element>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-list-element align-button=\"right\" color=\"none\" list-element-position=\"0\" list-type=\"none\" expandable=\"\" role=\"listitem\" size=\"medium\" tabindex=\"0\">\n        <mock:shadow-root>\n          <div class=\"container\" id=\"z-list-element-id-undefined\" part=\"list-item-container\"  tabindex=\"-1\" style=\"color: var(--none);\">\n            <div class=\"z-list-element-container\">\n              <z-icon name=\"plus-circled\"></z-icon>\n              <slot></slot>\n            </div>\n            <div class=\"z-list-element-inner-container\">\n              <slot name=\"inner-content\"></slot>\n            </div>\n          </div>\n        </mock:shadow-root>\n        <span>\n          Test\n        </span>\n        <div slot=\"inner-content\">\n          Test\n        </div>\n      </z-list-element>\n    `);\n  });\n});\n"]}