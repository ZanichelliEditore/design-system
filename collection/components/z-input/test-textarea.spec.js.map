{"version":3,"file":"test-textarea.spec.js","sourceRoot":"","sources":["../../../../src/components/z-input/test-textarea.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,MAAM,EAAC,MAAM,SAAS,CAAC;AAE/B,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;IAC5C,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,yHAAyH;SAChI,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;KAS7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,2IAA2I;SAClJ,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;KAS7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,gJAAgJ;SACvJ,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;KAU7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZInput} from \"./index\";\n\ndescribe(\"Suite test ZInput - textarea\", () => {\n  it(\"Test render ZInput textarea\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input message=\"false\" type=\"textarea\" htmlid=\"test\" placeholder=\"placeholder\" value=\"value\" label=\"label\"></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input message=\"false\" type=\"textarea\" htmlid=\"test\" placeholder=\"placeholder\" value=\"value\" label=\"label\" size=\"big\">\n        <div class=\"text-wrapper\">\n          <label class=\"body-5-sb input-label\" htmlfor=\"test\" id=\"test_label\">label</label>\n          <div class=\"textarea-wrapper filled\">\n            <textarea class=\"filled\" id=\"test\" placeholder=\"placeholder\" value=\"value\"></textarea>\n          </div>\n        </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput textarea disabled/readonly\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input message=\"false\" type=\"textarea\" htmlid=\"test\" placeholder=\"placeholder\" value=\"value\" label=\"label\" disabled readonly></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input message=\"false\" type=\"textarea\" htmlid=\"test\" placeholder=\"placeholder\" value=\"value\" label=\"label\" disabled readonly size=\"big\">\n        <div class=\"text-wrapper\">\n          <label class=\"body-5-sb input-label\" htmlfor=\"test\" id=\"test_label\">label</label>\n          <div class=\"textarea-wrapper filled readonly\">\n            <textarea disabled readonly class=\"filled\" id=\"test\" placeholder=\"placeholder\" value=\"value\"></textarea>\n          </div>\n        </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput textarea status/messages\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input type=\"textarea\" htmlid=\"test\" placeholder=\"placeholder\" label=\"label\" status=\"error\" message=\"error message\" value=\"value\"></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input type=\"textarea\" htmlid=\"test\" placeholder=\"placeholder\" label=\"label\" size=\"big\" status=\"error\" message=\"error message\" value=\"value\">\n        <div class=\"text-wrapper\">\n          <label class=\"body-5-sb input-label\" htmlfor=\"test\" id=\"test_label\">label</label>\n          <div class=\"textarea-wrapper filled input-error\">\n            <textarea class=\"filled input-error\" id=\"test\" placeholder=\"placeholder\" value=\"value\"></textarea>\n          </div>\n          <z-input-message class=\"big\" message=\"error message\" status=\"error\"></z-input-message>\n        </div>\n      </z-input>\n    `);\n  });\n});\n"]}