{"version":3,"file":"test-text.spec.js","sourceRoot":"","sources":["../../../../src/components/z-input/test-text.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\nimport {ZIcon} from \"../z-icon\";\nimport {ZInput} from \"./index\";\n\ndescribe(\"Suite test ZInput - text\", () => {\n  jest.useFakeTimers({\n    legacyFakeTimers: true,\n  });\n  it(\"Test render ZInput vuoto\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input message=\"false\" htmlid=\"id\"></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input message=\"false\" htmlid=\"id\" size=\"big\">\n          <div class=\"text-wrapper\">\n            <div>\n              <input id=\"id\" class=\"has-clear-icon\" type=\"text\" />\n              <span class=\"icons-wrapper\">\n                <button aria-label=\"cancella il contenuto dell'input\" class=\"hidden icon-button reset-icon\" type=\"button\">\n                <z-icon class=\"big\" name=\"multiply\"></z-icon>\n                </button>\n              </span>\n            </div>\n          </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput vuoto small\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input message=\"false\" htmlid=\"id\" size=\"small\"></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input message=\"false\" htmlid=\"id\" size=\"small\">\n          <div class=\"text-wrapper\">\n            <div>\n              <input id=\"id\" class=\"has-clear-icon\" type=\"text\" />\n              <span class=\"icons-wrapper\">\n                <button aria-label=\"cancella il contenuto dell'input\" class=\"hidden icon-button reset-icon\" type=\"button\">\n                  <z-icon class=\"small\" name=\"multiply\"></z-icon>\n                </button>\n              </span>\n            </div>\n          </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput vuoto x-small\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input message=\"false\" htmlid=\"id\" size=\"x-small\"></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input message=\"false\" htmlid=\"id\" size=\"x-small\">\n          <div class=\"text-wrapper\">\n            <div>\n              <input id=\"id\" class=\"has-clear-icon\" type=\"text\" />\n              <span class=\"icons-wrapper\">\n                <button aria-label=\"cancella il contenuto dell'input\" class=\"hidden icon-button reset-icon\" type=\"button\">\n                  <z-icon class=\"x-small\" name=\"multiply\"></z-icon>\n                </button>\n              </span>\n            </div>\n          </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput con attributi\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input message=\"false\" type='text' htmlid='test' placeholder='placeholder' value='value' label='label'></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input message=\"false\" type='text' htmlid='test' placeholder='placeholder' size='big' value='value' label='label'>\n          <div class=\"text-wrapper\">\n            <label class=\"body-5-sb input-label\" htmlfor=\"test\" id=\"test_label\">label</label>\n            <div>\n              <input class=\"filled has-clear-icon\" type='text' id='test' placeholder='placeholder' value='value' />\n              <span class=\"icons-wrapper\">\n                <button type=\"button\" class=\"icon-button reset-icon\" aria-label=\"cancella il contenuto dell'input\">\n                  <z-icon class=\"big\" name=\"multiply\"></z-icon>\n                </button>\n              </span>\n            </div>\n          </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput senza attributo label\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input message=\"false\" type='text' htmlid='test' placeholder='placeholder' value='value' aria-label='label'></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input message=\"false\" type='text' htmlid='test' placeholder='placeholder' size='big' value='value' aria-label='label'>\n          <div class=\"text-wrapper\">\n            <div>\n              <input class=\"filled has-clear-icon\" type='text' id='test' placeholder='placeholder' value='value' aria-label=\"label\" />\n              <span class=\"icons-wrapper\">\n                <button type=\"button\" class=\"icon-button reset-icon\" aria-label=\"cancella il contenuto dell'input\">\n                  <z-icon class=\"big\" name=\"multiply\"></z-icon>\n                </button>\n              </span>\n            </div>\n          </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput con attributi disabled\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input message=\"false\" type='text' htmlid='test' placeholder='placeholder' value='value' label='label' disabled></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input message=\"false\" type='text' htmlid='test' placeholder='placeholder' size='big' value='value' label='label' disabled>\n          <div class=\"text-wrapper\">\n            <label class=\"body-5-sb input-label\" htmlfor=\"test\" id=\"test_label\">label</label>\n            <div>\n              <input disabled class=\"filled has-clear-icon\" type='text' id='test' placeholder='placeholder' value='value' />\n              <span class=\"icons-wrapper\">\n                <button aria-label=\"cancella il contenuto dell'input\" class=\"hidden icon-button reset-icon\" type=\"button\">\n                  <z-icon class=\"big\" name=\"multiply\"></z-icon>\n                </button>\n              </span>\n            </div>\n          </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput con attributi readonly\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input message=\"false\" type='text' htmlid='test' placeholder='placeholder' value='value' label='label' readonly></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input message=\"false\" type='text' htmlid='test' placeholder='placeholder' value='value' label='label' readonly size='big'>\n          <div class=\"text-wrapper\">\n            <label class=\"body-5-sb input-label\" htmlfor=\"test\" id=\"test_label\">label</label>\n            <div>\n              <input readonly class=\"filled has-clear-icon\" type='text' id='test' placeholder='placeholder' value='value' />\n              <span class=\"icons-wrapper\">\n                <button aria-label=\"cancella il contenuto dell'input\" class=\"hidden icon-button reset-icon\" type=\"button\">\n                    <z-icon class=\"big\" name=\"multiply\"></z-icon>\n                </button>\n              </span>\n            </div>\n          </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput con helper message\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input type='text' htmlid='test' placeholder='placeholder' value='value' label='label' message='helper message'></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input type='text' htmlid='test' placeholder='placeholder' size='big' value='value' label='label' message='helper message'>\n          <div class=\"text-wrapper\">\n            <label class=\"body-5-sb input-label\" htmlfor=\"test\" id=\"test_label\">label</label>\n            <div>\n              <input class=\"filled has-clear-icon\" type='text' id='test' placeholder='placeholder' value='value' />\n              <span class=\"icons-wrapper\">\n                <button type=\"button\" class=\"icon-button reset-icon\" aria-label=\"cancella il contenuto dell'input\">\n                  <z-icon class=\"big\" name=\"multiply\"></z-icon>\n                </button>\n              </span>\n            </div>\n            <z-input-message class=\"big\" message=\"helper message\"></z-input-message>\n          </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput con status e message\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input type='text' htmlid='test' placeholder='placeholder' value='value' label='label' status='success' message='success message'></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input type='text' htmlid='test' placeholder='placeholder' size=\"big\" value='value' label='label' status='success' message='success message'>\n          <div class=\"text-wrapper\">\n            <label class=\"body-5-sb input-label\" htmlfor=\"test\" id=\"test_label\">label</label>\n            <div>\n              <input class=\"filled input-success has-clear-icon\" type='text' id='test' placeholder='placeholder' value='value' />\n              <span class=\"icons-wrapper\">\n                <button type=\"button\" class=\"icon-button reset-icon\" aria-label=\"cancella il contenuto dell'input\">\n                  <z-icon class=\"big\" name=\"multiply\"></z-icon>\n                </button>\n              </span>\n            </div>\n            <z-input-message class=\"big\" message=\"success message\" status=\"success\"></z-input-message>\n          </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test ZInput clear\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput, ZIcon],\n      html: `<z-input type='text' htmlid='test' placeholder='placeholder' value='value' label='label'></z-input>`,\n    });\n    const icon: HTMLZIconElement = page.body.querySelector(\".reset-icon z-icon\");\n    expect(page.rootInstance.value).toEqual(\"value\");\n    icon.click();\n    await page.waitForChanges();\n    expect(page.rootInstance.value).toEqual(\"\");\n  });\n\n  it(\"Test render ZInput vuoto - password nascosta\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input message=\"false\" htmlid=\"id\" type=\"password\"></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input message=\"false\" htmlid=\"id\" size=\"big\" type=\"password\">\n          <div class=\"text-wrapper\">\n            <div>\n              <input id=\"id\" class=\"has-clear-icon has-icon\" type=\"password\" />\n              <span class=\"icons-wrapper\">\n                <button aria-label=\"cancella il contenuto dell'input\" class=\"hidden icon-button reset-icon\" type=\"button\">\n                  <z-icon class=\"big\" name=\"multiply\"></z-icon>\n                </button>\n                <button type=\"button\" class=\"icon-button toggle-password-icon\" aria-label=\"mostra password\">\n                  <z-icon class=\"big\" name=\"view-filled\"></z-icon>\n                </button>\n              </span>\n            </div>\n          </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput vuoto - password visibile\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input message=\"false\" htmlid=\"id\" type=\"password\"></z-input>`,\n    });\n    page.rootInstance.passwordHidden = false;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-input message=\"false\" htmlid=\"id\" size=\"big\" type=\"password\">\n          <div class=\"text-wrapper\">\n            <div>\n              <input id=\"id\" class=\"has-clear-icon has-icon\" type=\"text\" />\n              <span class=\"icons-wrapper\">\n                <button aria-label=\"cancella il contenuto dell'input\" class=\"hidden icon-button reset-icon\" type=\"button\">\n                  <z-icon class=\"big\" name=\"multiply\"></z-icon>\n                </button>\n                <button type=\"button\" class=\"icon-button toggle-password-icon\" aria-label=\"nascondi password\">\n                  <z-icon class=\"big\" name=\"view-off-filled\"></z-icon>\n                </button>\n              </span>\n            </div>\n          </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput - with clear icon\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input htmlid=\"id\" hasclearicon=\"true\" value=\"value\"></z-input>`,\n    });\n    page.rootInstance.passwordHidden = false;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-input htmlid=\"id\" hasclearicon=\"true\" size=\"big\" value=\"value\">\n          <div class=\"text-wrapper\">\n            <div>\n              <input id=\"id\" class=\"filled has-clear-icon\" type=\"text\" value=\"value\" />\n              <span class=\"icons-wrapper\">\n                <button type=\"button\" class=\"icon-button reset-icon\" aria-label=\"cancella il contenuto dell'input\">\n                  <z-icon class=\"big\" name=\"multiply\"></z-icon>\n                </button>\n              </span>\n            </div>\n            <z-input-message class=\"big\"></z-input-message>\n          </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput - without clear icon\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input htmlid=\"id\" hasclearicon=\"false\" value=\"value\"></z-input>`,\n    });\n    page.rootInstance.passwordHidden = false;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-input htmlid=\"id\" hasclearicon=\"false\" size=\"big\" value=\"value\">\n          <div class=\"text-wrapper\">\n            <div>\n              <input id=\"id\" class=\"filled\" type=\"text\" value=\"value\" />\n              <span class=\"icons-wrapper\">\n                <button aria-label=\"cancella il contenuto dell'input\" class=\"hidden icon-button reset-icon\" type=\"button\">\n                  <z-icon class=\"big\" name=\"multiply\"></z-icon>\n                </button>\n              </span>\n            </div>\n            <z-input-message class=\"big\"></z-input-message>\n          </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput - with icon\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input htmlid=\"id\" icon=\"pdf\"></z-input>`,\n    });\n    page.rootInstance.passwordHidden = false;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-input htmlid=\"id\" icon=\"pdf\" size=\"big\">\n          <div class=\"text-wrapper\">\n            <div>\n              <input id=\"id\" class=\"has-icon has-clear-icon\" type=\"text\" />\n              <span class=\"icons-wrapper\">\n                <button aria-label=\"cancella il contenuto dell'input\" class=\"hidden icon-button reset-icon\" type=\"button\">\n                  <z-icon class=\"big\" name=\"multiply\"></z-icon>\n                </button>\n                <button aria-hidden=\"true\" type=\"button\" class=\"icon-button input-icon\" tabindex=\"-1\">\n                  <z-icon class=\"big\" name=\"pdf\"></z-icon>\n                </button>\n              </span>\n            </div>\n            <z-input-message class=\"big\"></z-input-message>\n          </div>\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput type=number\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input message=\"false\" type='number' min='1' max='10' step='2' htmlid='test'></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input htmlid=\"test\" max=\"10\" message=\"false\" min=\"1\" size=\"big\" step=\"2\" type=\"number\">\n        <div class=\"text-wrapper\">\n          <div>\n            <input id=\"test\" max=\"10\" min=\"1\" step=\"2\" type=\"number\">\n            <span class=\"icons-wrapper\">\n              <button aria-label=\"cancella il contenuto dell'input\" class=\"hidden icon-button reset-icon\" type=\"button\">\n                <z-icon class=\"big\" name=\"multiply\"></z-icon>\n              </button>\n            </span>\n          </div>\n        </div>\n      </z-input>\n    `);\n  });\n});\n"]}