{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../src/components/inputs/z-combobox/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZCombobox} from \"./index\";\n\ndescribe(\"Suite test ZCombobox\", () => {\n  it(\"Test render ZCombobox chiusa\", async () => {\n    const page = await newSpecPage({\n      components: [ZCombobox],\n      html: `<z-combobox items='[]' inputid=\"combobox\"></z-combobox>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-combobox items='[]' inputid=\"combobox\">\n        <mock:shadow-root>\n          <div data-action=\"combo-combobox\" id=\"combobox\">\n            <div aria-expanded=\"false\" class=\"header\" role=\"button\" tabindex=\"0\">\n            <p class=\"body-3\"><span></span></p>\n              <z-icon class=\"big\" name=\"caret-down\" />\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-combobox>\n    `);\n  });\n\n  it(\"Test render ZCombobox disabilitata\", async () => {\n    const page = await newSpecPage({\n      components: [ZCombobox],\n      html: `<z-combobox items='[]' inputid=\"combobox\" disabled='true'></z-combobox>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-combobox disabled='' items='[]' inputid=\"combobox\">\n        <mock:shadow-root>\n          <div class=\"disabled\" data-action=\"combo-combobox\" id=\"combobox\">\n            <div aria-expanded=\"false\" class=\"header\" role=\"button\" tabindex=\"0\">\n            <p class=\"body-3\"><span></span></p>\n              <z-icon class=\"big\" name=\"caret-down\" />\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-combobox>\n    `);\n  });\n\n  it(\"Test render ZCombobox chiusa con attributi\", async () => {\n    const page = await newSpecPage({\n      components: [ZCombobox],\n      html: `<z-combobox items='[]' inputid=\"combobox\" label=\"label\" isfixed></z-combobox>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-combobox items='[]' inputid=\"combobox\" label=\"label\" isfixed>\n        <mock:shadow-root>\n          <div class=\"fixed\" id=\"combobox\" data-action=\"combo-combobox\">\n            <div aria-expanded=\"false\" class=\"header\" role=\"button\" tabindex=\"0\">\n              <p class=\"body-3\">\n                label\n                <span></span>\n              </p>\n              <z-icon class=\"big\" name=\"caret-down\" />\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-combobox>\n    `);\n  });\n\n  it(\"Test render ZCombobox chiusa con attributi ed elemento selezionato\", async () => {\n    const page = await newSpecPage({\n      components: [ZCombobox],\n      html: `<z-combobox items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]' inputid=\"combobox\" label=\"label\"></z-combobox>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-combobox items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]' inputid=\"combobox\" label=\"label\">\n        <mock:shadow-root>\n          <div data-action=\"combo-combobox\" id=\"combobox\">\n            <div aria-expanded=\"false\" class=\"header\" role=\"button\" tabindex=\"0\">\n              <p class=\"body-3\">\n                label\n                <span>(1)</span>\n              </p>\n              <z-icon class=\"big\" name=\"caret-down\" />\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-combobox>\n    `);\n  });\n\n  it(\"Test render ZCombobox aperta vuota\", async () => {\n    const page = await newSpecPage({\n      components: [ZCombobox],\n      html: `<z-combobox items='[]' inputid=\"combobox\" noresultslabel='non ci sono risultati'></z-combobox>`,\n    });\n    page.rootInstance.isopen = true;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-combobox items='[]' inputid=\"combobox\" noresultslabel='non ci sono risultati'>\n        <mock:shadow-root>\n          <div class=\"open\" data-action=\"combo-combobox\" id=\"combobox\">\n            <div aria-expanded=\"true\" class=\"header\" role=\"button\" tabindex=\"0\">\n           <p class=\"body-3\"><span></span></p>\n              <z-icon class=\"big\" name=\"caret-down\" ></z-icon>\n            </div>\n            <div class=\"open-combo-data\">\n              <span role=\"combobox\" aria-controls=\"combobox_list\" aria-expanded=\"true\"></span>\n              <div aria-multiselectable=\"\" role=\"listbox\" id=\"combobox_list\" aria-owns=\"\">\n                <div>\n                  <ul role=\"none\"></ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-combobox>\n    `);\n  });\n\n  it(\"Test render ZCombobox aperta con elementi\", async () => {\n    const page = await newSpecPage({\n      components: [ZCombobox],\n      html: `<z-combobox inputid=\"combobox\" label=\"combo\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]'></z-combobox>`,\n    });\n    page.rootInstance.isopen = true;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-combobox inputid=\"combobox\" label=\"combo\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]'>\n        <mock:shadow-root>\n          <div class=\"open\" data-action=\"combo-combobox\" id=\"combobox\">\n            <div aria-expanded=\"true\" class=\"header\" role=\"button\" tabindex=\"0\">\n            <p class=\"body-3\">combo<span>(1)</span></p>\n              <z-icon class=\"big\" name=\"caret-down\" />\n            </div>\n             <div class=\"open-combo-data\">\n              <span role=\"combobox\" aria-label=\"combo\" aria-controls=\"combobox_list\" aria-expanded=\"true\"></span>\n              <div aria-multiselectable=\"\" role=\"listbox\" aria-label=\"combo\" id=\"combobox_list\" aria-owns=\"\">\n                <div>\n                  <ul role=\"none\">\n                    <z-list-element dividertype=\"element\" id=\"item_1\" size=\"large\">\n                      <z-input role=\"option\" aria-selected=\"false\" disabled=\"0\" class=\"combo-item-checkbox-input-combobox\" type=\"checkbox\" size=\"big\" htmlid=\"combo-checkbox-combobox-item_1\" label=\"primo elemento\"></z-input>\n                    </z-list-element>\n                    <z-list-element dividertype=\"none\" id=\"item_2\" size=\"large\">\n                      <z-input role=\"option\" aria-selected=\"true\" type=\"checkbox\" class=\"combo-item-checkbox-input-combobox\" size=\"big\" htmlid=\"combo-checkbox-combobox-item_2\" label=\"secondo elemento\" checked></z-input>\n                    </z-list-element>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-combobox>\n    `);\n  });\n\n  it(\"Test render ZCombobox aperta con ricerca\", async () => {\n    const page = await newSpecPage({\n      components: [ZCombobox],\n      html: `<z-combobox inputid=\"combobox\" label=\"combo\" hassearch=true searchlabel=\"cerca\" searchplaceholder=\"placeholder\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]'></z-combobox>`,\n    });\n    page.rootInstance.isopen = true;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-combobox inputid=\"combobox\" label=\"combo\" hassearch=true searchlabel=\"cerca\" searchplaceholder=\"placeholder\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]'>\n        <mock:shadow-root>\n          <div class=\"open\" data-action=\"combo-combobox\" id=\"combobox\">\n            <div aria-expanded=\"true\" class=\"header\" role=\"button\" tabindex=\"0\">\n            <p class=\"body-3\">combo<span>(1)</span></p>\n              <z-icon class=\"big\" name=\"caret-down\" />\n            </div>\n            <div class=\"open-combo-data\">\n              <z-input aria-autocomplete=\"list\" aria-controls=\"combobox_list\" aria-expanded=\"true\" htmlid=\"combobox_search\" label=\"cerca\" placeholder=\"placeholder\" role=\"combobox\" aria-label=\"combo\" size=\"big\" type=\"text\"></z-input>\n              <div aria-multiselectable=\"\" role=\"listbox\" aria-label=\"combo\" id=\"combobox_list\" aria-owns=\"\">\n                <div>\n                  <ul role=\"none\">\n                    <z-list-element dividertype=\"element\" id=\"item_1\" size=\"large\">\n                      <z-input role=\"option\" aria-selected=\"false\" disabled=\"0\" class=\"combo-item-checkbox-input-combobox\" type=\"checkbox\" size=\"big\" htmlid=\"combo-checkbox-combobox-item_1\" label=\"primo elemento\"></z-input>\n                    </z-list-element>\n                    <z-list-element dividertype=\"none\" id=\"item_2\" size=\"large\">\n                      <z-input type=\"checkbox\" role=\"option\" aria-selected=\"true\" class=\"combo-item-checkbox-input-combobox\" size=\"big\" htmlid=\"combo-checkbox-combobox-item_2\"  label=\"secondo elemento\" checked></z-input>\n                    </z-list-element>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-combobox>\n    `);\n  });\n\n  it(\"Test render ZCombobox aperta con ricerca attiva e risultati\", async () => {\n    const page = await newSpecPage({\n      components: [ZCombobox],\n      html: `<z-combobox inputid=\"combobox\" label=\"combo\" hassearch=true searchlabel=\"cerca\" searchplaceholder=\"placeholder\" closesearchtext=\"CHIUDI\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]'></z-combobox>`,\n    });\n    page.rootInstance.isopen = true;\n    page.rootInstance.searchValue = \"primo\";\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-combobox inputid=\"combobox\" label=\"combo\" hassearch=true searchlabel=\"cerca\" searchplaceholder=\"placeholder\" closesearchtext=\"CHIUDI\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]'>\n        <mock:shadow-root>\n          <div class=\"open\" data-action=\"combo-combobox\" id=\"combobox\">\n            <div aria-expanded=\"true\" class=\"header\" role=\"button\" tabindex=\"0\">\n            <p class=\"body-3\">combo<span>(1)</span></p>\n              <z-icon class=\"big\" name=\"caret-down\" />\n            </div>\n            <div class=\"open-combo-data\">\n              <z-input aria-autocomplete=\"list\" aria-controls=\"combobox_list\" aria-expanded=\"true\" htmlid=\"combobox_search\" label=\"cerca\" placeholder=\"placeholder\" role=\"combobox\" aria-label=\"combo\" size=\"big\" type=\"text\" value=\"primo\"></z-input>              \n              <div aria-multiselectable=\"\" role=\"listbox\" aria-label=\"combo\" id=\"combobox_list\" aria-owns=\"\">\n                <div class=\"search\">\n                  <ul role=\"none\">\n                    <z-list-element dividertype=\"none\" id=\"item_1\" size=\"large\">\n                      <z-input role=\"option\" aria-selected=\"false\" disabled=\"0\" class=\"combo-item-checkbox-input-combobox\" type=\"checkbox\" size=\"big\" htmlid=\"combo-checkbox-combobox-item_1\" label=\"<strong>primo</strong> elemento\"></z-input>\n                    </z-list-element>\n                  </ul>\n                  <div>\n                    <a role=\"button\" tabindex=\"0\">CHIUDI</a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-combobox>\n    `);\n  });\n\n  it(\"Test render ZCombobox aperta con ricerca attiva senza testo di chiusura della ricerca testuale\", async () => {\n    const page = await newSpecPage({\n      components: [ZCombobox],\n      html: `<z-combobox inputid=\"combobox\" label=\"combo\" hassearch=true searchlabel=\"cerca\" searchplaceholder=\"placeholder\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]'></z-combobox>`,\n    });\n    page.rootInstance.isopen = true;\n    page.rootInstance.searchValue = \"primo\";\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-combobox inputid=\"combobox\" label=\"combo\" hassearch=true searchlabel=\"cerca\" searchplaceholder=\"placeholder\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]'>\n        <mock:shadow-root>\n          <div class=\"open\" data-action=\"combo-combobox\" id=\"combobox\">\n            <div aria-expanded=\"true\" class=\"header\" role=\"button\" tabindex=\"0\">\n            <p class=\"body-3\">combo<span>(1)</span></p>\n              <z-icon class=\"big\" name=\"caret-down\" />\n            </div>\n            <div class=\"open-combo-data\">\n              <z-input aria-autocomplete=\"list\" aria-controls=\"combobox_list\" aria-expanded=\"true\" htmlid=\"combobox_search\" label=\"cerca\" placeholder=\"placeholder\" role=\"combobox\" aria-label=\"combo\" size=\"big\" type=\"text\" value=\"primo\"></z-input>              \n              <div aria-multiselectable=\"\" role=\"listbox\" aria-label=\"combo\" id=\"combobox_list\" aria-owns=\"\">\n                <div class=\"search\">\n                  <ul role=\"none\">\n                    <z-list-element dividertype=\"none\" id=\"item_1\" size=\"large\">\n                      <z-input role=\"option\" aria-selected=\"false\" disabled=\"0\" class=\"combo-item-checkbox-input-combobox\" type=\"checkbox\" size=\"big\" htmlid=\"combo-checkbox-combobox-item_1\" label=\"<strong>primo</strong> elemento\"></z-input>\n                    </z-list-element>\n                  </ul>\n                  <div>\n                    <a role=\"button\" tabindex=\"0\">Chiudi</a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-combobox>\n    `);\n  });\n\n  it(\"Test render ZCombobox aperta con ricerca attiva senza risultati\", async () => {\n    const page = await newSpecPage({\n      components: [ZCombobox],\n      html: `<z-combobox inputid=\"combobox\" label=\"combo\" hassearch=true searchlabel=\"cerca\" searchplaceholder=\"placeholder\" closesearchtext=\"CHIUDI\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]' noresultslabel='non ci sono risultati'></z-combobox>`,\n    });\n    page.rootInstance.isopen = true;\n    page.rootInstance.searchValue = \"prova\";\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-combobox inputid=\"combobox\" label=\"combo\" hassearch=true searchlabel=\"cerca\" searchplaceholder=\"placeholder\" closesearchtext=\"CHIUDI\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]' noresultslabel='non ci sono risultati'>\n        <mock:shadow-root>\n          <div class=\"open\" data-action=\"combo-combobox\" id=\"combobox\">\n            <div aria-expanded=\"true\"  class=\"header\" role=\"button\" tabindex=\"0\">\n              <p class=\"body-3\">combo<span>(1)</span></p>\n              <z-icon class=\"big\" name=\"caret-down\" />\n            </div>\n            <div class=\"open-combo-data\">\n              <z-input aria-autocomplete=\"list\" aria-controls=\"combobox_list\" aria-expanded=\"true\" htmlid=\"combobox_search\" label=\"cerca\" placeholder=\"placeholder\" role=\"combobox\" aria-label=\"combo\" size=\"big\" type=\"text\" value=\"prova\"></z-input>\n               <div aria-multiselectable=\"\" role=\"listbox\" aria-label=\"combo\" id=\"combobox_list\" aria-owns=\"\">\n                <div class=\"search\">\n                  <ul role=\"none\">\n                    <z-myz-list-item class=\"big\" id='no-results' text='non ci sono risultati' listitemid='no-results' icon='multiply-circle'></z-myz-list-item>\n                  </ul>\n                  <div>\n                    <a role=\"button\" tabindex=\"0\">CHIUDI</a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-combobox>\n    `);\n  });\n\n  it(\"Test render ZCombobox aperta con check all\", async () => {\n    const page = await newSpecPage({\n      components: [ZCombobox],\n      html: `<z-combobox inputid=\"combobox\" label=\"combo\" hascheckall=\"true\" checkalltext=\"CHECK\" uncheckalltext=\"UNCHECK\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]'></z-combobox>`,\n    });\n    page.rootInstance.isopen = true;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-combobox inputid=\"combobox\" label=\"combo\" hascheckall=\"true\" checkalltext=\"CHECK\" uncheckalltext=\"UNCHECK\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]'>\n        <mock:shadow-root>\n          <div class=\"open\" data-action=\"combo-combobox\" id=\"combobox\">\n            <div aria-expanded=\"true\" class=\"header\" role=\"button\" tabindex=\"0\">\n              <p class=\"body-3\">combo<span>(1)</span></p>\n              <z-icon class=\"big\" name=\"caret-down\" />\n            </div>\n            <div class=\"open-combo-data\">\n              <span role=\"combobox\" aria-label=\"combo\" aria-controls=\"combobox_list\" aria-expanded=\"true\"></span>\n              <div aria-multiselectable=\"\" role=\"listbox\" aria-label=\"combo\" id=\"combobox_list\" aria-owns=\"\">\n                <div class=\"check-all-wrapper\">\n                  <z-input type=\"checkbox\" aria-selected=\"false\" role=\"option\" size=\"big\" htmlid=\"combo-checkbox-combobox-check-all\" class=\"combo-item-checkbox-input-combobox\" label=\"CHECK\" disabled=\"0\" />\n                </div>\n                <div>\n                  <ul role=\"none\">\n                    <z-list-element dividertype=\"element\" id=\"item_1\" size=\"large\">\n                      <z-input role=\"option\" aria-selected=\"false\" disabled=\"0\" class=\"combo-item-checkbox-input-combobox\" type=\"checkbox\" size=\"big\" htmlid=\"combo-checkbox-combobox-item_1\" label=\"primo elemento\"></z-input>\n                    </z-list-element>\n                  <z-list-element dividertype=\"none\" id=\"item_2\" size=\"large\">\n                      <z-input role=\"option\" aria-selected=\"true\" type=\"checkbox\" class=\"combo-item-checkbox-input-combobox\" size=\"big\" htmlid=\"combo-checkbox-combobox-item_2\" label=\"secondo elemento\" checked></z-input>\n                    </z-list-element>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-combobox>\n    `);\n  });\n\n  it(\"Test render ZCombobox aperta con uncheck all\", async () => {\n    const page = await newSpecPage({\n      components: [ZCombobox],\n      html: `<z-combobox inputid=\"combobox\" label=\"combo\" hascheckall=\"true\" checkalltext=\"CHECK\" uncheckalltext=\"UNCHECK\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":true},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]'></z-combobox>`,\n    });\n    page.rootInstance.isopen = true;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-combobox inputid=\"combobox\" label=\"combo\" hascheckall=\"true\" checkalltext=\"CHECK\" uncheckalltext=\"UNCHECK\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":true},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]'>\n        <mock:shadow-root>\n          <div class=\"open\" data-action=\"combo-combobox\" id=\"combobox\">\n            <div aria-expanded=\"true\" class=\"header\" role=\"button\" tabindex=\"0\">\n              <p class=\"body-3\">combo<span>(2)</span></p>\n              <z-icon class=\"big\" name=\"caret-down\" />\n            </div>\n            <div class=\"open-combo-data\">\n              <span role=\"combobox\" aria-label=\"combo\" aria-controls=\"combobox_list\" aria-expanded=\"true\"></span>\n              <div aria-multiselectable=\"\" role=\"listbox\" aria-label=\"combo\" id=\"combobox_list\" aria-owns=\"\">\n                <div class=\"check-all-wrapper\">\n                  <z-input type=\"checkbox\" aria-selected=\"true\" role=\"option\" size=\"big\" htmlid=\"combo-checkbox-combobox-check-all\" class=\"combo-item-checkbox-input-combobox\" label=\"UNCHECK\" checked disabled=\"0\" />\n                </div>\n                <div>\n                  <ul role=\"none\">\n                    <z-list-element dividertype=\"element\" id=\"item_1\" size=\"large\">                    \n                      <z-input type=\"checkbox\" role=\"option\" aria-selected=\"true\" class=\"combo-item-checkbox-input-combobox\" size=\"big\" htmlid=\"combo-checkbox-combobox-item_1\" label=\"primo elemento\" checked></z-input>\n                    </z-list-element>\n                    <z-list-element dividertype=\"none\" id=\"item_2\" size=\"large\">\n                      <z-input type=\"checkbox\" role=\"option\" aria-selected=\"true\" class=\"combo-item-checkbox-input-combobox\" size=\"big\" htmlid=\"combo-checkbox-combobox-item_2\" label=\"secondo elemento\" checked></z-input>\n                    </z-list-element>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-combobox>\n    `);\n  });\n\n  it(\"Test render ZCombobox aperta con max checkable items\", async () => {\n    const page = await newSpecPage({\n      components: [ZCombobox],\n      html: `<z-combobox inputid=\"combobox\" label=\"combo\" maxcheckableitems=\"1\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]'></z-combobox>`,\n    });\n    page.rootInstance.isopen = true;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-combobox inputid=\"combobox\" label=\"combo\" maxcheckableitems=\"1\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":false},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":true}]'>\n        <mock:shadow-root>\n          <div class=\"open\" data-action=\"combo-combobox\" id=\"combobox\">\n            <div aria-expanded=\"true\" class=\"header\" role=\"button\" tabindex=\"0\">\n             <p class=\"body-3\">combo<span>(1)</span></p>\n              <z-icon class=\"big\" name=\"caret-down\" />\n            </div>\n            <div class=\"open-combo-data\">\n              <span role=\"combobox\" aria-label=\"combo\" aria-controls=\"combobox_list\" aria-expanded=\"true\"></span>\n              <div aria-multiselectable=\"\" role=\"listbox\" aria-label=\"combo\" id=\"combobox_list\" aria-owns=\"\">\n                <div>\n                  <ul role=\"none\">\n                    <z-list-element dividertype=\"element\" id=\"item_1\" size=\"large\">\n                      <z-input role=\"option\" aria-selected=\"false\" disabled=\"\" class=\"combo-item-checkbox-input-combobox\" type=\"checkbox\" size=\"big\" htmlid=\"combo-checkbox-combobox-item_1\" label=\"primo elemento\"></z-input>\n                    </z-list-element>\n                    <z-list-element dividertype=\"none\" id=\"item_2\" size=\"large\">\n                      <z-input type=\"checkbox\" role=\"option\" aria-selected=\"true\" class=\"combo-item-checkbox-input-combobox\" size=\"big\" htmlid=\"combo-checkbox-combobox-item_2\" label=\"secondo elemento\" checked></z-input>\n                    </z-list-element>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-combobox>\n    `);\n  });\n\n  it(\"Test render ZCombobox aperta con maxcheckableitems + check all\", async () => {\n    const page = await newSpecPage({\n      components: [ZCombobox],\n      html: `<z-combobox inputid=\"combobox\" label=\"combo\" maxcheckableitems=\"3\" hascheckall=\"true\" checkalltext=\"CHECK\" uncheckalltext=\"UNCHECK\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":true},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":false}]'></z-combobox>`,\n    });\n    page.rootInstance.isopen = true;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-combobox inputid=\"combobox\" label=\"combo\" maxcheckableitems=\"3\" hascheckall=\"true\" checkalltext=\"CHECK\" uncheckalltext=\"UNCHECK\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":true},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":false}]'>\n        <mock:shadow-root>\n          <div class=\"open\" data-action=\"combo-combobox\" id=\"combobox\">\n            <div aria-expanded=\"true\" class=\"header\" role=\"button\" tabindex=\"0\">\n              <p class=\"body-3\">combo<span>(1)</span></p>\n              <z-icon class=\"big\" name=\"caret-down\" />\n            </div>\n            <div class=\"open-combo-data\">\n              <span role=\"combobox\" aria-label=\"combo\" aria-controls=\"combobox_list\" aria-expanded=\"true\"></span>\n              <div aria-multiselectable=\"\" role=\"listbox\" aria-label=\"combo\" id=\"combobox_list\" aria-owns=\"\">  \n                <div class=\"check-all-wrapper\">\n                  <z-input aria-selected=\"false\" type=\"checkbox\" role=\"option\" size=\"big\" htmlid=\"combo-checkbox-combobox-check-all\" class=\"combo-item-checkbox-input-combobox\" label=\"CHECK\" />\n                </div>\n                <div>\n                  <ul role=\"none\">\n                    <z-list-element dividertype=\"element\" id=\"item_1\" size=\"large\">  \n                      <z-input type=\"checkbox\" role=\"option\" aria-selected=\"true\" size=\"big\" class=\"combo-item-checkbox-input-combobox\" htmlid=\"combo-checkbox-combobox-item_1\" label=\"primo elemento\" checked></z-input>\n                    </z-list-element>\n                    <z-list-element dividertype=\"none\" id=\"item_2\" size=\"large\"> \n                      <z-input type=\"checkbox\" role=\"option\" aria-selected=\"false\" size=\"big\" class=\"combo-item-checkbox-input-combobox\" htmlid=\"combo-checkbox-combobox-item_2\" label=\"secondo elemento\"></z-input>\n                    </z-list-element>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-combobox>\n    `);\n  });\n\n  it(\"Test render ZCombobox aperta con maxcheckableitems + check all (disabled)\", async () => {\n    const page = await newSpecPage({\n      components: [ZCombobox],\n      html: `<z-combobox inputid=\"combobox\" label=\"combo\" maxcheckableitems=\"1\" hascheckall=\"true\" checkalltext=\"CHECK\" uncheckalltext=\"UNCHECK\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":true},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":false}]'></z-combobox>`,\n    });\n    page.rootInstance.isopen = true;\n    await page.waitForChanges();\n    expect(page.root).toEqualHtml(`\n      <z-combobox inputid=\"combobox\" label=\"combo\" maxcheckableitems=\"1\" hascheckall=\"true\" checkalltext=\"CHECK\" uncheckalltext=\"UNCHECK\" items='[{\"id\":\"item_1\",\"name\":\"primo elemento\",\"checked\":true},{\"id\":\"item_2\",\"name\":\"secondo elemento\",\"checked\":false}]'>\n        <mock:shadow-root>\n          <div class=\"open\" data-action=\"combo-combobox\" id=\"combobox\">\n            <div aria-expanded=\"true\" class=\"header\" role=\"button\" tabindex=\"0\">\n              <p class=\"body-3\">combo<span>(1)</span></p>\n              <z-icon class=\"big\" name=\"caret-down\" />\n            </div>\n             \n            <div class=\"open-combo-data\">             \n              <span role=\"combobox\" aria-label=\"combo\" aria-controls=\"combobox_list\" aria-expanded=\"true\"></span>\n              <div aria-multiselectable=\"\" role=\"listbox\" aria-label=\"combo\" id=\"combobox_list\" aria-owns=\"\">\n                <div class=\"check-all-wrapper\">\n                  <z-input type=\"checkbox\" aria-selected=\"false\" role=\"option\" size=\"big\" disabled htmlid=\"combo-checkbox-combobox-check-all\" class=\"combo-item-checkbox-input-combobox\" label=\"CHECK\" />\n                </div>\n                <div>\n                  <ul role=\"none\">\n                    <z-list-element dividertype=\"element\" id=\"item_1\" size=\"large\">  \n                      <z-input type=\"checkbox\" role=\"option\" aria-selected=\"true\" class=\"combo-item-checkbox-input-combobox\" size=\"big\" htmlid=\"combo-checkbox-combobox-item_1\" label=\"primo elemento\" checked></z-input>\n                    </z-list-element>\n                    <z-list-element dividertype=\"none\" id=\"item_2\" size=\"large\"> \n                      <z-input type=\"checkbox\" role=\"option\" aria-selected=\"false\" class=\"combo-item-checkbox-input-combobox\" size=\"big\" htmlid=\"combo-checkbox-combobox-item_2\" label=\"secondo elemento\" disabled></z-input>\n                    </z-list-element>\n                  </ul>\n                </div\n              </div>\n            </div>\n          </div>\n        </mock:shadow-root>\n      </z-combobox>\n    `);\n  });\n});\n"]}