{"version":3,"file":"test-radio.spec.js","sourceRoot":"","sources":["../../../../src/components/inputs/z-input/test-radio.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,MAAM,EAAC,MAAM,SAAS,CAAC;AAE/B,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,mDAAmD;SAC1D,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;KAW7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QAClD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,iGAAiG;SACxG,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;KAY7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC1C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,2DAA2D;SAClE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;KAW7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,yEAAyE;SAChF,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;KAW7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,4DAA4D;SACnE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;KAW7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,4DAA4D;SACnE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;OAW3B,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZInput} from \"./index\";\n\ndescribe(\"Suite test ZInput - radio\", () => {\n  it(\"Test render ZInput vuoto\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input htmlid=\"radioid\" type=\"radio\"></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input htmlid=\"radioid\" type=\"radio\" size=\"big\">\n\n          <div class=\"radio-wrapper\">\n            <input id=\"radioid\" type=\"radio\" />\n            <label htmlFor=\"radioid\" class=\"radio-label after\">\n              <z-icon name=\"radio-button\" aria-hidden=\"true\" class=\"big\"></z-icon>\n            </label>\n          </div>\n\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput with attributes\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input htmlid=\"radioid\" type=\"radio\" name=\"name\" value=\"value\" label=\"radio label\"></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input htmlid=\"radioid\" type=\"radio\" name=\"name\" value=\"value\" label=\"radio label\" size=\"big\">\n\n          <div class=\"radio-wrapper\">\n            <input id=\"radioid\" type=\"radio\" name=\"name\" value=\"value\" />\n            <label htmlFor=\"radioid\" class=\"radio-label after\">\n              <z-icon name=\"radio-button\" aria-hidden=\"true\" class=\"big\"></z-icon>\n              <span>radio label</span>\n            </label>\n          </div>\n\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput checked\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input htmlid=\"radioid\" type=\"radio\" checked></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input htmlid=\"radioid\" type=\"radio\" checked size=\"big\">\n\n          <div class=\"radio-wrapper\">\n            <input id=\"radioid\" type=\"radio\" checked />\n            <label htmlFor=\"radioid\" class=\"radio-label after\">\n              <z-icon name=\"radio-button-checked\" aria-hidden=\"true\" class=\"big\"></z-icon>\n            </label>\n          </div>\n\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput label before\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input htmlid=\"radioid\" type=\"radio\" label-position=\"left\"></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input htmlid=\"radioid\" type=\"radio\" label-position=\"left\" size=\"big\">\n\n          <div class=\"radio-wrapper\">\n            <input id=\"radioid\" type=\"radio\" />\n            <label htmlFor=\"radioid\" class=\"radio-label before\">\n              <z-icon name=\"radio-button\" aria-hidden=\"true\" class=\"big\"></z-icon>\n            </label>\n          </div>\n\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput disabled\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input htmlid=\"radioid\" type=\"radio\" disabled></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input htmlid=\"radioid\" type=\"radio\" disabled size=\"big\">\n\n          <div class=\"radio-wrapper\">\n            <input id=\"radioid\" type=\"radio\" disabled />\n            <label htmlFor=\"radioid\" class=\"radio-label after\">\n              <z-icon name=\"radio-button\" aria-hidden=\"true\" class=\"big\"></z-icon>\n            </label>\n          </div>\n\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput readonly\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input htmlid=\"radioid\" type=\"radio\" readonly></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n        <z-input htmlid=\"radioid\" type=\"radio\" readonly size=\"big\">\n\n            <div class=\"radio-wrapper\">\n              <input id=\"radioid\" type=\"radio\" readonly />\n              <label htmlFor=\"radioid\" class=\"radio-label after\">\n                <z-icon name=\"radio-button\" aria-hidden=\"true\" class=\"big\"></z-icon>\n              </label>\n            </div>\n\n        </z-input>\n      `);\n  });\n});\n"]}