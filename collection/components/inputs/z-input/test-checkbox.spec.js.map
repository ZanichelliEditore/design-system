{"version":3,"file":"test-checkbox.spec.js","sourceRoot":"","sources":["../../../../src/components/inputs/z-input/test-checkbox.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,MAAM,EAAC,MAAM,SAAS,CAAC;AAE/B,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;IAC5C,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,sDAAsD;SAC7D,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;KAW7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QAClD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,uGAAuG;SAC9G,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;KAY7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC1C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,8DAA8D;SACrE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;KAW7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,4EAA4E;SACnF,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;KAW7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,+DAA+D;SACtE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;KAW7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,+DAA+D;SACtE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;OAW3B,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZInput} from \"./index\";\n\ndescribe(\"Suite test ZInput - checkbox\", () => {\n  it(\"Test render ZInput vuoto\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input htmlid=\"checkid\" type=\"checkbox\"></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input htmlid=\"checkid\" type=\"checkbox\" size=\"big\">\n\n          <div class=\"checkbox-wrapper\">\n            <input id=\"checkid\" type=\"checkbox\" />\n            <label htmlFor=\"checkid\" class=\"checkbox-label after\">\n              <z-icon name=\"checkbox\" aria-hidden=\"true\" class=\"big\"></z-icon>\n            </label>\n          </div>\n\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput with attributes\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input htmlid=\"checkid\" type=\"checkbox\" name=\"name\" label=\"checkbox label\" value=\"value\"></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input htmlid=\"checkid\" type=\"checkbox\" name=\"name\" label=\"checkbox label\" value=\"value\" size=\"big\">\n\n          <div class=\"checkbox-wrapper\">\n            <input id=\"checkid\" type=\"checkbox\" name=\"name\" value=\"value\" />\n            <label htmlFor=\"checkid\" class=\"checkbox-label after\">\n              <z-icon name=\"checkbox\" aria-hidden=\"true\" class=\"big\"></z-icon>\n              <span>checkbox label</span>\n            </label>\n          </div>\n\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput checked\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input htmlid=\"checkid\" type=\"checkbox\" checked></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input htmlid=\"checkid\" type=\"checkbox\" checked size=\"big\">\n\n          <div class=\"checkbox-wrapper\">\n            <input id=\"checkid\" type=\"checkbox\" checked />\n            <label htmlFor=\"checkid\" class=\"checkbox-label after\">\n              <z-icon name=\"checkbox-checked\" aria-hidden=\"true\" class=\"big\"></z-icon>\n            </label>\n          </div>\n\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput label before\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input htmlid=\"checkid\" type=\"checkbox\" label-position=\"left\"></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input htmlid=\"checkid\" type=\"checkbox\" label-position=\"left\" size=\"big\">\n\n          <div class=\"checkbox-wrapper\">\n            <input id=\"checkid\" type=\"checkbox\" />\n            <label htmlFor=\"checkid\" class=\"checkbox-label before\">\n              <z-icon name=\"checkbox\" aria-hidden=\"true\" class=\"big\"></z-icon>\n            </label>\n          </div>\n\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput disabled\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input htmlid=\"checkid\" type=\"checkbox\" disabled></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n      <z-input htmlid=\"checkid\" type=\"checkbox\" disabled size=\"big\">\n\n          <div class=\"checkbox-wrapper\">\n            <input id=\"checkid\" type=\"checkbox\" disabled />\n            <label htmlFor=\"checkid\" class=\"checkbox-label after\">\n              <z-icon name=\"checkbox\" aria-hidden=\"true\" class=\"big\"></z-icon>\n            </label>\n          </div>\n\n      </z-input>\n    `);\n  });\n\n  it(\"Test render ZInput readonly\", async () => {\n    const page = await newSpecPage({\n      components: [ZInput],\n      html: `<z-input htmlid=\"checkid\" type=\"checkbox\" readonly></z-input>`,\n    });\n    expect(page.root).toEqualHtml(`\n        <z-input htmlid=\"checkid\" type=\"checkbox\" readonly size=\"big\">\n\n            <div class=\"checkbox-wrapper\">\n              <input id=\"checkid\" type=\"checkbox\" readonly />\n              <label htmlFor=\"checkid\" class=\"checkbox-label after\">\n                <z-icon class=\"big\" name=\"checkbox\" aria-hidden=\"true\"></z-icon>\n              </label>\n            </div>\n\n        </z-input>\n      `);\n  });\n});\n"]}