{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../src/components/z-avatar/index.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,OAAO,EAAC,MAAM,SAAS,CAAC;AAEhC,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,OAAO,CAAC;YACrB,IAAI,EAAE,uBAAuB;SAC9B,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;KAI7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,OAAO,CAAC;YACrB,IAAI,EAAE,oCAAoC;SAC3C,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;KAI7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,OAAO,CAAC;YACrB,IAAI,EAAE,oCAAoC;SAC3C,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;KAQ7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,OAAO,CAAC;YACrB,IAAI,EAAE,sEAAsE;SAC7E,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;KAa7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,OAAO,CAAC;YACrB,IAAI,EAAE,4EAA4E;SACnF,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;KAa7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,OAAO,CAAC;YACrB,IAAI,EAAE,iFAAiF;SACxF,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;KAS7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZAvatar} from \"./index\";\n\ndescribe(\"Suite test ZAvatar\", () => {\n  it(\"Test render ZAvatar default\", async () => {\n    const page = await newSpecPage({\n      components: [ZAvatar],\n      html: `<z-avatar></z-avatar>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-avatar class=\"body-4-sb medium\" style=\"color: var(--color-white); background-color: var(--gray700)\">\n        <mock:shadow-root></mock:shadow-root>\n      </z-avatar>\n    `);\n  });\n\n  it(\"Test render ZAvatar size prop\", async () => {\n    const page = await newSpecPage({\n      components: [ZAvatar],\n      html: `<z-avatar size=\"small\"></z-avatar>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-avatar class=\"body-5-sb small\" style=\"color: var(--color-white); background-color: var(--gray700)\" size=\"small\">\n        <mock:shadow-root></mock:shadow-root>\n      </z-avatar>\n    `);\n  });\n\n  it(\"Test render ZAvatar text prop\", async () => {\n    const page = await newSpecPage({\n      components: [ZAvatar],\n      html: `<z-avatar text=\"ABCDE\"></z-avatar>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-avatar class=\"body-4-sb medium\" style=\"color: var(--color-white); background-color: var(--gray700)\" text=\"ABCDE\">\n        <mock:shadow-root>\n          <span>\n            AB\n          </span>\n        </mock:shadow-root>\n      </z-avatar>\n    `);\n  });\n\n  it(\"Test render ZAvatar text-color prop\", async () => {\n    const page = await newSpecPage({\n      components: [ZAvatar],\n      html: `<z-avatar text=\"ABCDE\" text-color=\"blue500\" size=\"small\"></z-avatar>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-avatar\n        class=\"body-5-sb small\"\n        style=\"color: var(--blue500); background-color: var(--gray700)\"\n        text-color=\"blue500\"\n        text=\"ABCDE\"\n        size=\"small\">\n          <mock:shadow-root>\n            <span>\n              AB\n            </span>\n          </mock:shadow-root>\n      </z-avatar>\n    `);\n  });\n\n  it(\"Test render ZAvatar background-color prop\", async () => {\n    const page = await newSpecPage({\n      components: [ZAvatar],\n      html: `<z-avatar text=\"ABCDE\" background-color=\"blue500\" size=\"large\"></z-avatar>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-avatar\n      class=\"body-2-sb large\"\n        style=\"color: var(--color-white); background-color: var(--blue500)\"\n        background-color=\"blue500\"\n        text=\"ABCDE\"\n        size=\"large\">\n          <mock:shadow-root>\n            <span>\n              AB\n            </span>\n          </mock:shadow-root>\n      </z-avatar>\n    `);\n  });\n\n  it(\"Test render ZAvatar image prop\", async () => {\n    const page = await newSpecPage({\n      components: [ZAvatar],\n      html: `<z-avatar image=\"https://cdn.eso.org/images/thumb700x/eso1907a.jpg\"></z-avatar>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-avatar\n        class=\"body-4-sb medium\"\n        style=\"color: var(--color-white); background-color: var(--gray700)\"\n        image=\"https://cdn.eso.org/images/thumb700x/eso1907a.jpg\">\n          <mock:shadow-root>\n            <img src=\"https://cdn.eso.org/images/thumb700x/eso1907a.jpg\">\n          </mock:shadow-root>\n      </z-avatar>\n    `);\n  });\n});\n"]}