{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../../src/components/z-tag/index.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAC,IAAI,EAAC,MAAM,SAAS,CAAC;AAE7B,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,IAAI,EAAE,iBAAiB;SACxB,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,4BAA4B,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,IAAI,EAAE,6BAA6B;SACpC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;eAInB,CAAC,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,IAAI,EAAE,kCAAkC;SACzC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;KAI7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,IAAI,EAAE,8CAA8C;SACrD,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;KAK7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,IAAI,EAAE,6HAA6H;SACpI,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;KAK7B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {newSpecPage} from \"@stencil/core/testing\";\n\nimport {ZTag} from \"./index\";\n\ndescribe(\"Suite test ZTag\", () => {\n  it(\"Test render z-tag empty\", async () => {\n    const page = await newSpecPage({\n      components: [ZTag],\n      html: `<z-tag></z-tag>`,\n    });\n\n    expect(page.root).toEqualHtml(`<z-tag><div></div></z-tag>`);\n  });\n\n  it(\"Test render z-tag with icon\", async () => {\n    const page = await newSpecPage({\n      components: [ZTag],\n      html: `<z-tag icon=\"gear\"></z-tag>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-tag icon=\"gear\">\n        <z-icon name=\"gear\"></z-icon>\n        <div></div>\n      </z-tag>`);\n  });\n\n  it(\"Test render z-tag with text\", async () => {\n    const page = await newSpecPage({\n      components: [ZTag],\n      html: `<z-tag>my custom element</z-tag>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-tag>\n      <div>my custom element</div>\n      </z-tag>\n    `);\n  });\n\n  it(\"Test render z-tag with icon and text\", async () => {\n    const page = await newSpecPage({\n      components: [ZTag],\n      html: `<z-tag icon=\"gear\">my custom element</z-tag>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-tag icon=\"gear\" >\n        <z-icon name=\"gear\"></z-icon>\n        <div>my custom element</div>\n      </z-tag>\n    `);\n  });\n\n  it(\"Test render z-tag with icon and text with Token\", async () => {\n    const page = await newSpecPage({\n      components: [ZTag],\n      html: `<z-tag icon=\"gear\" style=\"--z-tag-text-color: var(--color-white); --z-tag-bg: var(--avatar-C19);\">my custom element</z-tag>`,\n    });\n\n    expect(page.root).toEqualHtml(`\n      <z-tag icon=\"gear\" style=\"--z-tag-text-color: var(--color-white); --z-tag-bg: var(--avatar-C19);\">\n        <z-icon name=\"gear\"></z-icon>\n        <div>my custom element</div>\n      </z-tag>\n    `);\n  });\n});\n"]}