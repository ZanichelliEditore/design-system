{"version":3,"file":"storybook-utils.js","sourceRoot":"","sources":["../../src/utils/storybook-utils.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,SAAS,oBAAoB;IAC3B,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;SACpC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;SAC1C,IAAI,EAAE;SACN,MAAM,CAAC,CAAC,IAAI,EAAwB,EAAE,CAAC,IAAI,YAAY,YAAY,IAAI,IAAI,CAAC,YAAY,KAAK,OAAO,CAAC;SACrG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;SAC9C,IAAI,EAAE;SACN,MAAM,CAAC,OAAO,CAAC,CAAC;AACrB,CAAC;AAED;;;;;;;;;;;;;;GAcG;AACH,MAAM,UAAU,cAAc;;IAC5B,MAAM,oBAAoB,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC3F,MAAM,WAAW,GAAG,MAAA,oBAAoB,EAAE,0CAAE,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAC3D,oBAAoB,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CACrE,CAAC;IAEF,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAC1C,CAAC;AAED;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,YAAY;IAC1B,OAAO,cAAc,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,KAAK,GAAG,CAAC,CAAC;AAC1D,CAAC;AAED;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,kBAAkB;IAChC,OAAO,YAAY,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,iCAAK,GAAG,KAAE,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAE,EAAE,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC,CAAC;AAC3G,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,oBAAoB;;IAClC,MAAM,WAAW,GAAG,MAAA,oBAAoB,EAAE,0CAAE,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;IAE3F,oBAAoB;IACpB,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;AACnC,CAAC","sourcesContent":["/**\n * Get all root CSS properties.\n */\nfunction getRootCssProperties(): string[] {\n  return Array.from(document.styleSheets)\n    .map((sheet) => Array.from(sheet.cssRules))\n    .flat()\n    .filter((rule): rule is CSSStyleRule => rule instanceof CSSStyleRule && rule.selectorText === \":root\")\n    .map((rule) => Object.values(rule.style || {}))\n    .flat()\n    .filter(Boolean);\n}\n\n/**\n * Get Design System color tokens.\n * Can be used in components stories controls as follows:\n * @example ```\n * argTypes={{\n *  \"--z-component--background-color\": {\n *    control: {type: \"select\"},\n *    options: getColorTokens(),\n *  }\n * }}```\n *\n * and then in the component tag\n *\n * ```<z-component .style=\"--z-component--background-color: var(${args[\"--z-component--background-color\"]})\" />```\n */\nexport function getColorTokens(): string[] {\n  const availableColorGroups = [\"red\", \"green\", \"blue\", \"yellow\", \"gray\", \"avatar\", \"color\"];\n  const colorTokens = getRootCssProperties()?.filter((token) =>\n    availableColorGroups.some((group) => token.startsWith(`--${group}`))\n  );\n\n  return [...new Set(colorTokens)].sort();\n}\n\n/**\n * Get Design System color tokens as CSS variable rule (something like `var(--color-token)`).\n * @example ```\n * argTypes={{\n *  \"--z-component--background-color\": {\n *    control: {type: \"select\"},\n *    options: getColorTokens(),\n *  }\n * }}```\n *\n * and then in the component tag\n *\n * ```<z-component .style=\"--z-component--background-color: ${args[\"--z-component--background-color\"]}\" />```\n */\nexport function getColorVars(): string[] {\n  return getColorTokens().map((token) => `var(${token})`);\n}\n\n/**\n * Get Design System color tokens as readable labels for control configuration.\n * It assumes you set the options using the `getColorVars()` function, so expected options are something like `var(--color-token)`.\n * @example ```\n * argTypes={{\n *  \"--z-component--background-color\": {\n *    options: getColorTokens(),\n *    control: {\n *      type: \"select\",\n *      labels: getColorVarsLabels(),\n *    },\n *  }\n * }}```\n */\nexport function getColorVarsLabels(): Record<string, string> {\n  return getColorVars().reduce((acc, token) => ({...acc, [token]: token.slice(6, -1)}), {null: \"default\"});\n}\n\n/**\n * Get Design System themes tokens.\n */\nexport function getThemesColorTokens(): string[] {\n  const colorTokens = getRootCssProperties()?.filter((token) => token.startsWith(`--color`));\n\n  // remove duplicates\n  return [...new Set(colorTokens)];\n}\n"]}