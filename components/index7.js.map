{"file":"index7.js","mappings":";;AAAA,MAAM,SAAS,GAAG,64CAA64C,CAAC;AACh6C,4BAAe,SAAS;;MCMX,aAAa;;;;;;;;IAShB,kBAAkB,CAAC,KAAe;QACxC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC9B;IAIO,uBAAuB;QAC7B,QACE,WAAK,KAAK,EAAC,oBAAoB,IAC7B,WAAK,KAAK,EAAC,kBAAkB,IAC3B,YAAM,KAAK,EAAC,WAAW,IAAE,IAAI,CAAC,gBAAgB,CAAQ,CAClD,CACF,EACN;KACH;IAED,MAAM;QACJ,QACE,4DACE,QAAQ,EAAE,CAAC,EACX,GAAG,EAAE,CAAC,GAAG,MAAM,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC,EAC5C,KAAK,EAAC,UAAU,EAChB,UAAU,EAAE,CAAC,CAAC;gBACZ,CAAC,CAAC,cAAc,EAAE,CAAC;gBACnB,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;aAClD,EACD,WAAW,EAAE;gBACX,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;aACrD,EACD,MAAM,EAAE,CAAC,CAAC;gBACR,CAAC,CAAC,cAAc,EAAE,CAAC;gBACnB,IAAI,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,EAAE;oBAC/B,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;oBACpD,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;iBAC/C;aACF,IAEA,IAAI,CAAC,uBAAuB,EAAE,EAC/B,8DAAQ,CACJ,EACN;KACH;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/file-upload/z-dragdrop-area/styles.css?tag=z-dragdrop-area&encapsulation=shadow","src/components/file-upload/z-dragdrop-area/index.tsx"],"sourcesContent":[":host {\n  font-family: var(--font-family-sans);\n  font-weight: var(--font-rg);\n}\n\n:host > .dragdrop {\n  position: relative;\n  display: flex;\n  height: 228px;\n  flex-direction: column;\n  padding: calc(var(--space-unit) * 2);\n  border-color: var(--color-surface04);\n  background-color: var(--color-surface02);\n\n  /* Native CSS properties don't support the customization of border-style.\n  Therefore, we use a trick with an SVG image inside background-image property.\n  The SVG features give us the ability to change the distance between dashed lines, set custom pattern, add dash offset or even change a line cap.\n  Generated SVG image is vector and it fills width and height of elements by 100%, so it doesn't matter what size elements have. */\n  background-image: url(\"data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' rx='2' ry='2' stroke='%23CACCCEFF' stroke-width='2' stroke-dasharray='15%2c 10%2c 14%2c 11' stroke-dashoffset='3' stroke-linecap='square'/%3e%3c/svg%3e\");\n  border-radius: 2px;\n  color: var(--color-default-text);\n}\n\n:host > .dragdrop:focus-visible {\n  box-shadow: var(--shadow-focus-primary);\n  outline: none !important;\n}\n\n/* https://stackoverflow.com/questions/7110353/html5-dragleave-fired-when-hovering-a-child-element */\n:host > .dragdrop.dragover * {\n  pointer-events: none;\n}\n\n:host > .dragdrop .dragover-container {\n  position: absolute;\n  z-index: 10;\n  top: 0;\n  left: 0;\n  display: none;\n  width: 100%;\n  height: 100%;\n  background-color: var(--color-primary03);\n  box-shadow: var(--shadow-focus-primary);\n}\n\n:host > .dragdrop .dragover-container .dragover-message {\n  padding: 10px 28px;\n  background-color: var(--color-link-primary);\n  color: var(--color-text-inverse);\n}\n\n:host > .dragdrop.dragover .dragover-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n","import {Component, Event, EventEmitter, Prop, h} from \"@stencil/core\";\n\n@Component({\n  tag: \"z-dragdrop-area\",\n  styleUrl: \"styles.css\",\n  shadow: true,\n})\nexport class ZDragdropArea {\n  /** drag & drop button label */\n  @Prop()\n  dragAndDropLabel: string;\n\n  /** Emitted when user drop one or more files */\n  @Event()\n  fileDropped: EventEmitter;\n\n  private fileDroppedHandler(files: FileList): void {\n    this.fileDropped.emit(files);\n  }\n\n  private dragDropContainer: HTMLDivElement;\n\n  private renderOnDragOverMessage(): HTMLDivElement {\n    return (\n      <div class=\"dragover-container\">\n        <div class=\"dragover-message\">\n          <span class=\"body-2-sb\">{this.dragAndDropLabel}</span>\n        </div>\n      </div>\n    );\n  }\n\n  render(): HTMLDivElement {\n    return (\n      <div\n        tabIndex={0}\n        ref={(val) => (this.dragDropContainer = val)}\n        class=\"dragdrop\"\n        onDragOver={(e) => {\n          e.preventDefault();\n          this.dragDropContainer.classList.add(\"dragover\");\n        }}\n        onDragLeave={() => {\n          this.dragDropContainer.classList.remove(\"dragover\");\n        }}\n        onDrop={(e) => {\n          e.preventDefault();\n          if (e.dataTransfer.files.length) {\n            this.dragDropContainer.classList.remove(\"dragover\");\n            this.fileDroppedHandler(e.dataTransfer.files);\n          }\n        }}\n      >\n        {this.renderOnDragOverMessage()}\n        <slot />\n      </div>\n    );\n  }\n}\n"],"version":3}